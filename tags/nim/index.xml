<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nim on Recent posts</title><link>https://blog.johnnovak.net/tags/nim/</link><description>Recent content in nim on Recent posts</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.johnnovak.net/tags/nim/index.xml" rel="self" type="application/rss+xml"/><item><title>Nim Apocrypha, Vol. I</title><link>https://blog.johnnovak.net/nim-apocrypha-vol-i/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/nim-apocrypha-vol-i/</guid><description>Table of contents Intro I &amp;mdash; The Not-So-Obvious 1 Reducing executable size by stripping debug symbols 2 Release builds with exception logging 3 Switching to ARC/ORC 4 Executable icons on Windows (MinGW) 5 Debug echo in Windows GUI programs (MinGW) II &amp;mdash; The Hidden 6 &amp;lsquo;using&amp;rsquo; keyword 7 Opening URLs in the default browser 8 Cross-platform home and config directories 9 Debug dumping expressions 10 Measuring elapsed time 11 Dealing with openarrays III &amp;mdash; The Crafty 12 Easy pointer manipulations 13 Taming circular type dependencies 14 &amp;lsquo;with&amp;rsquo; macro 15 Aliases IV &amp;mdash; The Grand Finale 16 Saving memory by object field reordering Outro Intro Greetings fellow Nim adventurers!</description></item><item><title>Creating a Nim wrapper for FMOD</title><link>https://blog.johnnovak.net/2018/07/07/creating-a-nim-wrapper-for-fmod/</link><pubDate>Sat, 07 Jul 2018 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/2018/07/07/creating-a-nim-wrapper-for-fmod/</guid><description>Table of contents Overview Prerequisites Auto-generating the basic wrapper Fixing conversion errors &amp;ndash; Part 1 Opaqueue C structs Circular types Unsigned integer literals Dynamic linking Fixing conversion errors &amp;mdash; Part 2 FMOD callbacks and function pointers Missing constants Error handling helpers Improving the wrapper Conclusion Further links of interest Overview One of the many attractive things about Nim is its ability to interface with C libraries relatively easily, be they either statically linked or dynamically loaded.</description></item><item><title>Ao resists the forces of darkness (pbrt meets Nim)</title><link>https://blog.johnnovak.net/2017/06/18/ao-resists-the-forces-of-darkness-pbrt-meets-nim/</link><pubDate>Sun, 18 Jun 2017 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/2017/06/18/ao-resists-the-forces-of-darkness-pbrt-meets-nim/</guid><description>Table of contents Overview Notes on the book Coordinate system Vectors, Normals, Points Matrix inverse Ray-box intersection tests Notes on Nim Project structure Inlining Calling parent methods Managing circular dependencies Conclusion Further links of interest Overview I started reading the awesome Physically Based Rendering: From Theory to Implementation book a few weeks ago, which made me realise that it&amp;rsquo;s probably for the best if I rewrote my ray tracer from the ground up based on the ideas presented in the book.</description></item><item><title>Nim performance tuning for the uninitiated</title><link>https://blog.johnnovak.net/2017/04/22/nim-performance-tuning-for-the-uninitiated/</link><pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/2017/04/22/nim-performance-tuning-for-the-uninitiated/</guid><description>UPDATE 2017-06-04: Corrected some slight misinformation regarding link time optimisations and the {.inline.} pragma, some stylistic improvements, added more references.
Table of contents Overview First attempts Test setup Round 1 &amp;mdash; Nim vs C++ 0. C++ 1. Nim &amp;mdash; using GLM 2. Nim &amp;mdash; custom vector class (object refs) 3. Nim &amp;mdash; custom vector class (objects) 4. Nim &amp;mdash; vector module 5. Nim &amp;mdash; vector module (with inlines) Round 2 &amp;mdash; Nim vs Java, JavaScript &amp;amp; Python JIT warmup Conclusion Does it all matter?</description></item><item><title>The Nim Ray Tracer Project --- Part 4: Calculating box normals</title><link>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-4-calculating-box-normals/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-4-calculating-box-normals/</guid><description>[I&amp;rsquo;ve been listening to Shadows of the Heart from Dan Pound all week, it&amp;rsquo;s just the perfect definition of ambient that, according to Brian Eno, &amp;ldquo;must be as ignorable as it is interesting&amp;rdquo;. No track highlights this time, this is really meant to be listened to from beginning to end, over and over again; it&amp;rsquo;s one singular 55-minute piece of soothing ambient symphony!]
I needed a way to calculate normals for the box primitive in my ray tracer.</description></item><item><title>The Nim Ray Tracer Project --- Part 3: Lighting &amp; Vector Maths</title><link>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-3-lighting-vector-maths/</link><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-3-lighting-vector-maths/</guid><description>[Listening Esoterica from Dan Pound. Very reminiscent of the Steve Roach type of tribal/electronic ambient, which is always a good thing in my book. Parts 1, 2, 6 &amp;amp; 7 are my personal highlights.]
Ok, so last time I ended my post with the cliffhanger that I&amp;rsquo;m going to show some actual Nim code in the next episode, which is this. Well, I&amp;rsquo;ll never make foolish promises like that again, I swear!</description></item><item><title>The Nim Ray Tracer Project --- Part 2: The Basics</title><link>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-2-the-basics/</link><pubDate>Sat, 30 Apr 2016 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-2-the-basics/</guid><description>[I have to tell that even after 34 years, Brian Eno&amp;rsquo;s ambient music is still so much better than 99.9999% of all recent electronic releases. Listening to Ambient 4: On Land from 1982; track #2 The Lost Day has a wonderfully creepy atmosphere&amp;hellip;]
Table of contents The Basics Coordinate system Notation Transform matrices Calculating primary rays Ray-sphere intersection Ray-plane intersection In the next episode&amp;hellip; Suggested reading The Basics Hello again!</description></item><item><title>The Nim Ray Tracer Project --- Part 1: Introduction</title><link>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-1-introduction/</link><pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate><guid>https://blog.johnnovak.net/the-nim-ray-tracer-project-part-1-introduction/</guid><description>[Listening to the albums Reverberant Skies and White Maps from Aglaia in an infinite loop&amp;hellip; A beautifully hypnotic experience! The track In the First Spinning Place from White Maps is my absolute favourite.]
Why a ray tracer? I&amp;rsquo;ve been fascinated by ray tracing since my childhood. I still remember the first time I was playing around with an early 3D modeller/ray tracer program on the Amiga 500 called Imagine when I was about 13, trying to render some extruded letters made of glass placed on a classic checker-board patterned surface (don&amp;rsquo;t laugh, this was sort of a novel thing to do at that time, and I was a kid).</description></item></channel></rss>