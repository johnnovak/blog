<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Personal blog of John Novak</title>
        <description>Personal blog of John Novak</description>
        <link>http://blog.johnnovak.net</link>
        <atom:link href="http://blog.johnnovak.net/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Creating a Nim wrapper for FMOD</title>
                <description>&lt;p&gt;One of the many attractive things about Nim is its ability to interface with
C libraries relatively easily, be they either statically linked or dynamically
loaded. As all Nim source code is ultimately transformed to C code during
compilation &lt;sup id=&quot;fnref:javascript&quot;&gt;&lt;a href=&quot;#fn:javascript&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, Nim’s
C &lt;a href=&quot;https://nim-lang.org/docs/manual.html#foreign-function-interface&quot;&gt;FFI&lt;/a&gt; is
unsurprisingly quite minimal. We still need to do some work, though, namely
creating a Nim wrapper that will define our Nim API to the C library.&lt;/p&gt;

&lt;p&gt;Thankfully, we don’t need to do all this by hand; there’s a handy tool aptly
called &lt;code&gt;c2nim&lt;/code&gt; that can automatically generate such a wrapper from the
C header files. But, as we’ll shortly see, while the tool is a great help to
do the bulk of the grunt work, the generated files often need some further
manual massaging to become usable.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine the full process of creating a Nim wrapper for
the well-known &lt;a href=&quot;https://fmod.com&quot;&gt;FMOD audio library&lt;/a&gt;, more specifically, for
the FMOD Low Level API. Fortunately, FMOD provides both a C++ and C API, so we
can just use the C headers which usually makes the job a lot easier than
dealing with all the C++ nonsense…&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;First, we need to register at the &lt;a href=&quot;https://fmod.com&quot;&gt;FMOD website&lt;/a&gt; to be able
to &lt;a href=&quot;https://fmod.com/download&quot;&gt;download&lt;/a&gt; the FMOD Studio API.  The naming is
a bit misleading because it actually contains the header and library files for
&lt;em&gt;both&lt;/em&gt; the FMOD Studio API and the FMOD Low Level API. There are three
separate downloads for Windows, Linux and OS X. The C header files are located
in &lt;code&gt;api/lowlevel/inc&lt;/code&gt; and the shared libraries in &lt;code&gt;api/lowlevel/lib&lt;/code&gt; inside
the archives.&lt;/p&gt;

&lt;p&gt;We’ll also need to install the &lt;a href=&quot;https://github.com/nim-lang/c2nim&quot;&gt;c2nim&lt;/a&gt; tool
to convert the C header files into Nim wrappers (it doesn’t come with the
standard Nim installation). The project’s GitHub page contains the
installation instructions.&lt;/p&gt;

&lt;h2 id=&quot;auto-generating-the-basic-wrapper&quot;&gt;Auto-generating the basic wrapper&lt;/h2&gt;

&lt;p&gt;The main header file is &lt;code&gt;fmod.h&lt;/code&gt;, but if we just tried to convert it using
&lt;code&gt;c2nim&lt;/code&gt;, we would get errors. The reasons for this is that &lt;code&gt;c2nim&lt;/code&gt; does not
perform C preprocessor expansion—we’ll need some help from &lt;code&gt;gcc&lt;/code&gt; to do that
as the first step:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -E fmod.h -o fmod_prep.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can run &lt;code&gt;c2nim&lt;/code&gt; on the resulting preprocessed header file without
errors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;c2nim fmod_prep.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yikes! Let’s try to compile it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% nim c fmod_prep.nim
Hint: used config file '/Users/johnnovak/.choosenim/toolchains/nim-0.18.0/config/nim.cfg' [Conf]
Hint: system [Processing]
Hint: fmod_prep [Processing]
fmod_prep.nim(219, 45) Error: undeclared identifier: 'FMOD_SYSTEM'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;[ CUE SAD TROMBONE… ]&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, looks like there’s some extra work to be done here!&lt;/p&gt;

&lt;h2 id=&quot;fixing-conversion-errors----part-1&quot;&gt;Fixing conversion errors – Part 1&lt;/h2&gt;

&lt;p&gt;Okay, first comes the easy part, let’s fix the compilation errors!&lt;/p&gt;

&lt;h3 id=&quot;opaqueue-c-structs&quot;&gt;Opaqueue C structs&lt;/h3&gt;

&lt;p&gt;It turns out that the above error was raised because &lt;code&gt;c2nim&lt;/code&gt; just ignores
opaque C structs. So we’ll need to manually add the Nim equivalents of all
the opaque structs found in &lt;code&gt;fmod_common.h&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELCONTROL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELCONTROL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s the corresponding Nim conversion:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELCONTROL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;circular-types&quot;&gt;Circular types&lt;/h3&gt;

&lt;p&gt;Our next compilation attempt is awarded with the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% nim c fmod_prep.nim
Hint: used config file '/Users/johnnovak/.choosenim/toolchains/nim-0.18.0/config/nim.cfg' [Conf]
Hint: system [Processing]
Hint: fmod_prep [Processing]
fmod_prep.nim(775, 52) Error: undeclared identifier: 'FMOD_DSP_STATE'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is caused by circular type definitions in the C header and it’s quite
easy to fix—we just need to collapse all individual type definitions
into a single &lt;code&gt;type&lt;/code&gt; block (mutually dependent types are only allowed within
a single &lt;code&gt;type&lt;/code&gt; block in Nim).&lt;/p&gt;

&lt;h3 id=&quot;unsigned-integer-literals&quot;&gt;Unsigned integer literals&lt;/h3&gt;

&lt;p&gt;The C type of the FMOD constants is &lt;code&gt;unsigned int&lt;/code&gt;, which gets mapped to
unsigned 32-bit integers by most C compilers by tradition. In Nim, however,
integer literals are interpreted as Nim signed &lt;code&gt;int&lt;/code&gt; types, which are mapped to
the word-length of the target architecture—signed 64-bit ints, in our case.
The current Nim implementation (0.18.0) has a quirk that it will convert such
signed 64-bit int literals only if they fit into the &lt;em&gt;signed&lt;/em&gt; width range of
the target variable (which is signed 32-bit in this case):&lt;/p&gt;

&lt;p&gt;So the following definition&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_MEMORY_TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cuint&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_MEMORY_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_MEMORY_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFF&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will result in the below compilation error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fmod.nim(2327, 40) Error: type mismatch: got &amp;lt;int64&amp;gt; but expected 'FMOD_MEMORY_TYPE = uint32'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can get a bit confusing, but the workaround is quite simple: just append
the &lt;code&gt;'u32&lt;/code&gt; suffix to all literals that cannot be represented in the signed
version of the target width:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;  &lt;span class=&quot;n&quot;&gt;FMOD_MEMORY_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_MEMORY_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFFFFFFF&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;&amp;#39;u32&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;dynamic-linking&quot;&gt;Dynamic linking&lt;/h2&gt;

&lt;p&gt;Alright, we can compile our Nim wrapper now, but we’ll need to make a few
adjustments to make it work with the FMOD shared libraries.&lt;/p&gt;

&lt;p&gt;This is how the generated Nim function signatures look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FMOD_System_PlaySound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channelgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELGROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The most flexible way to support shared library loading on multiple platforms
is to add a user-defined &lt;code&gt;fmodImport&lt;/code&gt; pragma to all function signatures and
of course the &lt;code&gt;cdecl&lt;/code&gt; pragma to use C calling conventions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FMOD_System_PlaySound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channelgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELGROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmodImport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The definition of the  &lt;code&gt;fmodImport&lt;/code&gt; pragma is the following (note that it’s
possible to link against the logging version of FMOD by specifying the
&lt;code&gt;-d:fmodDebugLog&lt;/code&gt; compiler option):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strformat&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmodDebugLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compileTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compileTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amd64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodDll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fmt&amp;quot;fmod{L}64.dll&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i386&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodDll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fmt&amp;quot;fmod{L}.dll&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macosx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodDll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fmt&amp;quot;libfmod{L}.dylib&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodDll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;fmt&amp;quot;libfmod{L}.so&amp;quot;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pragma&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmodImport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodDll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fixing-conversion-errors-----part-2&quot;&gt;Fixing conversion errors — Part 2&lt;/h2&gt;

&lt;p&gt;So far so good, now we can compile the wrapper, we can load the shared library
and access its exported functions from Nim, but there’s still one critical
adjustment that needs to be made, otherwise we’d get failures at runtime.
Apart from that, some useful constant and helper function definitions got lost
in the conversion process, so we’ll need to add them in manually as well.&lt;/p&gt;

&lt;p&gt;These problems are usually only spotted when one tries to actually use the
generated wrapper, so it’s recommended to always give the wrappers some testing
before releasing them to the public and don’t just assume that &lt;code&gt;c2nim&lt;/code&gt; did the
right thing.&lt;/p&gt;

&lt;h3 id=&quot;fmod-callbacks-and-function-pointers&quot;&gt;FMOD callbacks and function pointers&lt;/h3&gt;

&lt;p&gt;FMOD makes an extensive use of user-defined callback functions in its
low-level API. Now, as we’ll implement these callbacks in Nim, we need
to tell the compiler to use C calling conventions for them, otherwise we’d get
random crashes at runtime&lt;sup id=&quot;fnref:nimproc&quot;&gt;&lt;a href=&quot;#fn:nimproc&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;This is how a such callback definition looks like as output by &lt;code&gt;c2nim&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;n&quot;&gt;FMOD_SOUND_PCMREAD_CALLBACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;datalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cuint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All we need to do is add the &lt;code&gt;cdecl&lt;/code&gt; pragma to all &lt;code&gt;FMOD_*_CALLBACK&lt;/code&gt; type
definitions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;n&quot;&gt;FMOD_SOUND_PCMREAD_CALLBACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;datalen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cuint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;FMOD also exposes a large number of its internal C functions through structs
containing function pointers (all &lt;code&gt;FMOD_*_FUNC&lt;/code&gt; type definitions); we’ll need
to mark these as C functions as well:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;n&quot;&gt;FMOD_DSP_GETUSERDATA_FUNC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dsp_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_DSP_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                                   &lt;span class=&quot;n&quot;&gt;userdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;note&quot;&gt;I just realised at the end that if you supply the &lt;code&gt;--cdecl&lt;/code&gt; option to &lt;code&gt;c2nim&lt;/code&gt;,
it will correctly annotate all function and function pointer declarations with
the &lt;code&gt;cdecl&lt;/code&gt; pragma—certainly much more convenient than having to do it
manually!&lt;/p&gt;

&lt;p class=&quot;warning&quot;&gt;FMOD creates its own threads (at least by default), so these callbacks will be
most likely invoked from different threads which would wreak havoc on the Nim
garbage collector (meaning we’ll get random crashes). The solution is to
compile with thread local storage emulation turned off (&lt;code&gt;-d:tlsEmulation=off&lt;/code&gt;)
and invoke &lt;code&gt;system.setupForeignThreadGc()&lt;/code&gt; at the start of every callback proc.
For further details see the &lt;a href=&quot;https://nim-lang.org/docs/backends.html#memory-management-thread-coordination&quot;&gt;Nim Backend Integration Manual&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;missing-constants&quot;&gt;Missing constants&lt;/h3&gt;

&lt;p&gt;It becomes quickly apparent during actual usage that lots of the &lt;code&gt;FMOD_*&lt;/code&gt;
constants defined as &lt;code&gt;#define&lt;/code&gt; macros in the C headers are missing from our
wrapper. We can instruct &lt;code&gt;gcc&lt;/code&gt; to include all macro definitions in the
preprocessed output, but this will include &lt;em&gt;every&lt;/em&gt; single &lt;code&gt;#define&lt;/code&gt; macro,
including the internal ones used by the compiler, so it’s best to narrow the
results down the ones we’re actually interested in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -E -dD fmod.h | grep &quot;#define FMOD_&quot; &amp;gt; fmod_constants.h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it’s just a matter of simply converting them to Nim constants.
The reverb presets deserve a special mention:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define FMOD_PRESET_OFF { 1000, 7, 11, 5000, 100, 100, 100, 250, 0, 20, 96, -80.0f }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Observer how nicer these look in Nim :)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FMOD_PRESET_OFF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_REVERB_PROPERTIES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decayTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;earlyDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lateDelay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hfReference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hfDecayRatio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;diffusion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;density&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lowShelfFrequency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lowShelfGain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;highCut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;earlyLateMix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wetLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;error-handling-helpers&quot;&gt;Error handling helpers&lt;/h3&gt;

&lt;p&gt;Another thing that’s missing is the &lt;code&gt;FMOD_ErrorString&lt;/code&gt; helper function from
&lt;code&gt;fmod_error.h&lt;/code&gt; to convert FMOD error codes into human readable messages. It’s
trivial to convert the function, we’re just mentioning it here for
completeness.&lt;/p&gt;

&lt;h2 id=&quot;improving-the-wrapper&quot;&gt;Improving the wrapper&lt;/h2&gt;

&lt;p&gt;Now that the wrapper is fully functional, we’ll make a little adjustment to
make it more Nim-like. Recall how a typical FMOD function looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FMOD_System_PlaySound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channelgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELGROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmodImport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the de-facto standard “object-oriented C” style, where the functions
are prefixed with the classname (&lt;code&gt;FMOD_System&lt;/code&gt; in this case) and the first
argument is the &lt;code&gt;this&lt;/code&gt; instance pointer. We can remove the prefix to make the
API more Nim like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SYSTEM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_SOUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channelgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNELGROUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paused&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_CHANNEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_RESULT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmodImport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After performing the above adjustment on all functions (with the help of some
Vim macro magic), we can take advantage of Nim’s &lt;a href=&quot;https://nim-lang.org/docs/manual.html#procedures-method-call-syntax&quot;&gt;method call
syntax&lt;/a&gt;
and &lt;a href=&quot;https://nim-lang.org/docs/manual.html#lexical-analysis-identifier-equality&quot;&gt;identifier equality
rules&lt;/a&gt;
to use the API in an object-oriented style (error checking is omitted for
brevity):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodResult&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodSystem&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodSound&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FmodChannel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;discard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;discard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_INIT_NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;discard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;media/jaguar.wav&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FMOD_DEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;discard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it folks! It might seem a bit complicated first, but it’s a pretty
quick process once you are aware of all the gotchas.&lt;/p&gt;

&lt;p&gt;The biggest drawback of this approach, though, is its very manual nature.
Every time the API changes, the conversion process must be repeated which is
time consuming and error prone. There exists a helper tool called
&lt;a href=&quot;https://github.com/genotrance/nimgen&quot;&gt;nimgen&lt;/a&gt; that aims to automate this
process, so if I was to do this again, I would certainly give that tool a go.
Still, doing it fully manually at least once is a valuable learning experience
to understand what should actually be automated.&lt;/p&gt;

&lt;p&gt;The finished version of the &lt;code&gt;nim-fmod&lt;/code&gt; wrapper is available on
&lt;a href=&quot;https://github.com/johnnovak/nim-fmod&quot;&gt;GitHub&lt;/a&gt; with some examples included
and as a &lt;a href=&quot;https://github.com/nim-lang/nimble&quot;&gt;Nimble&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;Happy Nimming! :)&lt;/p&gt;

&lt;hr class=&quot;noline&quot; /&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;further-links-of-interest&quot;&gt;Further links of interest&lt;/h2&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;https://fmod.com/&quot;&gt;FMOD Homepage&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://fmod.com/resources/documentation-api?page=content/generated/common/lowlevel_introduction.html&quot;&gt;FMOD Low Level API — An Overview&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://fmod.com/resources/documentation-api?page=content/generated/lowlevel_api.html#/&quot;&gt;FMOD Low Level API Reference&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/johnnovak/nim-fmod&quot;&gt;nim-fmod GitHub repository&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/nim-lang/c2nim&quot;&gt;c2nim GitHub repository&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://github.com/nim-lang/c2nim/blob/master/doc/c2nim.rst&quot;&gt;c2nim User’s Manual&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://nim-lang.org/docs/manual.html#foreign-function-interface&quot;&gt;Nim Manual — Foreign function interface&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://nim-lang.org/docs/backends.html#memory-management-thread-coordination&quot;&gt;Nim Backend Integration Manual&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/section&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:javascript&quot;&gt;
      &lt;p&gt;Of course, this is not true in case of the experimental JavaScript backend. &lt;a href=&quot;#fnref:javascript&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:nimproc&quot;&gt;
      &lt;p&gt;One way to spot Nim proc pointers is that they occupy twice as much memory than C function pointers. So on 64-bit while a C function pointer is 8-bytes, a Nim proc pointer is 16-bytes (as of Nim 0.18.0). One beneficial side-effect of this is that all C structs containing function pointers will end up being the wrong size if the &lt;code&gt;cdecl&lt;/code&gt; pragma is not added to the callback definitions, and because FMOD is strict about checking struct sizes passed in to its functions, we’d get struct size mismatch errors from FMOD instead of just crashing. In fact, this is how I spotted this problem in the first place. &lt;a href=&quot;#fnref:nimproc&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Sat, 07 Jul 2018 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2018/07/07/creating-a-nim-wrapper-for-the-fmod/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2018/07/07/creating-a-nim-wrapper-for-the-fmod/</guid>
            </item>
        
            <item>
                <title>Ao Resists the Forces of Darkness (pbrt meets Nim)</title>
                <description>&lt;p&gt;I started reading the awesome &lt;a href=&quot;http://www.pbrt.org/&quot;&gt;Physically Based Rendering: From Theory to
Implementation&lt;/a&gt; book a few weeks ago, which made me
realise that it’s probably for the best if I rewrote &lt;a href=&quot;/tag/ray%20tracing&quot;&gt;my ray tracer&lt;/a&gt; from the
ground up based on the ideas presented in the book. After all, good coders
borrow, great coders steal, and at the very least we can say that I’m
proficient at stealing—the rest will hopefully follow!&lt;/p&gt;

&lt;p&gt;I also got a bit tired with the long titles of my previous &lt;a href=&quot;/tag/ray tracing&quot;&gt;ray tracing
related posts&lt;/a&gt;, so from now on I will call the project just
&lt;strong&gt;Ao&lt;/strong&gt;. Why on Earth &lt;em&gt;that&lt;/em&gt; particular name? Well, first I wanted to use the
name &lt;strong&gt;Ra&lt;/strong&gt; after the &lt;a href=&quot;https://en.wikipedia.org/wiki/Ra&quot;&gt;ancient Egyptian sun
god&lt;/a&gt;, but it looks like some French guy &lt;a href=&quot;http://cheesechess.free.fr/ra/imgbillard.html&quot;&gt;had
already beaten me to it&lt;/a&gt;.
I liked the idea of using the name of some &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_solar_deities&quot;&gt;ancient solar
deity&lt;/a&gt; (it looks like I’m
&lt;a href=&quot;https://github.com/iat-cener/tonatiuh&quot;&gt;not alone&lt;/a&gt; with this), but then
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sol_(mythology)&quot;&gt;Sol&lt;/a&gt; was &lt;a href=&quot;https://www.nrel.gov/csp/soltrace.html&quot;&gt;kind of
taken&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Huitzilopochtli&quot;&gt;Huitzilopochtli&lt;/a&gt; doesn’t quite
roll off the tongue either… So in the end, I chose &lt;strong&gt;Ao&lt;/strong&gt;, which I think is
quite cool and could also stand for &lt;a href=&quot;https://en.wikipedia.org/wiki/Ambient_occlusion&quot;&gt;ambient
occlusion&lt;/a&gt; as well. Moreover,
I live in Australia, so that’s another good reason for choosing a Polynesian
god in this geographical vicinity.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“In the Polynesian mythology of the Maori, Ao (“daylight”) is one of the
primal deities who are the unborn forces of nature. Ao is the
personification of light and the ordinary world, as opposed to darkness and
the underworld. He is spoken of under many forms or manifestations,
including Aoturoa, “enduring day, this world,” Aomarama, “bright day, world
of light and life”. With his companions, Ata, “morning,” and Whaitua,
“space,” Ao resists the forces of darkness.”
&lt;a href=&quot;http://everythingunderthemoon.net/forum/comprehensive-list-gods-goddesses-worldwide-t20390.html&quot;&gt;(source)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;ominous sound effects&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;heightened-dramatic-tension&quot;&gt;From henceforth, Ao shall resist the Forces of Darkness!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lt;/ominous sound effects&amp;gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Okay, now that we got that out of the way, here’s some words about my
experience with the book so far. The general idea is that I will read the book
from start to end and (re)implement everything in Nim as I go. I am not going
to follow it to the letter though; sometime I might use a different
convention, approach or algorithm either for performance reasons or simply due
to personal preference.&lt;/p&gt;

&lt;h2 id=&quot;notes-on-the-book&quot;&gt;Notes on the book&lt;/h2&gt;

&lt;p&gt;I have only read the first two chapters so far, but I can already say that
I am extremely impressed by the book; it’s a work of art and very obviously
a labour of love. The topics are well presented, the explanatory texts are
very well written in a somewhat terse but interesting style, and the authors
generally do a good to excellent job at explaining the theory behind the
algorithms.  I say generally because a few times I found myself wanting to do
further research on a given proof, but this is probably more due to me not
exactly being a math genius than the authors’ fault…&lt;/p&gt;

&lt;p&gt;For example, their less than one page derivation of the rotation transforms
wasn’t quite clear to me, so I went googling and finally found &lt;a href=&quot;http://gamma.cs.unc.edu/users/hoff/projects/comp236_ta/rotations/rotations.pdf&quot;&gt;this paper&lt;/a&gt;
that made everything crystal clear. But then, the book is already 1100+ pages
long and giving more detailed proofs could easily have doubled that I guess,
so I’m okay with having to do some extra reading from time to time. Doing your
own research helps internalising knowledge better anyway.&lt;/p&gt;

&lt;p&gt;One good source of computer graphics related information where the proofs are
explained in a bit more detail is
&lt;a href=&quot;http://www.scratchapixel.com/&quot;&gt;Scratchapixel&lt;/a&gt; which I wholeheartedly
recommend. For the math stuff I found a very good online resource, &lt;a href=&quot;http://tutorial.math.lamar.edu/download.aspx&quot;&gt;Paul’s
Online Math Notes&lt;/a&gt;, that seems
very promising (I just prefer reading to watching videos and he provides 
downloadable PDF versions of most of his materials).&lt;/p&gt;

&lt;h3 id=&quot;coordinate-system&quot;&gt;Coordinate system&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pbrt.org/&quot;&gt;pbrt&lt;/a&gt; uses a left-handed coordinate system, which is
the default coordinate system of
&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb324490(v=vs.85).aspx&quot;&gt;DirectX&lt;/a&gt;,
&lt;a href=&quot;http://www.povray.org/documentation/3.7.0/t2_2.html#t2_2_1_1&quot;&gt;POV-Ray&lt;/a&gt;,
&lt;a href=&quot;https://renderman.pixar.com/resources/RenderMan_20/interfaceIntro.html#coordinate-systems&quot;&gt;RenderMan&lt;/a&gt;
and
&lt;a href=&quot;http://answers.unity3d.com/questions/38924/unity-is-a-left-handed-coordinate-system-why.html&quot;&gt;Unity&lt;/a&gt;,
among many others.  Right-handed coordinate systems, on the other hand (no pun
intended), are the standard in mathematics, physics and engineering.
&lt;a href=&quot;https://learnopengl.com/#!Getting-started/Coordinate-Systems&quot;&gt;OpenGL&lt;/a&gt; also
uses a right-handed coordinate system by default (although that’s been the
source of a perpetual debate for quite some time now, just have a look
&lt;a href=&quot;https://stackoverflow.com/questions/5168163/is-the-opengl-coordinate-system-right-handed-or-left-handed&quot;&gt;here&lt;/a&gt;
or
&lt;a href=&quot;https://stackoverflow.com/questions/4124041/is-opengl-coordinate-system-left-handed-or-right-handed&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In practical terms, most graphics environments allow to switch their default
handedness (OpenGL and DirectX certainly do), but as in the world of science
right-handed is the standard and I’m also interested in OpenGL programming
(plus I have zero interest in DirectX), I am just going to stick with
right-handed.  One consequence of this is that occasionally I’ll have to work
a bit harder to correctly implement the algorithms presented in the book.
Well, if nothing else, this will require me to have a really solid
understanding of what I’m doing!&lt;/p&gt;

&lt;h3 id=&quot;vectors-normals-points&quot;&gt;Vectors, Normals, Points&lt;/h3&gt;

&lt;p&gt;The book introduces separate vector, normal and point templates, which contain
an awful lot of code duplication, and in my opinion just complicate things for
little gain. Overall, I don’t think the better type safety is worth the added
code complexity and the potential performance penalty (because you’d need to
convert data back and forth between different types a lot). Because of this,
many systems just don’t bother with making these distinctions
(&lt;a href=&quot;https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Vector_constructors&quot;&gt;GLSL&lt;/a&gt;
and &lt;a href=&quot;http://www.openexr.com/&quot;&gt;OpenEXR&lt;/a&gt; spring to mind) and just define
a single universal vector type instead to keep things simple.  Then it’s up to
the actual code to interpret the data in the right context.  That’s what I’m
doing here too; all vectors, normals and points are represented by a single
vector type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Vec2f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FloatT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec2i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FloatT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;matrix-inverse&quot;&gt;Matrix inverse&lt;/h3&gt;

&lt;p&gt;I have introduced a special fast version of the 4x4 matrix inverse operation
called &lt;code&gt;rigidInverse&lt;/code&gt; that can be used to quickly invert affine transforms
that don’t have a scaling component. The optimised version only costs 24 FLOPs
instead of the 152 FLOPs of the general version (6.3x speedup!). I was able to make good use
of this in the &lt;code&gt;lookAt&lt;/code&gt; procedure for some internal calculations.&lt;/p&gt;

&lt;h3 id=&quot;ray-box-intersection-tests&quot;&gt;Ray-box intersection tests&lt;/h3&gt;

&lt;p&gt;The book presents a mostly straightforward implementation of the &lt;a href=&quot;http://www.siggraph.org/education/materials/HyperGraph/raytrace/rtinter3.htm&quot;&gt;slab
method&lt;/a&gt;
invented by Kay and Kayjia for calculating ray-box intersections (where by box
we mean axis-aligned bounding boxes, or AABBs). The problem with their
algorithm is that it contains a lot of conditional statements which hurt
performance.  AABB tests must be as fast as possible because a large
percentage of the total run time of the renderer will be spent performing
these intersection tests. Luckily, there’s an optimised &lt;a href=&quot;https://tavianator.com/fast-branchless-raybounding-box-intersections-part-2-nans/&quot;&gt;branchless
version&lt;/a&gt;
out there which I ended up adopting. This version reports false hits
for degenerate cases where any of the ray origin’s coordinates lay exactly on
the slab boundaries, but this is negligible if the actual ray-object
intersection routines are correct, and well worth the added 15-20%
performance boost compared to the 100% correct version.&lt;/p&gt;

&lt;h2 id=&quot;notes-on-nim&quot;&gt;Notes on Nim&lt;/h2&gt;

&lt;p&gt;The best way to learn the intricacies of any programming language is to write
some non-trivial piece of software in it, and pbrt certainly falls into this
category. Implementing the code from the first two chapters in Nim has taught
me several useful lessons which I am going to summarise below.&lt;/p&gt;

&lt;h3 id=&quot;project-structure&quot;&gt;Project structure&lt;/h3&gt;

&lt;p&gt;Nim doesn’t have the concept of access modifiers and packages like Java and
Scala, or namespaces like C++. The only available organisational unit is the
module that can export some of its symbols, otherwise they are private and
unaccessible to the outside world. One file can contain only one module, the
filename minus the extension being the name of the module (although a module
can be split up into several files with the use of &lt;code&gt;include&lt;/code&gt;). All module
names have to be unique within the same compilation unit.&lt;/p&gt;

&lt;p&gt;After much contemplation and experimentation I came up with the following
project structure that mirrors that of pbrt. For brevity, only two main
modules are presented here, &lt;code&gt;core&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;src/
  core/
    common.nim
    geometry.nim
    shape.nim
    types.nim
  filters/
    box.nim
    gaussian.nim
    types.nim
  main.nim

test/
  core/
    allCoreTests.nim
    commonTests.nim
    geometryTests.nim
    shapeTests.nim
  filters/
    boxTests.nim
    gaussianTests.nim
  allTests.nim

nim.cfg
README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned above, module names must be unique per compilation unit; that’s
the reason why I had to call the unit test modules &lt;code&gt;&amp;lt;modulename&amp;gt;Test&lt;/code&gt;,
otherwise I wouldn’t be able to import &lt;code&gt;&amp;lt;modulename&amp;gt;&lt;/code&gt; into them. This also
means that public submodules that are imported by other modules must have
unique names, for example &lt;code&gt;core/common&lt;/code&gt; and &lt;code&gt;filters/common&lt;/code&gt; could not be
imported by the &lt;code&gt;main&lt;/code&gt; module (remember, the filesystem path is &lt;em&gt;not&lt;/em&gt; part of
the module name, just the filename).&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nim.cfg&lt;/code&gt; contains the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;path=&quot;src/core&quot;
path=&quot;src/filters&quot;
# add a new entry for every module
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way we can conveniently just import submodules by the name of the
submodule, as they are all unique. This is much cleaner and easier to
maintain than using relative paths, especially in the unit tests. For
instance:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import geometry     # imports src/core/geometry.nim
import gaussian     # imports src/filters/gaussian.nim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;types.nim&lt;/code&gt; file inside each main module is a special thing that I am
going to explain &lt;a href=&quot;#managing-circular-dependencies&quot;&gt;a bit later&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;inlining&quot;&gt;Inlining&lt;/h3&gt;

&lt;p&gt;The Nim compiler doesn’t do automatic inlining of small functions across
module boundaries; it is the programmer’s responsibility to annotate such
functions with the &lt;code&gt;{.inline.}&lt;/code&gt; pragma like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vec3f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FloatT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasNaNs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a small thing, but forgetting about it can result in &lt;a href=&quot;/2017/04/22/nim-performance-tuning-for-the-uninitiated/#nim-----vector-module&quot;&gt;severe
performance
penalties&lt;/a&gt;
in numerical code that needs to be as fast as possible.&lt;/p&gt;

&lt;h3 id=&quot;calling-parent-methods&quot;&gt;Calling parent methods&lt;/h3&gt;

&lt;p&gt;Nim doesn’t have a convenient &lt;code&gt;super()&lt;/code&gt; pseudo-method that would allow the
calling of parent methods in a straightforward manner. This left me scratching
my head for a while until I found the answer in the &lt;a href=&quot;https://forum.nim-lang.org/&quot;&gt;Nim
forums&lt;/a&gt;. There are two problems here that require
slightly different solutions, namely &lt;strong&gt;calling parent constructors&lt;/strong&gt;
and &lt;strong&gt;calling ordinary parent methods&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;calling-parent-constructors&quot;&gt;Calling parent constructors&lt;/h4&gt;

&lt;p&gt;Constructor chaining is most easily accomplished by introducing internal
&lt;code&gt;init&lt;/code&gt; helper procedures for every subclass which then can be called with the
subclass type converted to the parent class type. It’s much easier to
understand this by looking at a concrete example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootObj&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# this is the trick, call init on a Shape&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;initCircle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initCircle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Prints: (radius: 10.2, x: 5.0, y: 8.0, visible: true)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The trick is happening in the &lt;code&gt;init&lt;/code&gt; procedure of &lt;code&gt;Circle&lt;/code&gt;, where we first
convert the &lt;code&gt;Circle&lt;/code&gt; to a &lt;code&gt;Shape&lt;/code&gt; and run the parent &lt;code&gt;init&lt;/code&gt; procedure on it.&lt;/p&gt;

&lt;h4 id=&quot;calling-ordinary-parent-methods&quot;&gt;Calling ordinary parent methods&lt;/h4&gt;

&lt;p&gt;For ordinary methods, using
&lt;a href=&quot;https://nim-lang.org/docs/system.html#procCall,untyped&quot;&gt;&lt;code&gt;procCall&lt;/code&gt;&lt;/a&gt; that
disables dynamic binding for a given call is the solution:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Shape.draw enter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Shape.draw exit&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Circle.draw enter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;procCall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# or Shape(self).draw&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Circle.draw exit&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Prints:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Circle.draw enter&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Shape.draw enter&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Shape.draw exit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Circle.draw exit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;managing-circular-dependencies&quot;&gt;Managing circular dependencies&lt;/h3&gt;

&lt;p&gt;Nim allows recursive module dependencies, as described &lt;a href=&quot;https://nim-lang.org/docs/manual.html#modules&quot;&gt;in the
manual&lt;/a&gt;. They are a bit tricky
to work with in more complex scenarios, and different techniques are involved
when dealing with &lt;strong&gt;circular procedure calls&lt;/strong&gt; versus &lt;strong&gt;circular type
dependencies&lt;/strong&gt;.  (Perhaps there are even more cases when dealing with more
complex language features like macros, but I haven’t got so far yet with my
use of Nim.)&lt;/p&gt;

&lt;h4 id=&quot;circular-procedure-calls&quot;&gt;Circular procedure calls&lt;/h4&gt;

&lt;p&gt;Not sure if this is the proper name for this pattern, but the example below
should make it clear what I’m referring to. Let’s try to define two functions
in two separate modules that call each other co-routine style (blowing up the
stack, eventually). It turns out that we need to use forward proc declarations
to be able to accomplish this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;c&quot;&gt;# bar.nim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;barProc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# (1) forward declaration (there&amp;#39;s no proc body)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# (2) stop parsing bar.nim &amp;amp; continue with foo.nim&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;barProc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# (5) parsing foo.nim completed, continue from here&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fooProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMainModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;barProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;c&quot;&gt;# foo.nim&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# (3) only the already known symbols in bar.nim are imported,&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;#     which is only the forward declaration of barProc&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fooProc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;barProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# (4) this works because of the forward declaration&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running the code with &lt;code&gt;nim c -r bar&lt;/code&gt; will print out &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;foo&lt;/code&gt; on
alternating lines until we hit a stack overflow. If we wanted to be able to
compile &lt;code&gt;foo.nim&lt;/code&gt; separately as well, we’d need to put a forward declaration
at the top of the &lt;code&gt;foo&lt;/code&gt; module too (should be obvious why after following the
path of execution in the above listings):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fooProc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fooProc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;barProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;circular-type-dependencies&quot;&gt;Circular type dependencies&lt;/h4&gt;

&lt;p&gt;Nim only allows the forward declaration of procedures; for types, we’ll need
a different approach. Moreover, there’s a further limitation that &lt;a href=&quot;https://nim-lang.org/docs/tut2.html#object-oriented-programming-mutually-recursive-types&quot;&gt;mutually
recursive
types&lt;/a&gt;
need to be declared within a single type section (this is so to keep
compilation times low).&lt;/p&gt;

&lt;p&gt;Sufficiently complex applications usually have quite complex type graphs where
certain types reference each other. Initially, I had a number of “submodules”
inside my &lt;code&gt;core&lt;/code&gt; module, each of them defining a number of types.  Many of
these types have references to types defined in other submodules. Attempting
to tackle these type dependencies on a case by case basis is just a lot of
extra mental overhead and boring work, so the generic solution I ended up with
was moving all my top-level types into a new &lt;code&gt;core/types.nim&lt;/code&gt; submodule (using
the &lt;code&gt;core&lt;/code&gt; module as an example) which would then be imported by all &lt;code&gt;core&lt;/code&gt;
submodules. All the types in &lt;code&gt;core/types.nim&lt;/code&gt; are defined in a single type
section—this way I don’t even need to think about circular type
dependencies anymore.&lt;/p&gt;

&lt;p&gt;As a concrete example, &lt;code&gt;core/geometry.nim&lt;/code&gt; would start like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec2i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3i&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Box2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Box2i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Box3f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Box3i&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ray&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RayDifferential&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;export&lt;/code&gt; statements ensure that the public types of this submodule will be
available to the importing module. Private types that are used only internally
between the submodules simply don’t get exported anywhere.&lt;/p&gt;

&lt;p&gt;First I was averse to the idea of moving all the types into a single file,
away from the actual method implementations, but then I grew to like it. It’s
not a bad thing to see all types from all submodules in one place, especially
when there are lots of complex interdependencies between them. As an
interesting note, Haskell, F# and OCaml have the same limitation regarding
circular type dependencies.&lt;/p&gt;

&lt;p&gt;One drawback with this approach is that all properties defined in &lt;code&gt;types.nim&lt;/code&gt;
must be public (exported with &lt;code&gt;*&lt;/code&gt;), otherwise the submodules themselves
wouldn’t be able to access them. This breaks encapsulation and can be
a problem for bigger projects with many developers working on the
code. In reality, I don’t think this is a big deal though for people who
know what they are doing. Even the original pbrt authors made a good point
about exposing the internal data structures of most of their objects; doing
“proper encapsulation” by the book would just add lots of extra cruft that is
kind of unnecessary for small to medium sized projects developed by a single
person or a handful of people.&lt;sup id=&quot;fnref:small&quot;&gt;&lt;a href=&quot;#fn:small&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So long for today folks, hope you have enjoyed today’s session. You can check
out the current state of Ao in the &lt;a href=&quot;https://github.com/johnnovak/ao&quot;&gt;GitHub
repository&lt;/a&gt;. The takeaway message is that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nim is great; if you’re interested in a cute language with C-like performance
characteristics that is a joy to use, you should definitely check it out, and&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pbrt is not just one of the best books on computer graphics that I ever
had the pleasure of reading, but also one of the best technical books
overall!  If you are interested in computer graphics and don’t have
it yet, it deserves a place on your bookshelf! It’s a steal for the asking
price.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr class=&quot;noline&quot; /&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;further-links-of-interest&quot;&gt;Further links of interest&lt;/h2&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.pbrt.org/&quot;&gt;pbrt&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.scratchapixel.com/&quot;&gt;Scratchapixel&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://gamma.cs.unc.edu/users/hoff/projects/comp236_ta/rotations/rotations.pdf&quot;&gt;Kenneth E. Hoff III – Deriving 2D and 3D Rotations&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://tutorial.math.lamar.edu/download.aspx&quot;&gt;Paul’s Online Math Notes&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;/section&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:small&quot;&gt;
      &lt;p&gt;My personal opinion is that it is actually a good thing that Nim has not been designed for assembly-line style large-scale software development… just look at the macro system and imagine how much havoc a 30+ person VB.NET team could wreak even just by looking at it! &lt;a href=&quot;#fnref:small&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Sun, 18 Jun 2017 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2017/06/18/ao-the-beginning/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2017/06/18/ao-the-beginning/</guid>
            </item>
        
            <item>
                <title>Nim performance tuning for the uninitiated</title>
                <description>&lt;p class=&quot;intro&quot;&gt;UPDATE 2017-06-04: Corrected some slight misinformation regarding
link time optimisations and the {.inline.} pragma, some stylistic
improvements, added more references.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This post documents the trials and tribulations I encountered during my foray
into the wonderful world of low-level performance optimisation. For those
intimately familiar with modern optimising compilers and CPU architectures,
this will be kindergarten stuff. Although I have done my share of low-level
C and assembly coding in my high-spirited teenager years, that was more than
20 years ago on a then-state-of-the-art 486 DX-2/66, so naturally it didn’t
prevent me from running into some quite embarrassing mistakes as things are
vastly different today, as we’ll shortly see…&lt;/p&gt;

&lt;p&gt;Some of you might know that I’m writing a &lt;a href=&quot;/tag/ray%20tracing/&quot;&gt;ray tracer&lt;/a&gt;
(veeeeeery slowly), so it’s no surprise that I’m quite a bit obsessed with raw
numerical performance. Don’t bother with what people tell you about Moore’s
Law, falling GFLOP prices, programmer productivity and the “evils” of
optimisation—anybody who writes or uses ray-tracing software can tell you
that &lt;em&gt;nothing&lt;/em&gt; is ever fast enough for this task (we’ll come back to this at
the end in more detail). The de facto language choice for writing such
high-performance applications has always been C++, potentially with some
assembly thrown in for good measure. One of the main reasons why I have chosen
Nim for this project was that it promises C-level performance without having
to resort to any weird tricks (and, of course, it prevents me from having to
use C++). I have a very annoying habit that I don’t just believe other
people’s statements unless I can verify them myself, so I thought it was high
time to put Nim’s efficiency claims to test… which, as we’ll see, led me
into some trouble.&lt;/p&gt;

&lt;h2 id=&quot;first-attempts&quot;&gt;First attempts&lt;/h2&gt;

&lt;p&gt;The whole performance test idea came up when I was implementing the
ray-triangle intersection routine in my ray tracer. My plan was simple:
implement the same algorithm in C++ and Nim and measure if there’s any
performance penalty for using Nim. Theoretically, there would be very little
to no difference in runtime speed as Nim code gets transformed to plain
C first, which then gets run through the same optimising C++ compiler.  I was
a bit unsure though if Nim objects would map directly to C structs and what
magnitude of performance degradation (if any) would the GC introduce.&lt;/p&gt;

&lt;p&gt;As my first slightly misguided attempt I tried to execute the intersection
routine with the same static input a few million times, then calculate an
average intersections per second figure from that. To my greatest shock, the
C++ version measured to be about 40-50 times faster!&lt;/p&gt;

&lt;p&gt;Now, there were a couple of serious problems with this naive approach.
Firstly, I used a simple direct implementation of the &lt;a href=&quot;https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm&quot;&gt;Möller–Trumbore
intersection
algorithm&lt;/a&gt;.
Notice that the algorithm can terminate early in multiple places? Therefore,
it would make much more sense to test with a dataset large and varied enough
so that the different execution paths would be exercised with roughly the same
probability, allowing for a meaningful average to be calculated for the whole
algorithm. Secondly—and this is the worse problem!—by using static data
defined at the time of compilation, we’re giving the compiler a free license
to optimise the whole code away and just replace it with a constant! This
might come as a surprise to some—and it certainly &lt;em&gt;did&lt;/em&gt; surprise me!—but
it turns out that modern optimising compilers like &lt;strong&gt;gcc&lt;/strong&gt; and &lt;strong&gt;clang&lt;/strong&gt; are
&lt;em&gt;really&lt;/em&gt; good at &lt;a href=&quot;https://en.wikipedia.org/wiki/Constant_folding&quot;&gt;constant
folding&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;So why don’t we just turn the compiler optimisations off for the tests then?
Well, that would defeat the whole purpose of the performance measurements, so
that’s out of the question. We must always use the optimised release builds
for such tests.  But then how can we ever be certain that the compiler hasn’t
pulled some tricks behind our backs, rendering the whole test scenario
invalid?  Well, the only way to do that reliably is to inspect the final
output produced by the compiler, namely the resulting binary. Luckily, we
don’t have to do exactly that, as there’s a second-best (and much more
convenient) option: most compilers can be instructed to emit the
post-optimisation stage assembly sources that are used for generating the
final binary.&lt;/p&gt;

&lt;p&gt;While this might sound a little intimidating for non-assembly programmers
(which is probably at least 99.9999% of all programmers in the world today), in
practice we don’t need to be expert assembly coders to assert whether the
compiler has done what we wanted. Moreover, this is definitely a useful skill
to have because sometimes we can “nudge” the compiler into the right direction
to come up with more efficient assembly-level structures by re-arranging the
high-level code a bit and maybe adding a few inlining hints here and there.
Again, the only foolproof way to see if such tricks have really worked is to
inspect the assembly output.&lt;/p&gt;

&lt;h2 id=&quot;test-setup&quot;&gt;Test setup&lt;/h2&gt;

&lt;p&gt;The two most obvious solutions to prevent constant folding is to either load
the test data from a file or to generate it at runtime. I chose the latter
because I’d have to write the test data generation code anyway, so why not do
it at runtime then.&lt;/p&gt;

&lt;p&gt;The tests execute the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Precalculate &lt;em&gt;T&lt;/em&gt; number of random triangles so that all points of 
the triangles lie on the surface of the unit sphere.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Precalculate &lt;em&gt;R&lt;/em&gt; number of random rays so that each ray goes through two
points randomly selected on the surface of the unit sphere.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Intersect each ray with the whole set of triangles, so there will be &lt;em&gt;R&lt;/em&gt;
✕ &lt;em&gt;T&lt;/em&gt; intersection tests in total.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only tricky thing is to make sure that the random points we pick on the
sphere are uniformly distributed. A straightforward solution to this problem
can be found &lt;a href=&quot;https://math.stackexchange.com/a/1586185&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All tests were performed on a MacBook Pro (Mid 2014), 2.2 GHz Intel Core i7,
16 GB RAM running OS X El Capitan 10.11.6.&lt;/p&gt;

&lt;h2 id=&quot;round-1-----nim-vs-c&quot;&gt;Round 1 — Nim vs C++&lt;/h2&gt;

&lt;h3 id=&quot;c&quot;&gt;0. C++&lt;/h3&gt;

&lt;p&gt;The “gold standard” for our daring enterprise will be the performance of the
single-threaded &lt;a href=&quot;https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b&quot;&gt;orthodox
C++&lt;/a&gt; implementation.
You can check out the source code
&lt;a href=&quot;https://github.com/johnnovak/raytriangle-test/blob/master/cpp/perftest.cpp&quot;&gt;here&lt;/a&gt;.
As we can see in the results below, our testing method gives us a roughly 5%
hit rate. The exact hit rate does not actually matter as long as it’s not too
close to zero and if it hovers around the same value in all tests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total intersection tests:  100,000,000
  Hits:                      4,994,583 ( 4.99%)
  Misses:                   95,005,417 (95.01%)

Total time:                       1.93 seconds
Millions of tests per second:    51.87
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So ~51.9 millions of ray-triangle tests per second it is. I guess that’s not
too bad for a straightforward C implementation! It turns out that Nim can
easily match that, but you have to know exactly what you’re doing to get
there, as I’ll show below.&lt;/p&gt;

&lt;h4 id=&quot;memory-layout&quot;&gt;Memory layout&lt;/h4&gt;

&lt;p&gt;One very important thing to note is how the triangle data is laid out in
memory. For every single ray we’re going to mow through all the triangles in
a linear fashion, checking for intersections, so we must store the triangles
contiguously in a big chunk of memory to best utilise the CPU data caches.
This is straightforward to do in C:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allocTriangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numTriangles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numTriangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;inspecting-the-assembly-output&quot;&gt;Inspecting the assembly output&lt;/h4&gt;

&lt;p&gt;Before progressing any further, let’s take a quick look at a typical number
crunching function in assembly form! This is the command to compile the C++
source into the final executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang -std=c++11 -lm -O3 -o perftest perftest.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the command to emit the corresponding assembly output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clang -std=c++11 -S -O3 -o perftest.s perftest.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can do a full text search in the resulting &lt;code&gt;.s&lt;/code&gt; file for the function
we want to inspect (&lt;code&gt;rayTriangleIntersect&lt;/code&gt; in this case). As I said, we don’t
really need to understand assembly on a deep level for our purposes; it’s
enough to know that a healthy-looking number crunching function should
resemble something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;    &lt;span class=&quot;na&quot;&gt;.globl&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;__Z20rayTriangleIntersectP3RayP4Vec3S2_S2_&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;.align&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0x90&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;__Z20rayTriangleIntersectP3RayP4Vec3S2_S2_:&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# decorated function name&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;.cfi_startproc&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;# function starts here&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;pushq&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;# some init stuff&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Ltmp15:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;.cfi_def_cfa_offset&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Ltmp16:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;.cfi_offset&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;%rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;Ltmp17:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;.cfi_def_cfa_register&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;rbp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm14&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rsi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm15&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;...&lt;/span&gt;                       &lt;span class=&quot;c&quot;&gt;# omitted&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;mulss&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%xmm6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm11&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movaps&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;%xmm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mulss&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;subss&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%xmm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm11&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movaps&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;%xmm13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm4&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# actual function body&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mulss&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm4&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movaps&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;%xmm5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;mulss&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%xmm7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm2&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;addss&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;%xmm7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm2&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;...&lt;/span&gt;                       &lt;span class=&quot;c&quot;&gt;# omitted&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LBB5_9&lt;/span&gt;                &lt;span class=&quot;c&quot;&gt;# some cleanup stuff&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LBB5_2:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movss&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;LCPI5_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm6&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LBB5_9&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LBB5_4:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movss&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;LCPI5_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm6&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LBB5_9&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LBB5_6:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movss&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;LCPI5_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;%rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm6&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;LBB5_9:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;movaps&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;%xmm6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%xmm0&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;popq&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;%rbp&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;retq&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;.cfi_endproc&lt;/span&gt;              &lt;span class=&quot;c&quot;&gt;# the end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The init and cleanup stuff we’re not really interested about, but the fact
that they are there is actually a good sign; this means that the compiler has
not optimised away the whole function. The function body for numerical
calculations involving floating point numbers will be basically lots of
mucking around with the SSE registers&lt;sup id=&quot;fnref:sse&quot;&gt;&lt;a href=&quot;#fn:sse&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; (XMM1 to XMM15). For those who
have never seen assembly listings before, &lt;code&gt;movaps&lt;/code&gt; moves values between
registers, &lt;code&gt;mulss&lt;/code&gt; multiplies two registers, &lt;code&gt;addss&lt;/code&gt; adds them together and so
on. Even for a relatively short numerical function like ours, the function
body will go on for pages. This is good, this is what we wanted—it looks
like we have the real function here, not just some constant folded version of
it.&lt;/p&gt;

&lt;p&gt;For those wanting to delve further into the dark art of assembly programming,
make sure to check out the two excellent articles in the further reading
section at the end of the article.&lt;/p&gt;

&lt;h3 id=&quot;nim-----using-glm&quot;&gt;1. Nim — using GLM&lt;/h3&gt;

&lt;p&gt;I started out with &lt;a href=&quot;https://github.com/stavenko/nim-glm&quot;&gt;nim-glm&lt;/a&gt; in my ray
tracer, which is more or less a port of the
&lt;a href=&quot;https://github.com/g-truc/glm&quot;&gt;GLM&lt;/a&gt; OpenGL mathematics library.  The
&lt;a href=&quot;https://github.com/johnnovak/raytriangle-test/blob/master/nim/perftest1.nim&quot;&gt;original
version&lt;/a&gt;
of the code used nim-glm’s &lt;code&gt;Vec3[float32]&lt;/code&gt; type and its associated methods for
vector operations.&lt;/p&gt;

&lt;p&gt;To my greatest shock, the performance of my initial Nim code was quite
abysmal, barely 1-2 millions of tests per second! After much head scratching
and debugging it turned out that nim-glm was the culprit: the vector component
getter and setter methods were not inlined by the compiler. After a few
strategically placed &lt;a href=&quot;https://github.com/stavenko/nim-glm/commit/aebc0ee68f6d3ed5ccc4fcc89dd81716af708c6e&quot;&gt;inline
pragmas&lt;/a&gt;
the situation got somewhat better, but still a 10-fold performance degradation
compared to the C++ version:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total intersection tests:  100,000,000
  Hits:                      4,703,478 ( 4.70%)
  Misses:                   95,296,522 (95.30%)

Total time:                      19.86 seconds
Millions of tests per second:     5.04
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point I decided to give up on nim-glm altogether and write my own
vector routines. The thing is, nim-glm is a fine &lt;em&gt;general purpose&lt;/em&gt; vector
maths library, but when it’s time to get into serious performance optimisation
mode, you want complete control over the codebase, and using an external
component that heavily uses macros is just asking for trouble.&lt;/p&gt;

&lt;h3 id=&quot;nim-----custom-vector-class-object-refs&quot;&gt;2. Nim — custom vector class (object refs)&lt;/h3&gt;

&lt;p&gt;Okay, so using &lt;a href=&quot;https://github.com/johnnovak/raytriangle-test/blob/master/nim/perftest2.nim#L3-L32&quot;&gt;my own vector maths
code&lt;/a&gt;
resulted in some improvement, but not by much:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total intersection tests:  100,000,000
  Hits:                      5,718,606 ( 5.72%)
  Misses:                   94,281,394 (94.28%)

Total time:                      11.41 seconds
Millions of tests per second:     8.76
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What went wrong here? It turns out that for some reason I used object
references instead of plain objects for my &lt;code&gt;Vec3&lt;/code&gt; and &lt;code&gt;Ray&lt;/code&gt; types:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inspecting the corresponding C code in the &lt;code&gt;nimcache&lt;/code&gt; directory makes the
problem blatantly obvious (I cleaned up the generated symbol names for
clarity):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NF32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NF32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NF32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RayObjectType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// indirection!&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// indirection!&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeqVec3Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TGenericSeq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEQ_DECL_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// indirection! (array of pointers)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SeqVec3Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So instead of having a contiguous block of triangle data, we ended up with
a contiguous block of &lt;em&gt;pointers&lt;/em&gt; to each of the points making up the
triangles. This has disastrous performance implications: all the points are
randomly scattered around in memory so the cache utilisation will be really
terrible as it is evident from the results.&lt;/p&gt;

&lt;h3 id=&quot;nim-----custom-vector-class-objects&quot;&gt;3. Nim — custom vector class (objects)&lt;/h3&gt;

&lt;p&gt;Fortunately, &lt;a href=&quot;https://github.com/johnnovak/raytriangle-test/blob/master/nim/perftest3.nim#L3-L7&quot;&gt;the
fix&lt;/a&gt;
is very simple; we only need to remove the &lt;code&gt;ref&lt;/code&gt; keywords:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float32&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This will make the resulting type definitions be in line with our original C++
code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RayObjectType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SeqVec3Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;TGenericSeq&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Vec3ObjectType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEQ_DECL_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// array of structs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the moment of truth:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total intersection tests:  100,000,000
  Hits:                      5,206,370 ( 5.21%)
  Misses:                   94,793,630 (94.79%)

Total time:                       1.96 seconds
Millions of tests per second:    50.93
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Awww yeah! This is basically the same performance we had with the C++ version.
Comparing the assembly outputs of the Nim and C++ versions (exercise to the
reader) reveals that they are basically the same, which is no great surprise
as ultimately we’re using the same compiler to generate the binaries.&lt;/p&gt;

&lt;h3 id=&quot;nim-----vector-module&quot;&gt;4. Nim — vector module&lt;/h3&gt;

&lt;p&gt;Alright, so time to extract the vector maths stuff into its &lt;a href=&quot;https://github.com/johnnovak/raytriangle-test/blob/master/nim/vector.nim&quot;&gt;own
module&lt;/a&gt;.
Pretty trivial task, right? Let’s run the tests again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total intersection tests:  100,000,000
  Hits:                      5,237,698 ( 5.24%)
  Misses:                   94,762,302 (94.76%)

Total time:                       2.89 seconds
Millions of tests per second:    34.55
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shit, what went wrong here?&lt;/p&gt;

&lt;p&gt;To figure this out, we’ll need to understand how the Nim compiler works.
First Nim generates a single C file for every module in the project, then from
that point everything gets compiled and linked as if it were a regular
C codebase (which technically it is): C files get compiled into objects files
which then get linked together into the final binary. Inlining functions
across objects files at link time is generally not performed by default by
most compilers, and although gcc and clang can be instructed to do link time
optimisations (LTO) by specifying the &lt;code&gt;-flto&lt;/code&gt; flag, Nim doesn’t use this flag
by default. Therefore, if we want to inline functions across module boundaries
in a robust way—even when LTO is turned off—we need to explicitly tell the
Nim compiler about it with the &lt;code&gt;{.inline.}&lt;/code&gt; pragma. This pragma will force the
inlining of the functions decorated with it into all generated C files where
the functions are referenced on the Nim compiler (preprocessor) level.&lt;/p&gt;

&lt;h3 id=&quot;nim-----vector-module-with-inlines&quot;&gt;5. Nim — vector module (with inlines)&lt;/h3&gt;

&lt;p&gt;Fixing this is very easy; as explained above, we’ll just need to &lt;a href=&quot;https://github.com/johnnovak/raytriangle-test/blob/master/nim/vectorfast.nim&quot;&gt;decorate
every
method&lt;/a&gt;
in our module with &lt;code&gt;{.inline.}&lt;/code&gt; pragmas. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;proc &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;`-`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we’re done, the performance of version 3 has been restored:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Total intersection tests:  100,000,000
  Hits:                      4,640,926 ( 4.64%)
  Misses:                   95,359,074 (95.36%)

Total time:                       1.96 seconds
Millions of tests per second:    51.12
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;round-2-----nim-vs-java-javascript--python&quot;&gt;Round 2 — Nim vs Java, JavaScript &amp;amp; Python&lt;/h2&gt;

&lt;p&gt;At this point I was really curious how some other languages I use
regularly would stack up against our current benchmarks kings (look, there’s
even a crown in the &lt;a href=&quot;https://nim-lang.org/&quot;&gt;Nim logo&lt;/a&gt;, surely that can’t be
just a coincidence!). I didn’t try to do any nasty tricks to increase
performance in any of these tests (e.g. using simple arrays of primitives
instead of objects in Java); I just did a straightforward idiomatic port in
each case (you can check out the code &lt;a href=&quot;https://github.com/johnnovak/raytriangle-test&quot;&gt;here&lt;/a&gt;). Let’s see the final results:&lt;/p&gt;

&lt;figure style=&quot;width: 100%&quot;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Language&lt;/th&gt;
    &lt;th&gt;Version&lt;/th&gt;
    &lt;th style=&quot;text-align: center&quot;&gt;Mtests/s&lt;/th&gt;
    &lt;th style=&quot;text-align: center&quot;&gt;Rel. performance&lt;/th&gt;
    &lt;th style=&quot;text-align: center&quot;&gt;Total time (s)&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr style=&quot;font-weight: bold&quot;&gt;
    &lt;td&gt;C++&lt;/td&gt;
    &lt;td&gt;Apple LLVM 7.3.0&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;51.9&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;1.00x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;1.93&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr style=&quot;font-weight: bold&quot;&gt;
    &lt;td&gt;Nim&lt;/td&gt;
    &lt;td&gt;0.16.1&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;51.1&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.98x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;1.96&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Java&lt;/td&gt;
    &lt;td&gt;Oracle JVM 1.8.0_112-b16&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;31.3&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.60x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;3.20&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;JavaScript&lt;/td&gt;
    &lt;td&gt;NodeJS 4.4.7&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;29.2&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.56x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;3.43&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;PyPy&lt;/td&gt;
    &lt;td&gt;2.7.13&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;10.5&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.20x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;9.51&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;CPython2&lt;/td&gt;
    &lt;td&gt;2.7.13&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.20&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.004x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;508.68&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;CPython3&lt;/td&gt;
    &lt;td&gt;3.5.2&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.15&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.003x&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;673.66&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;figcaption&gt;Table 1 — Performance comparison of different language
implementations of the Möller–Trumbore intersection algorithm executing 100M
ray-triangle intersections.
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;p&gt;I was quite disappointed with the Java results at only 60% of the performance
of C++/Nim. JavaScript, on the other hand, did surprise me a lot; it’s
basically on par with the performance of Java. I expected much less numerical
performance from JavaScript! Taking into consideration that JavaScript has
only doubles while in Java I was able to switch to floats for a slight
performance bump makes this result even more impressive. Another surprise was
that running the tests as standalone programs with NodeJS or in a browser
(Chrome and Firefox was tested) yielded basically the same results. (Of
course, all this doesn’t make JavaScript suddenly a good language, but it’s
good to know that at least it’s not horribly slow!)&lt;/p&gt;

&lt;p&gt;The CPython figures are, however, rather pathetic. I like Python a lot, it’s
one of my favourite languages, but it’s clearly in no way suited to numerical
computing (note we’re talking about the core language here, not
&lt;a href=&quot;http://www.numpy.org/&quot;&gt;NumPy&lt;/a&gt; and such). Fortunately, PyPy brings the
performance back from absolutely abysmal (0.4% of the speed of the C code) to
quite reasonable for a dynamic interpreted language (20% of the C code).
That’s an impressive &lt;em&gt;~50x speedup (!)&lt;/em&gt; achieved by just switching from
CPython to PyPy!  Interestingly, CPython3 is about 30% slower than CPython2 in
these tests.  I don’t know if this a general trend with CPython3’s
performance, but it’s discouraging, to say the least…&lt;/p&gt;

&lt;h3 id=&quot;jit-warmup&quot;&gt;JIT warmup&lt;/h3&gt;

&lt;p&gt;There’s another thing to note that can confuse rookie benchmarkers and has
implications on runtime performance, namely that JIT compiled languages need
a “warm up” period before they can reach peak performance. In our current
benchmark, that’s Java, JavaScript and PyPy (CPython employs no JIT
whatsoever). While the performance of C++ and Nim scale linearly with the size
of the dataset, for JITed languages the performance is roughly a logarithmic
function of the dataset size, as summarised by the below table:&lt;/p&gt;

&lt;figure style=&quot;width: 75%; margin-left: auto; margin-right: auto;&quot;&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Language&lt;/th&gt;
    &lt;th style=&quot;text-align: right&quot;&gt;# of tests&lt;/th&gt;
    &lt;th style=&quot;text-align: right&quot;&gt;Mtests/s&lt;/th&gt;
    &lt;th style=&quot;text-align: center&quot;&gt;Rel. performance&lt;/th&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td rowspan=&quot;4&quot;&gt;Java&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;100K&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;11.1&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.21x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;1M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;25.7&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.49x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;10M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;37.4&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.72x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;100M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;31.3&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.60x&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td rowspan=&quot;4&quot;&gt;JavaScript&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;100K&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;9.0&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.17x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;1M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;20.5&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.39x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;10M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;29.7&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.57x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;100M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;29.2&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.56x&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr&gt;
    &lt;td rowspan=&quot;4&quot;&gt;PyPy&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;100K&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;1.0&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.02x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;1M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;3.8&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.07x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;10M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;9.2&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.18x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;100M&lt;/td&gt;
    &lt;td style=&quot;text-align: right&quot;&gt;10.5&lt;/td&gt;
    &lt;td style=&quot;text-align: center&quot;&gt;0.20x&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;figcaption&gt;Table 2 — JIT warmup characteristics of different runtimes;
relative performance is relative to the performance of the C++
implementation.
&lt;/figcaption&gt;

&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Unsurprisingly, Nim is capable of reaching C/C++ performance when you know
what you’re doing. Because there’s an extra layer of indirection when using
Nim (Nim source code needs to be translated to C first) and Nim in general is
further from the “metal” than C (in other words, it’s more high-level and less
of a portable assembly language like C), one needs to be careful. But the most
important thing to note is that Nim &lt;em&gt;allows&lt;/em&gt; the programmer to take control
over low-level details such as memory layout when necessary. This is in stark
contrast with other high-level languages such as Java, Python and JavaScript
which do not give the programmer this freedom. Having said that, the
aforementioned languages have fared quite admirably in the benchmarks,
JavaScript being the biggest surprise with a numerical performance on par with
Java.&lt;/p&gt;

&lt;p&gt;The greatest lesson for me in this experiment was that with modern compilers
and CPU architectures a naive approach to benchmarking is almost always bound
to fail. For performance critical applications one must establish a suite of
robust automated performance tests and run them periodically as it’s very easy
to introduce quite severe performance degradations even with the most innocent
looking refactorings (e.g. think of the inlining problem after we extracted
the vector operations into a module). Without a systematic approach to
performance regression testing, such problems can be quite frustrating and
time consuming to locate and fix (or even just detect, in case on non-trivial
applications!). Also, when benchmarking there’s nothing like inspecting the
actual assembly output; that’s the only foolproof way to catch the compiler
red-handed at optimising away your test code.&lt;/p&gt;

&lt;h2 id=&quot;does-it-all-matter&quot;&gt;Does it all matter?&lt;/h2&gt;

&lt;p&gt;I already hear some people repeating the common wisdom that hardware is cheap,
programmers (and their time) are expensive, and with so much power to spare on
modern CPUs, all this micro-optimisation exercise is just waste of time,
right?  Well, that depends. I tend to agree that performance is not so
critical for lots (maybe even the majority) of programming tasks and in those
cases it makes sense (commercially, at least) to optimise for programmer
productivity by using a high-level language&lt;sup id=&quot;fnref:nim&quot;&gt;&lt;a href=&quot;#fn:nim&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; . But when speed matters,
you are definitely going to hit a brick wall with a language that doesn’t make
low-level optimisations possible.&lt;/p&gt;

&lt;p&gt;Let’s pretend for a moment that our relative performance results would be
valid for the entire ray-tracer (oversimplification, but not entirely
impossible). Then if it would take 3 hours for the C and Nim implementations
to render a single frame, the Java and JavaScript versions would require
5 hours, the PyPy version 15 hours, and finally the CPython implementations
&lt;em&gt;over 30 and 40 days (!)&lt;/em&gt; for versions 2 and 3, respectively. Java and
JavaScript seem to be worthy contenders at first—until we start looking into
taking advantage of multiple CPU cores and SIMD instructions. Only Java, C/C++
and Nim have proper multi-threading support, so assuming 4 CPU cores (fairly
typical nowadays) and a very conservative 2x speedup by introducing
multi-threading, the performance gap widens. From our list of languages only
Nim and C/C++ make utilising SIMD instructions possible, so assuming another
2x speed bump thanks to this (again, staying quite conservative), the final
figures would look like this:&lt;/p&gt;

&lt;table style=&quot;width: 80%&quot;&gt;
  &lt;tr&gt;
    &lt;th&gt;Language&lt;/th&gt;
    &lt;th&gt;Time to render a single frame&lt;/th&gt;
    &lt;th&gt;Relative performance&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Nim / C++&lt;/td&gt;
    &lt;td&gt;45 minutes&lt;/td&gt;
    &lt;td&gt;1.00x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Java&lt;/td&gt;
    &lt;td&gt;2 hours 30 minutes&lt;/td&gt;
    &lt;td&gt;0.30x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;JavaScript&lt;/td&gt;
    &lt;td&gt;5 hours&lt;/td&gt;
    &lt;td&gt;0.15x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;PyPy&lt;/td&gt;
    &lt;td&gt;15 hours&lt;/td&gt;
    &lt;td&gt;0.05x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;CPython2&lt;/td&gt;
    &lt;td&gt;30 days&lt;/td&gt;
    &lt;td&gt;0.001x&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;CPython3&lt;/td&gt;
    &lt;td&gt;40 days&lt;/td&gt;
    &lt;td&gt;0.0008x&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;This is actually more in-line with real-life experience; a well-optimised C++
renderer can easily outperform a similarly well-optimised Java implementation
by a factor of 2 to 3, and JavaScript and Python basically don’t even have
a chance. As I said, this is not a Python bashing contest, I really like the
language and use it all the time for writing scripts and small tools, but one
needs to have a solid understanding of the limitations of one’s tools and
sometime do a reality check… I always find it amusing when people attempt to
“defend” their favourite inefficient high-level languages by saying that
algorithmic optimisations are the most important. Well, of course, no sane
person would argue with that! But if you took the same optimal algorithm and
implemented it in a language that offered greater low-level control over the
hardware (well, or had multi-threading and SIMD support &lt;em&gt;at all&lt;/em&gt;), it is not
unrealistic for the performance gain factor to be in the 2 to 1000 range!&lt;/p&gt;

&lt;p&gt;As for myself, I will happily continue using Nim, safe in the knowledge that
I won’t hit an insurmountable brick wall in the future, because whatever is
possible in C in terms of performance, there’s a way to replicate that in Nim
too, and with careful coding the runtime efficiency of both languages can be
virtually identical.&lt;/p&gt;

&lt;hr class=&quot;noline&quot; /&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;further-links-of-interest&quot;&gt;Further links of interest&lt;/h2&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-16-disassembling-the-assembly-part-1.html&quot;&gt;Gwynne Raskind — Disassembling the Assembly, Part 1&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2011-12-23-disassembling-the-assembly-part-2.html&quot;&gt;Gwynne Raskind — Disassembling the Assembly, Part 2&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://deplinenoise.wordpress.com/2013/12/28/optimizable-code/&quot;&gt;Andreas on Coding — Optimizable Code&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.dataorienteddesign.com/dodmain/dodmain.html&quot;&gt;Richard Fabian — Data-Oriented Design&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://godbolt.org/&quot;&gt;Compiler Explorer&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

&lt;/section&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sse&quot;&gt;
      &lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/SSE2&quot;&gt;SSE2&lt;/a&gt; instruction set was introduced in 2001 with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentium_4&quot;&gt;Pentium 4&lt;/a&gt;, so virtually every x86 family processor supports it today.  Note that this is 64-bit code, which you can easily spot because registers XMM8 through XMM15 are only available for 64-bit. &lt;a href=&quot;#fnref:sse&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:nim&quot;&gt;
      &lt;p&gt;Not that I would consider Nim a low-level language, quite on the contrary! It’s as enjoyable and fast to code in Nim as in Python, but with the added benefit of type safety which is not a hassle thanks to Nim’s excellent type inference. I think of Nim as a high-level language with the &lt;em&gt;possibility&lt;/em&gt; of going low-level when necessary, which is exactly what I want from a general purpose programming language. &lt;a href=&quot;#fnref:nim&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Sat, 22 Apr 2017 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2017/04/22/nim-performance-tuning-for-the-uninitiated/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2017/04/22/nim-performance-tuning-for-the-uninitiated/</guid>
            </item>
        
            <item>
                <title>A minimalist Openbox desktop for Vim freaks</title>
                <description>&lt;p class=&quot;intro&quot;&gt;Are you the sort of person who is looking for a Vim plugin for everything?
Does having to reach out for the mouse sideways cause you involuntary facial
muscles twitches? Is breaking out the arrow keys with a screwdriver among the
first few things you do on a new computer (after swapping Caps Lock with
Left Ctrl, of course)? Then welcome, you’re among friends here.&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Now that we’re done with the formalities and  have dissuaded normal computer
users and non-fanatical Vim aficionados from reading any further, let’s get to
the good stuff! I vastly prefer to use a Linux desktop for development and my
trusty 32-bit Crunchbang Waldorf VM has just reached the end of its useful
life because of my sudden realisation that I really need 64-bit support.
I had spent a considerable time “vimifying” my old setup (more on that later),
which, of course, I wanted to carry over to the new installation. This post
documents all the hackery I needed to do on the stock install to achieve that.&lt;/p&gt;

&lt;p&gt;We will use &lt;a href=&quot;https://crunchbangplusplus.org/&quot;&gt;Crunchbang++ 1.0&lt;/a&gt; 64-bit as our
starting point which is based on &lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian Jessie&lt;/a&gt;
stable. Why not use vanilla Debian instead? Because I really like the choices
&lt;a href=&quot;https://corenominal.org/about/&quot;&gt;Philip Newborough&lt;/a&gt; had made for the original
Crunchbang series and it would be an awful lot of work to replicate them from
scratch. Crunchbang is small, fast, stable and prioritises function over
form—it’s the perfect Openbox based system for a minimalist. Instead of
reinventing everything, we will just make a few strategic tweaks here and
there to make it more Vim friendly.&lt;/p&gt;

&lt;p&gt;Why VM? Because I also do &lt;a href=&quot;http://music.johnnovak.net/&quot;&gt;music&lt;/a&gt;, &lt;a href=&quot;http://www.johnnovak.net/&quot;&gt;graphics
design&lt;/a&gt; and
&lt;a href=&quot;http://photo.johnnovak.net/&quot;&gt;photography&lt;/a&gt;, and most creative apps on Linux
just suck&lt;sup id=&quot;fnref:linuxsucks&quot;&gt;&lt;a href=&quot;#fn:linuxsucks&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, plus I don’t like dual booting. The performance hit is
negligible nowadays anyway on these new 4 or 8 core Intel i7 CPUs.  But most
of the instructions will be applicable to non-VM installs as well as I will
always make it clear whether a particular step is VM specific or not.&lt;/p&gt;

&lt;p&gt;The bulk of the information presented in this article is a distillation of
ideas, tips and config snippets from various online sources far too numerous
to mention (or even just remember). Still, the &lt;a href=&quot;http://crunchbang.org/forums/&quot;&gt;old Crunchbang
forums&lt;/a&gt; and the excellent &lt;a href=&quot;https://wiki.archlinux.org/&quot;&gt;ArchLinux
wiki&lt;/a&gt; definitely stand out as the two best
sources of quality information on more arcane issues that you can’t always
figure out by reading the man pages alone.&lt;/p&gt;

&lt;h2 id=&quot;philosophy--main-features&quot;&gt;Philosophy &amp;amp; main features&lt;/h2&gt;

&lt;p&gt;Although I like the concept of tiling window managers, after analysing my
common usage patterns I realised that they would be an overkill for my needs.
Most of the time I just use tmux inside a maximised terminal window and
I rarely use more than a single window per desktop. I like to put my browser
windows (Firefox with &lt;a href=&quot;http://www.vimperator.org/vimperator&quot;&gt;Vimperator&lt;/a&gt;) and
PDF viewers (&lt;a href=&quot;http://mupdf.com/&quot;&gt;mupdf&lt;/a&gt;) onto separate desktops, so I just
need a way to quickly switch between them. Sometimes I need to view two
vertically maximised windows side-by-side on the same desktop (e.g.
a terminal and a PDF viewer), but that’s pretty much it. Anything else is so
infrequent and random that it can be just done easily with the mouse, which is
less than 5% of the total use cases, so efficiency really doesn’t matter
there.  The important thing is that 95% of the time I won’t need to lift my
fingers off the home row with this configuration!&lt;/p&gt;

&lt;p&gt;So with all this in mind, let’s take a look at the main features
on a high-level:&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Minimal &amp;amp; highly functional interface&lt;/dt&gt;
  &lt;dd&gt;I find the default Crunchbang theme just perfect, so we will be building
everything on top of that. The main components of the setup will be Openbox,
zsh, urxvt, tmux and—of course—Vim.&lt;/dd&gt;
  &lt;dt&gt;Global Vim-style navigation&lt;/dt&gt;
  &lt;dd&gt;Seamless navigation between Vim splits and tmux panes and a Vim-like way to
switch between 4 virtual desktops.&lt;/dd&gt;
  &lt;dt&gt;System clipboard support&lt;/dt&gt;
  &lt;dd&gt;While Vim and tmux have their own internal clipboards, other GUI apps
generally use the system clipboard, so we’ll need to invent a sane mechanism
to interoperate between them.&lt;/dd&gt;
  &lt;dt&gt;Mouse support&lt;/dt&gt;
  &lt;dd&gt;I don’t use the mouse very much, but when I do, I want it to work correctly
in tmux and Vim (e.g. changing focus, resizing panes, selecting &amp;amp; middle-click
pasting text etc.)&lt;/dd&gt;
  &lt;dt&gt;Unified colour scheme&lt;/dt&gt;
  &lt;dd&gt;I really like the &lt;a href=&quot;https://github.com/jonathanfilip/vim-lucius&quot;&gt;Lucius&lt;/a&gt; Vim
colour scheme (the default dark variant), so the whole setup will use Lucius
dark colours consistently.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;And now some screenshots, because everybody loves screenshots!&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-11-13/desktop1.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-11-13/desktop1-small.jpg&quot; alt=&quot;Figure 1 &amp;mdash; urxvt + tmux + Vim. That's how I'm spending way too much of my waking time inside a darkened room. The x86 assembly listing in the top right pane serves an important dual purpose: firstly, it is an attempt to make my programmer peers believe that I &amp;lt;em&amp;gt;really know a lot&amp;lt;/em&amp;gt; about computers, and secondly, it distances me from JavaScript wielding hipsters.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 1 &amp;mdash; urxvt + tmux + Vim. That's how I'm spending way too much of my waking time inside a darkened room. The x86 assembly listing in the top right pane serves an important dual purpose: firstly, it is an attempt to make my programmer peers believe that I &lt;em&gt;really know a lot&lt;/em&gt; about computers, and secondly, it distances me from JavaScript wielding hipsters.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-11-13/desktop2.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-11-13/desktop2-small.jpg&quot; alt=&quot;Figure 2 &amp;mdash; Another common use-case showcasing the window tiling functionality. Yes, the browser window shows the post you are reading right now (plus a Vimperator window, signalling my technical expertise to those in the know). Life is a big recursion, is it not? Also note the common staple of wannabe l33t Linux haxxorz, the ubiquitous tmux clock.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 2 &amp;mdash; Another common use-case showcasing the window tiling functionality. Yes, the browser window shows the post you are reading right now (plus a Vimperator window, signalling my technical expertise to those in the know). Life is a big recursion, is it not? Also note the common staple of wannabe l33t Linux haxxorz, the ubiquitous tmux clock.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-11-13/desktop3.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-11-13/desktop3-small.jpg&quot; alt=&quot;Figure 3 &amp;mdash; The obligatory 'just showing off' screenshot because I like the number three. Thunar makes an appearance here.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 3 &amp;mdash; The obligatory &quot;just showing off&quot; screenshot because I like the number three. Thunar makes an appearance here too.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;some-implementation-details&quot;&gt;Some implementation details&lt;/h2&gt;

&lt;p&gt;In the following sub-sections we’ll take a detailed look at some of the more
difficult to configure features. I won’t go through every single line in every
config file because then I would be sitting here writing this article for the
next two months… Just take a look at &lt;a href=&quot;https://github.com/johnnovak/dotfiles&quot;&gt;my
dotfiles&lt;/a&gt; if you’re interested, or
better yet, clone/download the repo and run &lt;code&gt;install.sh&lt;/code&gt; to set it up on your
system. The installer assumes a vanilla &lt;a href=&quot;https://crunchbangplusplus.org/&quot;&gt;Crunchbang++
1.0&lt;/a&gt; with some extra packages. The second
part of this article provides detailed instructions on how to set up the whole
thing from scratch into a new VirtualBox VM (mostly for my own reference, but
perhaps others will find it useful too).&lt;/p&gt;

&lt;h3 id=&quot;navigation&quot;&gt;Navigation&lt;/h3&gt;

&lt;h4 id=&quot;vim--tmux&quot;&gt;Vim &amp;amp; tmux&lt;/h4&gt;

&lt;p&gt;Seamless navigation among Vim splits and tmux panes is accomplished via the
excellent &lt;a href=&quot;https://github.com/christoomey/vim-tmux-navigator&quot;&gt;Vim Tmux
Navigator&lt;/a&gt;. We’ll just use
the default settings that will use the shortcuts
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt; to move
between panes.&lt;/p&gt;

&lt;p&gt;A side effect of this configuration is that we won’t be able to use
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;L&lt;/kbd&gt; to clear the terminal anymore. There’s an easy
workaround for that; we’ll remap &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;L&lt;/kbd&gt; to
&lt;kbd&gt;&amp;lt;Prefix&amp;gt;&lt;/kbd&gt;+&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;L&lt;/kbd&gt; in the tmux config:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind C-l send-keys &quot;C-l&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;xmodmap&quot;&gt;xmodmap&lt;/h4&gt;

&lt;p&gt;Hey, wait a minute, chief! What’s xmodmap doing here? xmodmap is a tool for
modifying X keymaps and mouse button mappings. We are going to use it to
differentiate between the left and right &lt;kbd&gt;Alt&lt;/kbd&gt; modifiers when
defining our Openbox shortcuts. I happened to come up with this bright idea of
switching between desktops 1 to 4 with &lt;kbd&gt;R
Alt&lt;/kbd&gt;+&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;kbd&gt;;&lt;/kbd&gt; and to send the
current window to another desktop with &lt;kbd&gt;L Alt&lt;/kbd&gt;+&lt;kbd&gt;R
Alt&lt;/kbd&gt;+&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;kbd&gt;;&lt;/kbd&gt;. Try them out,
they’re really comfortable and quick to use from the home row if you pressed
the &lt;kbd&gt;Alt&lt;/kbd&gt; buttons with your thumbs!&lt;/p&gt;

&lt;p&gt;This is how our &lt;code&gt;~/.Xmodmap&lt;/code&gt; file will look like. First, we’ll need to map the
keycode of &lt;kbd&gt;L Alt&lt;/kbd&gt; to &lt;code&gt;Alt_L&lt;/code&gt; and &lt;kbd&gt;R Alt&lt;/kbd&gt; to  &lt;code&gt;Hyper_R&lt;/code&gt;.
Why &lt;code&gt;Hyper_R&lt;/code&gt; and not &lt;code&gt;Alt_R&lt;/code&gt;? Well, because my keyboard happens to generate
the keycode for &lt;code&gt;Hyper_R&lt;/code&gt; when I press &lt;kbd&gt;R Alt&lt;/kbd&gt;. To find out the exact
keycode for your keyboard (it might be different), use the &lt;code&gt;xev&lt;/code&gt; (X Event
Viewer) utility.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keycode 64 = Alt_L NoSymbol Alt_L
keycode 108 = Hyper_R NoSymbol Hyper_R
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, we’ll clear all existing modifier bindings and set our own. This
is not strictly necessary as we’re just setting the defaults again for most,
but I find this method cleaner and easier to troubleshoot because then we can
see all the modifier definitions in one place.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clear Shift
clear Control
clear Mod1
clear Mod2
clear Mod3
clear Mod4
clear Mod5

add Shift = Shift_L Shift_R
add Control = Control_L Control_R
add Mod1 = Alt_L
add Mod2 = Num_Lock
add Mod3 = Hyper_R
add Mod4 = Super_L
add Mod5 = ISO_Level3_Shift
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s one very confusing and non-obvious thing about this config that I will
illustrate with a concrete example. We are mapping &lt;code&gt;Hyper_R&lt;/code&gt; to &lt;code&gt;Mod3&lt;/code&gt;, yet in
our Openbox config we won’t be using &lt;code&gt;Mod3&lt;/code&gt; for any of the keybindings, but
just the hyper key directly (e.g. &lt;code&gt;A-H-j&lt;/code&gt;, which stands for Alt-Hyper-j, which
will be bound to &lt;kbd&gt;L Alt&lt;/kbd&gt;+&lt;kbd&gt;R Alt&lt;/kbd&gt;+&lt;kbd&gt;J&lt;/kbd&gt;). The logical
conclusion would be that we won’t need to bind anything to &lt;code&gt;Mod3&lt;/code&gt; then. Not
so! Due to the &lt;a href=&quot;https://bugs.freedesktop.org/show_bug.cgi?id=926&quot;&gt;extremely arcane
ways&lt;/a&gt; how applications need
to communicate with the X server, Openbox can only get keydown events for
a modifier key if it is bound to one of the &lt;code&gt;Mod*&lt;/code&gt; modifiers. I’m sure the
real situation is even more messy and complicated than that, but this is all
we need to know for our purposes.&lt;/p&gt;

&lt;p&gt;One more thing, I like to switch &lt;kbd&gt;Caps Lock&lt;/kbd&gt; with &lt;kbd&gt;L Ctrl&lt;/kbd&gt;
on all my computers, but we won’t need to do that here because I’m using
&lt;a href=&quot;https://sharpkeys.codeplex.com/&quot;&gt;SharpKeys&lt;/a&gt; on Windows for that purpose, and 
luckily the settings carry over to the guest VM.&lt;/p&gt;

&lt;h4 id=&quot;openbox&quot;&gt;Openbox&lt;/h4&gt;

&lt;p&gt;Ok, time to teach Openbox a few new tricks as well. Let’s start with setting
the number of desktops to four in &lt;code&gt;~/.config/openbox/rc.xml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;desktops&amp;gt;
  &amp;lt;number&amp;gt;4&amp;lt;/number&amp;gt;
  &amp;lt;firstdesk&amp;gt;1&amp;lt;/firstdesk&amp;gt;
  &amp;lt;names&amp;gt;
    &amp;lt;name&amp;gt;1&amp;lt;/name&amp;gt;
    &amp;lt;name&amp;gt;2&amp;lt;/name&amp;gt;
    &amp;lt;name&amp;gt;3&amp;lt;/name&amp;gt;
    &amp;lt;name&amp;gt;4&amp;lt;/name&amp;gt;
  &amp;lt;/names&amp;gt;
  &amp;lt;popupTime&amp;gt;875&amp;lt;/popupTime&amp;gt;
&amp;lt;/desktops&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we’ll disable the window decorations for &lt;code&gt;urvxt&lt;/code&gt; and &lt;code&gt;terminator&lt;/code&gt; because
they look much cooler that way:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;application name=&quot;terminator&quot;&amp;gt;
  &amp;lt;decor&amp;gt;no&amp;lt;/decor&amp;gt;
&amp;lt;/application&amp;gt;
&amp;lt;application name=&quot;urxvt&quot;&amp;gt;
  &amp;lt;decor&amp;gt;no&amp;lt;/decor&amp;gt;
&amp;lt;/application&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To recap, this is the final list of shortcuts for our Vim-style desktop (in
addition to the standard stuff like &lt;kbd&gt;L Alt&lt;/kbd&gt;+&lt;kbd&gt;Tab&lt;/kbd&gt; to switch
between windows etc.):&lt;/p&gt;

&lt;table class=&quot;no-border&quot;&gt;
  &lt;tr&gt;
    &lt;td class=&quot;shortcut&quot;&gt;&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;/td&gt;
    &lt;td&gt;Move between Vim splits &amp;amp; tmux panels&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;shortcut&quot;&gt;&lt;kbd&gt;R Alt&lt;/kbd&gt;+&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;kbd&gt;;&lt;/kbd&gt;&lt;/td&gt;
    &lt;td&gt;Switch to desktop 1 to 4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;shortcut&quot;&gt;&lt;kbd&gt;L Alt&lt;/kbd&gt;+&lt;kbd&gt;R Alt&lt;/kbd&gt;+&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;kbd&gt;;&lt;/kbd&gt;&lt;/td&gt;
    &lt;td&gt;Send window to desktop 1 to 4&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;shortcut&quot;&gt;&lt;kbd&gt;Win&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;H&lt;/kbd&gt;&lt;kbd&gt;J&lt;/kbd&gt;&lt;kbd&gt;K&lt;/kbd&gt;&lt;kbd&gt;;&lt;/kbd&gt;&lt;/td&gt;
    &lt;td&gt;Half-screen tile window&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;The only thing left to do is to remap the existing keybindings in &lt;code&gt;rc.xml&lt;/code&gt;.
For example, this is how the desktop switching shortcuts look like.  Note that
we need to bind to &lt;code&gt;H-x&lt;/code&gt; (Hyper + x) for the shortcut &lt;kbd&gt;R
Alt&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;. Another interesting thing to note is that the key
&lt;kbd&gt;;&lt;/kbd&gt; (semicolon) has to be specified by its keycode (47 decimal, 0x2f
hex). Again, &lt;code&gt;xev&lt;/code&gt; is your friend to find out the keycode for a particular key.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&quot;H-j&quot;&amp;gt;
  &amp;lt;action name=&quot;GoToDesktop&quot;&amp;gt;
    &amp;lt;to&amp;gt;1&amp;lt;/to&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&quot;H-k&quot;&amp;gt;
  &amp;lt;action name=&quot;GoToDesktop&quot;&amp;gt;
    &amp;lt;to&amp;gt;2&amp;lt;/to&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&quot;H-l&quot;&amp;gt;
  &amp;lt;action name=&quot;GoToDesktop&quot;&amp;gt;
    &amp;lt;to&amp;gt;3&amp;lt;/to&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&amp;lt;keybind key=&quot;H-0x2f&quot;&amp;gt;
  &amp;lt;action name=&quot;GoToDesktop&quot;&amp;gt;
    &amp;lt;to&amp;gt;4&amp;lt;/to&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The send to desktop bindings will be very similar. Here’s the first one from
which you can figure out the rest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&quot;A-H-j&quot;&amp;gt;
  &amp;lt;action name=&quot;SendToDesktop&quot;&amp;gt;
    &amp;lt;to&amp;gt;1&amp;lt;/to&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we’ll just need to remap the existing window tiling shortcuts and
we’re done. Example for tile left:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;keybind key=&quot;W-S-h&quot;&amp;gt;    	# HalfLeftScreen
  &amp;lt;action name=&quot;UnmaximizeFull&quot;/&amp;gt;
  &amp;lt;action name=&quot;MoveResizeTo&quot;&amp;gt;
    &amp;lt;x&amp;gt;0&amp;lt;/x&amp;gt;
    &amp;lt;y&amp;gt;0&amp;lt;/y&amp;gt;
    &amp;lt;height&amp;gt;100%&amp;lt;/height&amp;gt;
    &amp;lt;width&amp;gt;50%&amp;lt;/width&amp;gt;
  &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;clipboard-support&quot;&gt;Clipboard support&lt;/h3&gt;

&lt;p&gt;Getting the shared system clipboard (X11 selections) to work consistently
across different GUI and command line apps on Linux can undoubtedly be a hair
loss-inducing experience. One of the sources of confusion is that we are
usually dealing with two clipboards in X11, not just one like on Windows or OS
X. First, there’s the normal clipboard most well-behaved GUI apps use for the
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;&lt;kbd&gt;C&lt;/kbd&gt;&lt;kbd&gt;V&lt;/kbd&gt; operations (officially
referred to as the &lt;strong&gt;clipboard selection&lt;/strong&gt;), and then there’s the
select-with-mouse-and-paste-with-middle-click variant (the &lt;strong&gt;primary
selection&lt;/strong&gt;). (There’s a third one called &lt;strong&gt;secondary selection&lt;/strong&gt; too, but no
one ever uses that for anything, as far as I’m aware. One less thing to worry
about!)&lt;/p&gt;

&lt;p&gt;Most GUI apps handle the clipboard and primary selections just as expected
(the GTK apps included with Crunchbang certainly do). The problems start when
we want certain console apps—like tmux and Vim—that have their own
internal buffers, to interoperate with X11 selections, so we can copy/paste
text from them into GUI apps, and vice versa. This is also needed for
clipboard interoperability with the guest OS; with bidirectional clipboard
support enabled in VirtualBox, the Windows clipboard operations will use the
X11 clipboard selection just like Linux GUI apps do (but note that the primary
selection is not supported, so no middle-click copy/paste between the host and
the guest).&lt;/p&gt;

&lt;p&gt;My general idea is to use the
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;X&lt;/kbd&gt;&lt;kbd&gt;C&lt;/kbd&gt;&lt;kbd&gt;V&lt;/kbd&gt; shortcuts in tmux and Vim
to interact with the clipboard selection, while retaining the ability to use
their internal buffers with their native clipboard commands. Let’s see how we
can achieve that!&lt;/p&gt;

&lt;h4 id=&quot;vim&quot;&gt;Vim&lt;/h4&gt;

&lt;p&gt;Teaching Vim how to do this is quite simple by defining the following
mappings in our &lt;code&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vnoremap &amp;lt;C-x&amp;gt; &quot;+x
vnoremap &amp;lt;C-c&amp;gt; &quot;+y
noremap  &amp;lt;C-v&amp;gt; &quot;+gP
inoremap &amp;lt;C-v&amp;gt; &amp;lt;C-r&amp;gt;+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, we now have just overridden the default &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;V&lt;/kbd&gt;
block selection shortcut. Let’s remap it to &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt;
instead (gVim on Windows does the same thing by default, by the way ):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;noremap &amp;lt;C-q&amp;gt; &amp;lt;C-v&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is almost good, but sadly it turns out that &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Q&lt;/kbd&gt;
and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;S&lt;/kbd&gt; are reserved for an ancient terminal feature
called &lt;a href=&quot;https://en.wikipedia.org/wiki/Software_flow_control&quot;&gt;flow control&lt;/a&gt;. We
definitely don’t need that, so let’s reclaim these shortcuts and put them to
a better use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# reclaim Ctrl-S
stty stop undef

# reclaim Ctrl-Q
stty start undef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Middle-click pasting from GUI apps into Vim works perfectly fine both in command
and insert mode, so we’re done.&lt;/p&gt;

&lt;h4 id=&quot;tmux&quot;&gt;tmux&lt;/h4&gt;

&lt;p&gt;The situation gets a bit trickier in the case of tmux, which doesn’t have any
direct support for X selections, so we’ll need to resort to external tools
combined with some shell magic.&lt;/p&gt;

&lt;p&gt;The GTK+ clipboard manager &lt;a href=&quot;https://github.com/CristianHenzel/ClipIt&quot;&gt;ClipIt&lt;/a&gt;
included with Crunchbang has a command line interface that can interact with
the system clipboard (in theory), however, I could never get it to work, and
neither could others, according to the old Crunchbang forums. So we’ll need to
grab another tool that does actually work, and the aptly titled &lt;strong&gt;xclip&lt;/strong&gt;
happens to just fit the bill:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install xclip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Armed with xclip, we can now configure tmux to pipe our selection to xclip
when we hit &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; in vi-copy mode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind -t vi-copy &quot;C-c&quot; copy-pipe &quot;xclip -selection clipboard&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pasting is a bit more difficult because tmux shortcuts have precedence over
the Vim ones, so we’ll need to detect whether we’re pressing
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;V&lt;/kbd&gt; in a Vim session inside a tmux pane or just in
a regular terminal pane. In the Vim pane case we’ll simply pass the
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;V&lt;/kbd&gt; through to Vim, otherwise we’ll execute our tmux
specific paste magic. Without the passthrough trick tmux would send the
contents of the clipboard to Vim as a sequence of commands to execute, which
would be a total disaster in command mode. It would work in insert mode,
though, but that’s a crappy half-assed solution— let’s just do this properly
and make it work correctly in both modes! Here’s how (apologies for the two
levels of escaping, but that’s unavoidable):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bind -n C-v if-shell &quot;\$is_vim&quot; &quot;send-keys C-v&quot; &quot;run-shell \
    \&quot;tmux set-buffer \\\&quot;\$(xclip -o -selection clipboard)\\\&quot;; \
    tmux paste-buffer\&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This idea is taken from
&lt;a href=&quot;https://github.com/christoomey/vim-tmux-navigator&quot;&gt;Vim Tmux Navigator&lt;/a&gt;, and
in fact, we are reusing the &lt;code&gt;is_vim&lt;/code&gt; command from their tmux config snippet.
For the sake of completeness (and because it contains a marvellously repulsive
regular expression), I will include it here:&lt;/p&gt;

&lt;pre class=&quot;no-math&quot;&gt;&lt;code&gt;is_vim=&quot;ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Quite obvious what it’s doing, isn’t it? I thought so too.&lt;/p&gt;

&lt;h3 id=&quot;mouse-support&quot;&gt;Mouse support&lt;/h3&gt;

&lt;h4 id=&quot;vim-1&quot;&gt;Vim&lt;/h4&gt;

&lt;p&gt;Enabling mouse support in Vim is surprisingly easy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if has('mouse')
  set mouse=a
endif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! This will let us navigate and resize splits with the mouse and use
the select/middle-click primary clipboard mechanism.  Of course, you’ll need
a Vim version compiled with mouse support enabled for this (I recommend the
kitchen-sink &lt;code&gt;vim-nox&lt;/code&gt; package that contains support for basically all Vim
features).&lt;/p&gt;

&lt;h4 id=&quot;tmux-1&quot;&gt;tmux&lt;/h4&gt;

&lt;p&gt;As we would expect, tmux is a harder nut to crack. The following will enable
mouse support on tmux &amp;lt;2.0 (1.9-6 is the latest stable version for Jessie).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on
set -g mouse-select-window on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is all good so far, but there are a few caveats with how mouse selections
will interact with the system clipboard handling we have configured earlier.
First of all, just selecting some text and then releasing the mouse button
will copy the selection into the internal tmux buffer. If we want it to be
copied into the clipboard selection instead, we must press
&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt; &lt;em&gt;before&lt;/em&gt; releasing the mouse button!&lt;/p&gt;

&lt;p&gt;The handling of primary selections is similarly quirky: to paste the contents
of the primary selection into a tmux pane, we must hold &lt;kbd&gt;Shift&lt;/kbd&gt; while
middle-clicking. To make a primary selection, we must again hold
&lt;kbd&gt;Shift&lt;/kbd&gt; while click-dragging, but this unfortunately bypasses tmux
altogether, so multiline selections with vertically split panes won’t work
very well (experiment with this a bit and you’ll see what I mean). The
workaround for this is to maximise the pane before making the selection. To
the best of my knowledge, there are no better solutions for the tmux primary
selection issues at the moment.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;We’ll need the following ingredients:&lt;/p&gt;

&lt;ul class=&quot;compact&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox 5.1.8&lt;/a&gt; (or newer)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://crunchbangplusplus.org/&quot;&gt;Crunchbang++ 1.0&lt;/a&gt; 64-bit image (&lt;a href=&quot;https://crunchbangplusplus.org/assets/misc/cbpp-1.0-amd64-20150428.iso.torrent&quot;&gt;torrent&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Internet connection (Crunchbang is based on Debian netinstall)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll need to create a new VM with &lt;em&gt;Linux 2.6 / 3.x / 4.x (64-bit)&lt;/em&gt; selected
as the guest operating system type. &lt;em&gt;Debian (64-bit)&lt;/em&gt; would probably work too,
but I haven’t tested it. I’m on an Intel i7 4790k 4.0 GHz with 16 gigs of RAM,
so I just allocated 4 CPU cores and 4 gigs to the new VM and created a 40 GB
dynamic storage on an SSD partition (recommended). Pretty standard stuff, but
pay attention to the following issues:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Make sure that &lt;em&gt;Enable PAE/NX System&lt;/em&gt; is checked under &lt;em&gt;System / Processor
/ Extended Features&lt;/em&gt;, otherwise the installer will fail.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Check &lt;em&gt;Enable VT-x/AMD-V&lt;/em&gt; under &lt;em&gt;System / Acceleration / Hardware
Virtualization&lt;/em&gt;, otherwise AVX passthrough won’t work (if this doesn’t make
sense to you, then you have nothing to worry about). Of course, your processor
must support that and it has to be enabled in the BIOS.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From this point it’s easy sailing—just insert the ISO and proceed with the
install. I recommend using the text mode installer because the GUI one hung at
some point during downloading the packages. Everything should be
self-explanatory, just accept the default HDD partitioning scheme (or you can
complicate things, up to you).&lt;/p&gt;

&lt;h2 id=&quot;on-first-boot&quot;&gt;On first boot&lt;/h2&gt;

&lt;p&gt;About 30-60 minutes later, we will be greeted by the &lt;code&gt;cbpp-welcome&lt;/code&gt; script
that will offer us to update the system and install some optional packages.
We’ll do that, but later, so just exit for now. Our first objective is to get
the desktop environment up and running, then we’ll do the system update, and
finally we’ll fix a few issues and perform some other usability enhancements.&lt;/p&gt;

&lt;h3 id=&quot;set-zsh-as-the-default-shell&quot;&gt;Set zsh as the default shell&lt;/h3&gt;

&lt;p&gt;My first thing to do on a new system is switch to &lt;strong&gt;zsh&lt;/strong&gt;, so let’s install
that quickly with &lt;code&gt;sudo apt-get install zsh&lt;/code&gt; and then set it as the default
login shell. Just run &lt;code&gt;chsh&lt;/code&gt; and enter &lt;code&gt;/bin/zsh&lt;/code&gt; as the new value. Note that
the change will only take effect on the next login.&lt;/p&gt;

&lt;p&gt;It is also recommended to set &lt;code&gt;x-terminal-emulator&lt;/code&gt; to zsh because the
built-in Openbox menus use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo update-alternatives --config x-terminal-emulator
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;install-virtualbox-guest-additions&quot;&gt;Install VirtualBox Guest Additions&lt;/h3&gt;

&lt;p&gt;We need to install the VirtualBox Guest Additions to get fullscreen,
bidirectional clipboard and drag-and-drop support working. This will also make
the screen updates snappier and it will fix the default jerky mouse pointer
behaviour, which is quite horrible. But before we could proceed, the kernel
headers must be installed first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% sudo apt-get install linux-headers-$(uname -r)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, select &lt;em&gt;Insert Guest Additions CD image…&lt;/em&gt; in the &lt;em&gt;Devices&lt;/em&gt; menu
in VirtualBox. You might need to create a virtual optical drive first in the
VM settings if you haven’t done so already (remember that you can only do that
when the VM is shut down, otherwise the &lt;em&gt;Add optical drive&lt;/em&gt; button on the
&lt;em&gt;Storage&lt;/em&gt; tab will be disabled).&lt;/p&gt;

&lt;p&gt;Now we can install the additions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd /media/cdrom
% sudo sh ./VBoxLinuxAdditions.run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t forget to tick &lt;em&gt;Shared Clipboard&lt;/em&gt; and &lt;em&gt;Drag’n’Drop&lt;/em&gt; to &lt;em&gt;Bidirectional&lt;/em&gt;
under &lt;em&gt;General / Advanced&lt;/em&gt; in the VM settings. Enter fullscreen mode (&lt;kbd&gt;R
Ctrl&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt;), reboot, and you should be rewarded for your efforts
with a glorious fullscreen Crunchbang desktop sporting a fluid mouse pointer!&lt;/p&gt;

&lt;h3 id=&quot;perform-system-update&quot;&gt;Perform system update&lt;/h3&gt;

&lt;p&gt;CrunchBangPlusPlus 1.0 was released more than a year ago, so we should
definitely update the system to the latest Debian Jessie packages. The easiest
way to do this is to run the &lt;code&gt;cbpp-welcome&lt;/code&gt; script again and let it update the
software sources and the system (answer &lt;em&gt;Yes&lt;/em&gt; to the first two questions).
This will take a while, depending on the speed of your network (I think it
took about an hour for me). After this, you’ll have the option to install
a few more additional packages.&lt;/p&gt;

&lt;h3 id=&quot;fix-compton&quot;&gt;Fix Compton&lt;/h3&gt;

&lt;p&gt;For some reason, Compton (the compositor responsible for window transparency,
drop shadows and other eye candy) could not start up properly in my VirtualBox
setup. It turned out that the startup script tried to enable OpenGL vsync by
default and that was causing the issues, so we’ll just disable that by
commenting lines 18-20 out in &lt;code&gt;/usr/bin/cbpp-compositor&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#if glxinfo | egrep -iq 'direct rendering: yes'; then
#    EXECXCOMP+=' --vsync opengl'
#fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Compton by selecting &lt;em&gt;Settings / Compositor / Restart Compositing&lt;/em&gt; in
the Openbox right-click menu and take a quiet moment to marvel at the tasteful
drop shadows around your window edges!&lt;/p&gt;

&lt;h3 id=&quot;enable-autologin&quot;&gt;Enable autologin&lt;/h3&gt;

&lt;p&gt;If you’re the sole user of this VM, you’ll probably want to enable autologin.
Edit &lt;code&gt;/etc/slim.conf&lt;/code&gt; and change the following three parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;login_cmd       exec /bin/bash -login /etc/X11/Xsession %session
auto_login      yes
default_user    YOUR_USERNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;installing-powerline-fonts&quot;&gt;Installing Powerline fonts&lt;/h3&gt;

&lt;p&gt;Some people maintain that one can live a full and prosperous life without
&lt;a href=&quot;https://github.com/powerline/fonts&quot;&gt;Powerline fonts&lt;/a&gt;.  Needless to say, this
is utter bollocks. Those in the know will surely follow my wise advice and
issue the following sequence of commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;% cd /tmp/
% wget https://github.com/powerline/fonts/archive/2015-12-04.zip
% unzip 2015-12-04.zip
% cd fonts-2015-12-04
% mkdir ~/.fonts/
% cp LiberationMono/Literation\ Mono\ Powerline.ttf ~/.fonts/
% fc-cache -vf ~/.fonts/
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;setting-the-right-wallpaper&quot;&gt;Setting the &lt;em&gt;right&lt;/em&gt; wallpaper&lt;/h3&gt;

&lt;p&gt;No desktop Linux setup is ever complete without a wallpaper, but, of course,
the chosen wallpaper must be the &lt;em&gt;correct&lt;/em&gt; one. Look no further than &lt;a href=&quot;/files/2016-11-12/lotus.png&quot;&gt;this&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt; … aaaand congratulations, you’re done. Enjoy your brand new vimified
desktop! :)&lt;/p&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;https://xaizek.github.io/2016-08-13/big-list-of-vim-like-software/&quot;&gt;The big list of Vi[m]-like software&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/section&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:linuxsucks&quot;&gt;
      &lt;p&gt;There are a few good ones though, for example I’m using the Windows version of Inkscape, but there’s really no match for Lightroom or Photoshop (if you want to recommend me The Gimp at this point, please save your energy).  Moreover, the driver support for (semi-)pro audio interfaces is just non-existent on Linux, and let’s not even talk about the audio software front… &lt;a href=&quot;#fnref:linuxsucks&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Sun, 13 Nov 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/11/13/a-minimalist-openbox-desktop-for-vim-freaks/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/11/13/a-minimalist-openbox-desktop-for-vim-freaks/</guid>
            </item>
        
            <item>
                <title>The Nim Ray Tracer Project &amp;ndash; Part 4: Calculating Box Normals</title>
                <description>&lt;p class=&quot;intro&quot;&gt;[I’ve been listening to &lt;em&gt;Shadows of the Heart&lt;/em&gt; from &lt;em&gt;Dan Pound&lt;/em&gt; all week, it’s
just the perfect definition of ambient that, &lt;a href=&quot;http://music.hyperreal.org/artists/brian_eno/MFA-txt.html&quot;&gt;according to Brian
Eno&lt;/a&gt;, “must be as
ignorable as it is interesting”. No track highlights this time, this is really
meant to be listened to from beginning to end, over and over again; it’s one
singular 55-minute piece of soothing ambient symphony!]&lt;/p&gt;

&lt;p&gt;I needed a way to calculate normals for the box primitive in my ray tracer.
Of course, this is trivial if the boxes are represented as a triangle meshes
with stored per vertex normals—just use the triangle intersection routine
and job done! Interestingly, all online resources I could find either suggest
this approach or some naive algorithm that intersects the ray with all the six
planes that define the box… Ughh, we can certainly do better than that!&lt;/p&gt;

&lt;p&gt;First of all, because we’re not dealing with arbitrary boxes in 3D space here,
we can make certain optimisations. For my case, I wanted to be able to
calculate the normals for &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_bounding_box#Axis-aligned_minimum_bounding_box&quot;&gt;axis-aligned bounded
boxes&lt;/a&gt;
(AABBs) only that are defined just by their two diagonally opposite points.&lt;/p&gt;

&lt;p&gt;Why just AABBs? What about boxes that are not parallel to the axes? Well, the
way I’m doing things is that the final world position of an object is
described by its &lt;code&gt;objectToWorld&lt;/code&gt; transform matrix that can include rotation as
well. Using AABBs for boxes, unit spheres for spheres etc. simplifies the
intersection routines a lot (makes them faster to calculate). Then during
rendering, I’m using the inverse transform &lt;code&gt;worldToObject&lt;/code&gt; to transform the
ray to object space and do the intersection there&lt;sup id=&quot;fnref:intersect&quot;&gt;&lt;a href=&quot;#fn:intersect&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. This method is
&lt;em&gt;vastly&lt;/em&gt; more efficient for triangle meshes as well—we only need to inverse
transform a single ray instead of transforming potentially thousands or
millions of triangles!&lt;/p&gt;

&lt;p&gt;This is how our geometry definitions look like in Nim (we’re using
&lt;a href=&quot;https://github.com/stavenko/nim-glm&quot;&gt;nim-glm&lt;/a&gt; for the vector maths stuff).
We’re going to use AABBs later for constructing &lt;a href=&quot;https://en.wikipedia.org/wiki/Bounding_volume_hierarchy&quot;&gt;bounding volume
hierarchies&lt;/a&gt;  (BVH)
as well, hence the separate &lt;code&gt;AABB&lt;/code&gt; and &lt;code&gt;Box&lt;/code&gt; types.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glm&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;AABB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RootObj&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;objectToWorld&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat4x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;worldToObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat4x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Sphere&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Geometry&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Plane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Geometry&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;discard&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Geometry&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AABB&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;box-normal-algorithm&quot;&gt;Box normal algorithm&lt;/h2&gt;

&lt;p&gt;We’ll solve the problem for the unit cube first, then we’ll find a way to map
the solution from an arbitrary AABB to the unit cube.  For the sake of
simplicity, we’re going to illustrate the basic algorithm in 2D only;
extending it to 3D is trivial.&lt;/p&gt;

&lt;h3 id=&quot;solution-for-the-unit-cube&quot;&gt;Solution for the unit cube&lt;/h3&gt;

&lt;p&gt;Consider the blue $P$ points that lie on the rectangle in Figure 1. By
looking at the vectors pointing to these points (blue arrows), we can make the
observation that by taking the integer parts of the vectors’ coordinates
(&lt;em&gt;not&lt;/em&gt; rounding!), we would get the normals we’re after (green arrows). And
that’s it!&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
  &lt;object data=&quot;/files/2016-10-22/box-normals.svg&quot; type=&quot;image/svg+xml&quot; style=&quot;width: 100%&quot;&gt;&lt;/object&gt;
  

  
    
    &lt;figcaption style=&quot; text-align: center;&quot;&gt;Figure 1 &amp;mdash; Calculating normals for the unit rectangle in 2D. The vectors pointing to the blue points P are the hit points, and the green vectors N the corresponding normals.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;There are some complications though. This approach yields perfectly correct
results for $P_1$, $P_2$ and $P_3$, but for $P_4$ we’d get $(1,
-1)$, which firstly is not a normal, and secondly, is diagonal. Strictly
speaking, the diagonal-ness is a bit incorrect, although it can be argued that
the normals are “undefined” at the corners, thus the diagonal could as
well be accepted as a valid answer. Either way, in practice this won’t make
any difference—we will very rarely hit the corners exactly, and even if we
did, the “degenerate” normals will be averaged out with the “normal” ones
during multi-sampling. We just need to normalise our resulting vector after
the integer truncation to ensure that the length is always 1.&lt;/p&gt;

&lt;p&gt;Of course, we can always put a few if statements at the end to filter out the
diagonals, but that would make the whole algorithm slower. It’s also worth
mentioning that in 3D we will have edge cases too in addition to the corner
cases (no pun intended).&lt;/p&gt;

&lt;h3 id=&quot;solution-for-arbitrary-aabbs&quot;&gt;Solution for arbitrary AABBs&lt;/h3&gt;

&lt;p&gt;Mapping the problem from an AABB to the unit cube is basically a translation
and scaling exercise. Our AABB is defined by its two diagonally opposite
points, $V_{\min}$ and $V_{\max}$, from which we can easily calculate its
centre point $C$ (now in 3D):&lt;/p&gt;

&lt;p&gt;$$ C=⟨{V_{\min_\x} + V_{\max_\x}} / 2, {V_{\min_\y} + V_{\max_\y}} / 2, {V_{\min_\z} + V_{\max_\z}} / 2⟩$$&lt;/p&gt;

&lt;p&gt;Next, we’ll calculate the vector $p↖{→}$ that points from the centre point to
the hit point $P_{\hit}$:&lt;/p&gt;

&lt;p&gt;$$ p↖{→} = P_{\hit} - C $$&lt;/p&gt;

&lt;p&gt;This vector corresponds to the blue vectors in Figure 1. What we need to do
next is map $p↖{→}$ to the unit cube by calculating divisor values
for each of its dimensions:&lt;/p&gt;

&lt;p&gt;$$ \d_x = {\abs(V_{\min_\x}-V_{\max_\x})} / 2 $$
$$ \d_y = {\abs(V_{\min_\y}-V_{\max_\y})} / 2 $$
$$ \d_z = {\abs(V_{\min_\z}-V_{\max_\z})} / 2 $$&lt;/p&gt;

&lt;p&gt;From $p↖{→}$ and the scalar divisors $\d_x$, $\d_y$ and $\d_z$ we can
calculate the normal $n↖{→}$ at the hit point (the green vectors in Figure
1):&lt;/p&gt;

&lt;p&gt;$$ n↖{→} = ⟨\int(p_\x / \d_x), \int(p_\y / \d_y), \int(p_\z / \d_z)⟩ $$&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Okay, time to have a look at some Nim code!  This is a slightly optimised
version of the above algorithm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aabb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.000001&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Wait a minute, what’s that multiplier &lt;code&gt;bias&lt;/code&gt; doing there? That, my friend, is
&lt;strong&gt;the amount of difference between theory of practice&lt;/strong&gt;. For educational
purposes only, this is what we would get if we left it off:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-22/boxes-bad.png&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-10-22/boxes-bad.png&quot; alt=&quot;Figure 2 &amp;mdash; Boxes rendered with our box normal method omitting the bias multiplier. Due to floating point inaccuracies, we can observe something akin to the self-shadowing phenomena when calculating ray traced shadows.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; text-align: center;&quot;&gt;Figure 2 &amp;mdash; Boxes rendered with our box normal method omitting the bias multiplier. Due to floating point inaccuracies, we can observe something akin to the self-shadowing phenomena when calculating ray traced shadows.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Ooops, not exactly the result we were hoping for! What’s going on here? The
problem is that because of floating point inaccuracies, our final coordinates
that are supposed to be 1.0 will sometimes end up being a bit less than that,
say 0.999999994, and in the final casting to int step they will become
0 instead of 1. To fix this, we’ll need to nudge the points a tiny bit
outwards by scaling them up by a multiplicative epsilon value. The good news
is that this bias value doesn’t have to be terribly accurate; we’re going to
truncate the decimals away anyway. With this fix in place, we’ll get the
correct results:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-22/boxes-ok.png&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-10-22/boxes-ok.png&quot; alt=&quot;Figure 3 &amp;mdash; Boxes rendered with our box normal method; this time applying the bias multiplier. No weird artefacts can be observed, everything is looking good.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; text-align: center;&quot;&gt;Figure 3 &amp;mdash; Boxes rendered with our box normal method; this time applying the bias multiplier. No weird artefacts can be observed, everything is looking good.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;correctness-vs-real-life&quot;&gt;Correctness vs real life&lt;/h2&gt;

&lt;p&gt;As I explained above, although this fast normal calculation method can be
considered incorrect by the mathematician types (and perhaps it is, I don’t
know for sure), it seems to work perfectly fine for practical purposes. At
least, I couldn’t spot any unwanted artefacts on my test renders, and
theoretically, there’s very little chance to run into those diagonal normals,
and even then, their contribution to the final image would be minimal.&lt;/p&gt;

&lt;p&gt;In parting, here is a more complex scene to prove my point.  If anyone is
aware of a situation where this algorithm could cause problems, I am
interested to hear about it though!&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-22/cube.png&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-10-22/cube.png&quot; alt=&quot;&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; text-align: center;&quot;&gt;Figure 4 &amp;mdash; A cube made up of 64 smaller cubes. Even with our slightly &amp;ldquo;incorrect&amp;rdquo; normal calculation method, no weird artifacts can be observed whatsoever.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:intersect&quot;&gt;
      &lt;p&gt;Transforming the &lt;em&gt;object to world space&lt;/em&gt; with the object-to-world matrix and intersecting it with the world space ray is mathematically equivalent to transforming the &lt;em&gt;ray to object space&lt;/em&gt; with the world-to-object matrix (which is the simple matrix inverse of the object-to-world matrix) and doing the intersection there. I’m saying “mathematically” because due to floating point inaccuracies the two methods won’t yield exactly identical results. But the ray-to-object-space way actually keeps the relative error smaller and more uniform—as long as the object space coordinates have similar scale and are centred around the origin. &lt;a href=&quot;#fnref:intersect&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Sat, 22 Oct 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/10/22/the-nim-raytracer-project-part-4-calculating-box-normals/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/10/22/the-nim-raytracer-project-part-4-calculating-box-normals/</guid>
            </item>
        
            <item>
                <title>The Nim Ray Tracer Project &amp;ndash; Part 3: Lighting &amp; Vector Maths</title>
                <description>&lt;p class=&quot;intro&quot;&gt;[Listening &lt;em&gt;Esoterica&lt;/em&gt; from &lt;em&gt;Dan Pound&lt;/em&gt;. Very reminiscent of the Steve Roach type of tribal/electronic ambient, which is always a good thing in my book. Parts 1, 2, 6 &amp;amp; 7 are my personal highlights.]&lt;/p&gt;

&lt;p&gt;Ok, so last time I ended my post with the cliffhanger that I’m going to show
some actual Nim code in the next episode, which is this. Well, I’ll never
make foolish promises like that again, I swear! Now I need to come up with
some good excuses why we’re gonna do something slightly different instead…&lt;/p&gt;

&lt;p&gt;But seriously, I don’t think there’s much point in dissecting my code line by
line here, it would be just a colossal waste of time for everyone involved and
the codebase is in constant flux anyway. Anyone who’s interested can take
a look at the code in the &lt;a href=&quot;https://github.com/johnnovak/nim-raytracer&quot;&gt;GitHub
repository&lt;/a&gt;. What we’ll do instead
from here on is discuss some of my more interesting observations about ray
tracing on a higher level and maybe present the occasional original trick or
idea I managed to come up with.&lt;/p&gt;

&lt;h2 id=&quot;idealised-light-sources&quot;&gt;Idealised light sources&lt;/h2&gt;

&lt;p&gt;The teaser image at the end of the last post used a very simple shading
mechanism called &lt;strong&gt;facing ratio shading&lt;/strong&gt; for the spheres. As the name
implies, that just relies on the angle between the ray direction and the
surface normal at the ray hit location. This looks really basic, although it
still might come in handy sometimes for debugging.&lt;/p&gt;

&lt;p&gt;A more useful shading method is the so called &lt;strong&gt;diffuse&lt;/strong&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambertian_reflectance&quot;&gt;Lambertian
shading&lt;/a&gt; that simulates
how diffusely reflecting, or matte surfaces behave in real life. Realistic
shaders require light sources though, so the next thing to implement is some
sort of lighting. We’re doing ray tracing kindergarten here, so the first
light types to implement will be idealised &lt;strong&gt;directional&lt;/strong&gt; and &lt;strong&gt;point
lights&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Directional lights&lt;/strong&gt; (or &lt;strong&gt;distant lights&lt;/strong&gt;) are light sources that are
infinitely far away, hence they only have direction but no position, and most
importantly, no falloff.  Light sources of this kind are therefore ideal for
simulating the sun or other celestial light emitting objects that are “very
far away”. Shadows cast by directional lights are always parallel. This is how
the example scene from the previous post looks like when illuminated by two
directional lights:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-15/spheres-distantlights.png&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-10-15/spheres-distantlights.png&quot; alt=&quot;Figure 1 &amp;mdash; Implicit diffuse spheres, pixels on screen, 1200 x 800, John Novak (1979&amp;ndash;?).&amp;lt;br&amp;gt;Two distant lights have been used: a slightly warm coloured key light from the right and an even warmer but much fainter fill light from the left. The purpose of the fill light is to soften the shadows, just as in photography (also known as The Poor Man's Indirect Lighting&amp;trade;).&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 1 &amp;mdash; Implicit diffuse spheres, pixels on screen, 1200 x 800, John Novak (1979&amp;ndash;?).&lt;br /&gt;Two distant lights have been used: a slightly warm coloured key light from the right and an even warmer but much fainter fill light from the left. The purpose of the fill light is to soften the shadows, just as in photography (also known as The Poor Man's Indirect Lighting&amp;trade;).&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Point lights&lt;/strong&gt; are idealised versions of light sources that are relatively
small in size and emit light in all directions, therefore they only have
position but no direction. From this follows that point lights cast radial
shadows. In contrast with directional lights, point lights do exhibit falloff
(light attenuation), which follows the well-known &lt;a href=&quot;https://en.wikipedia.org/wiki/Inverse-square_law&quot;&gt;inverse-square
law&lt;/a&gt;. Good examples of point
lights are light bulbs, LEDs or the candlelight.  Of course, in real life
these light sources do have an actual measurable area, but we’re not
simulating that (yet). Note how drastically different the exact same scene
looks like when illuminated by a single point light:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-15/spheres-pointlight.png&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-10-15/spheres-pointlight.png&quot; alt=&quot;Figure 2 &amp;mdash; The exact same scene from Figure 1 illuminated by a single point light positioned roughly above the cyan coloured sphere. The light falloff is clearly visible; further away objects appear darker and the infinite ground plane fades to black in the distance. Because there are no other light sources present, shadowed areas are completely black. Also note that the shadow are radial, not parallel like in Figure 1.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 2 &amp;mdash; The exact same scene from Figure 1 illuminated by a single point light positioned roughly above the cyan coloured sphere. The light falloff is clearly visible; further away objects appear darker and the infinite ground plane fades to black in the distance. Because there are no other light sources present, shadowed areas are completely black. Also note that the shadow are radial, not parallel like in Figure 1.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Again, all this shading stuff in explained in great detail in the
&lt;a href=&quot;http://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading&quot;&gt;shading
lesson&lt;/a&gt;
at &lt;a href=&quot;http://www.scratchapixel.com/&quot;&gt;Scratchapixel&lt;/a&gt;, so refer to that excellent
article series if you’re interested in the technical details.&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;It is very important to note that lighting must always be calculated in
&lt;strong&gt;linear space&lt;/strong&gt; in a physically-based renderer.  That’s how light behaves in
the real world; to calculate the effects of multiple light sources on a given
surface point, we just need to calculate their contribution one light at
a time and then simply sum the results. What this means is that the data in
our internal float framebuffer represents linear light intensities that we
need to apply sRGB conversion to (a fancy way of doing gamma-encoding) if we
want to write it to a typical 8-bit per channel bitmap image file. If you are
unsure about what all this means, I highly recommend checking out &lt;a href=&quot;/2016/09/21/what-every-coder-should-know-about-gamma/&quot;&gt;my post on
gamma&lt;/a&gt; that should
hopefully clear things up.&lt;/p&gt;

&lt;h2 id=&quot;direct-vs-indirect-illumination&quot;&gt;Direct vs indirect illumination&lt;/h2&gt;

&lt;p&gt;What we’ve implemented so far is pretty much a basic classic ray tracer, or
a path tracer, to be more exact, which works like this from a high-level
perspective:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Primary rays are shot from the aperture of an idealised pinhole camera (a
point) through the middle of the pixels on the image plane into the scene.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If a ray intersects with an object, we shoot a secondary shadow ray from
the point of intersection (hit point) towards the light source (which are
idealised too, as explained above).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If the path of the shadow ray is not obstructed by any other objects as it
travels toward the light source, we calculate the light intensity reflected
towards the view direction at the hit point with some shading algorithm,
otherwise we just set it to black (because the point is in shadow). Due to
the additive nature of light, handling multiple light sources is very
straightforward; just repeat steps 2 &amp;amp; 3 for all lights and then sum the
results.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The astute reader may have observed that there’s lots of simplification going
on here. For a start, real world cameras and light sources are not just simple
idealised points in 3D space, and objects are not just illuminated by the
light sources alone (&lt;strong&gt;direct illumination&lt;/strong&gt;), but also by light bounced off
of other objects in the scene (&lt;strong&gt;indirect illumination&lt;/strong&gt;). With our current
model of reality, we can only render hard edged shadows and no indirect
lighting. Additionally, partly because of the lack of indirect illumination in
our renderer, these shadows would appear completely black.  This can be more
or less mitigated by some fill light tricks that harken back to the old days
of ray tracing when global illumination methods weren’t computationally
practical yet. For example, if there’s a green coloured wall to the left of an
object, then put some lights on the wall that emit a faint green light to the
right to approximate the indirect light rays reflected by the wall. This is
far from perfect for many reasons; on the example image below I used two
directional lights and a single point light as an attempt to produce
a somewhat even lighting in the shadow areas, but, as it can be seen, this
hasn’t completely eliminated the black shadows.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-15/complex-scene-3lights.png&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-10-15/complex-scene-3lights.png&quot; alt=&quot;Figure 3 &amp;mdash; Gray objects illuminated by two distant lights and one point light. Two lights have an orangeish cast to them, hence the yellowish appearance of the final image. Note how just three idealised lights are not enough to evenly illuminate more complex geometries if only direct illumination is used.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 3 &amp;mdash; Gray objects illuminated by two distant lights and one point light. Two lights have an orangeish cast to them, hence the yellowish appearance of the final image. Note how just three idealised lights are not enough to evenly illuminate more complex geometries if only direct illumination is used.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-10-15/complex-scene-layers.png&quot; data-width=&quot;1860&quot; data-height=&quot;400&quot;&gt;
        &lt;img src=&quot;/files/2016-10-15/complex-scene-layers.png&quot; alt=&quot;Figure 4 &amp;mdash; The contribution of each individual light to the final image (click to enlarge). From left to right: the main distant light, a secondary distant light used as a fill light, and a point light to give the image a more interesting look. Note that a single idealised light is not enough to evenly illuminate the scene and multiple lights are needed to lighten the black shadows.&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 4 &amp;mdash; The contribution of each individual light to the final image (click to enlarge). From left to right: the main distant light, a secondary distant light used as a fill light, and a point light to give the image a more interesting look. Note that a single idealised light is not enough to evenly illuminate the scene and multiple lights are needed to lighten the black shadows.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;It’s easy to see how the number of lights can easily skyrocket using this
approach, and in fact 3D artist have been known to use as many as 40-60 lights
or more per scene to achieve realistic looking lighting without global
illumination. As for the hard shadows, there’s no workaround for that at our
disposal at the moment—soft shadows will have to wait until we are ready to
tackle area lights.&lt;/p&gt;

&lt;h2 id=&quot;vector-maths-addendum&quot;&gt;Vector maths (addendum)&lt;/h2&gt;

&lt;p&gt;Before we finish for today, here’s some additional remarks regarding the
vector maths stuff we discussed previously. I’m using the
&lt;a href=&quot;https://github.com/stavenko/nim-glm&quot;&gt;nim-glm&lt;/a&gt; library in my ray tracer, which
is a port of &lt;a href=&quot;http://glm.g-truc.net/0.9.8/index.html&quot;&gt;GLM&lt;/a&gt; (Open&lt;strong&gt;GL&lt;/strong&gt;
&lt;strong&gt;M&lt;/strong&gt;athematics), which is a maths library based on the
&lt;a href=&quot;https://www.opengl.org/documentation/glsl/&quot;&gt;GLSL&lt;/a&gt; standard. A quick look into
the nim-glm sources reveals that the library uses &lt;a href=&quot;https://en.wikipedia.org/wiki/Row-major_order&quot;&gt;row-major
order&lt;/a&gt; storage internally:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;type Vec&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*[T] = distinct array[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, T]&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;type Mat&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*[T] = distinct array[&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, Vec&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[T]]&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We don’t actually need to know about this as long as we’re manipulating the
underlying data structures through the library, but it’s good to be aware of
it.&lt;/p&gt;

&lt;p&gt;(If you’re confused now and think that row/column-major storage ordering has
&lt;em&gt;anything&lt;/em&gt; to do with coordinate system handedness or column versus row vector
notation, &lt;a href=&quot;https://fgiesen.wordpress.com/2012/02/12/row-major-vs-column-major-row-vectors-vs-column-vectors/&quot;&gt;this
explanation&lt;/a&gt;
should set you straight.)&lt;/p&gt;

&lt;p&gt;Because we’re using column vector notation, which is the standard in
mathematics, OpenGL and pbrt, we need to do a matrix-by-vector multiplication
to transform a vector $v↖{→}$ by a matrix $\bo M$:&lt;/p&gt;

&lt;p&gt;$$ v_t↖{→} = \bo M v↖{→} $$&lt;/p&gt;

&lt;section class=&quot;warning&quot;&gt;
  &lt;p&gt;Be aware that vector-by-matrix multiplication is also defined in GLSL but
means something completely different (see section 5.11 of the
&lt;a href=&quot;https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf&quot;&gt;GLSL&lt;/a&gt;
specification):&lt;/p&gt;

  &lt;pre&gt;
vec3 v, u;
mat3 m;
u = v * m;

is equivalent to

u.x = dot(v, m[0]); // m[0] is the left column of m
u.y = dot(v, m[1]); // dot(a,b) is the inner (dot) product of a and b
u.z = dot(v, m[2]);
&lt;/pre&gt;
&lt;/section&gt;

&lt;p&gt;Also, the transforms have to be read “backwards”, e.g. the vector &lt;code&gt;v&lt;/code&gt; below
will be translated by 5 units along the z-axis first, then rotated by 60
degrees around the y-axis, and finally translated by -30 units along the
x-axis:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mat4x4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y_AXIS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;degToRad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;60.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;translate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;code&gt;vec&lt;/code&gt; and the constant &lt;code&gt;Y_AXIS&lt;/code&gt; are just some convenience stuff.
We’re using &lt;a href=&quot;https://en.wikipedia.org/wiki/Homogeneous_coordinates#Use_in_computer_graphics&quot;&gt;homogeneous
coordinates&lt;/a&gt;
, so a &lt;code&gt;Vec4[float]&lt;/code&gt; can denote both points and vectors.  Points must have
their 4th &lt;em&gt;w&lt;/em&gt; component always set to 1.0 (otherwise translation would not
work), and vectors to 0.0 (translation is undefined for vectors).  The
following definitions help with the construction of points and vectors and the
conversion of one type into the other:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X_AXIS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_AXIS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z_AXIS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Storing the &lt;em&gt;w&lt;/em&gt; component is convenient because we don’t need to constantly
add it to the vector when transforming it by a 4x4 matrix. Some people would
introduce distinct point and vector types, but I don’t think that’s worth the
trouble; it would just complicate the code too much for dubious benefits.&lt;/p&gt;

&lt;p&gt;Finally, the following checks can be useful when debugging with asserts (these
could probably be improved by using an epsilon for the equality checks):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nimrod&quot; data-lang=&quot;nimrod&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vec4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, looks like in the end we &lt;em&gt;did&lt;/em&gt; inspect some Nim code, after all! :)&lt;/p&gt;

&lt;hr /&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading&quot;&gt;Scratchapixel – Introduction to Shading&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://fgiesen.wordpress.com/2012/02/12/row-major-vs-column-major-row-vectors-vs-column-vectors/&quot;&gt;The ryg blog – Row major vs. column major, row vectors vs. column vectors&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Row-major_order&quot;&gt;Wikipedia – Row-major order&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;/section&gt;
</description>
                <pubDate>Sat, 15 Oct 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/10/15/the-nim-raytracer-project-part-3-lighting-and-vector-maths/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/10/15/the-nim-raytracer-project-part-3-lighting-and-vector-maths/</guid>
            </item>
        
            <item>
                <title>What every coder should know about gamma</title>
                <description>&lt;h2 id=&quot;a-short-quiz&quot;&gt;A short quiz&lt;/h2&gt;

&lt;p&gt;If you have ever written, or are planning to write, &lt;em&gt;any kind of code&lt;/em&gt; that
deals with image processing, you should complete the below quiz. If you have answered
one or more questions with a yes, there’s a high chance that your code is
doing the wrong thing and will produce incorrect results. This might not be
immediately obvious to you because these issues can be subtle and they’re
easier to spot in some problem domains than in others.&lt;/p&gt;

&lt;p&gt;So here’s the quiz:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I don’t know what gamma correction is (duh!)&lt;/li&gt;
  &lt;li&gt;Gamma is a relic from the CRT display era; now that almost everyone uses
LCDs, it’s safe to ignore it.&lt;/li&gt;
  &lt;li&gt;Gamma is only relevant for graphics professionals working in the print
industry where accurate colour reproduction is of great
importance—for general image processing, it’s safe to ignore it.&lt;/li&gt;
  &lt;li&gt;I’m a game developer, I don’t need to know about gamma.&lt;/li&gt;
  &lt;li&gt;The graphics libraries of my operating system handle gamma correctly.&lt;sup id=&quot;fnref:osgamma&quot;&gt;&lt;a href=&quot;#fn:osgamma&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;The popular graphics library &lt;em&gt;&amp;lt;insert name here&amp;gt;&lt;/em&gt; I’m using handles gamma correctly.&lt;/li&gt;
  &lt;li&gt;Pixels with RGB values of (128, 128, 128) emit about half as much light as
pixels with RGB values of (255, 255, 255).&lt;/li&gt;
  &lt;li&gt;It is okay to just load pixel data from a popular image format (JPEG, PNG,
GIF etc.) into a buffer using some random library and run image processing
algorithms on the raw data directly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t feel bad if you have answered most with a yes! I would have given
a yes to most of these questions a week ago myself too.  Somehow, the topic
of gamma is just under most computer users’ radar (including programmers
writing commercial graphics software!), to the extent that most graphics
libraries, image viewers, photo editors and drawing software of today still
don’t get gamma right and produce incorrect results.&lt;/p&gt;

&lt;p&gt;So keep on reading, and by the end of this article you’ll be more
knowledgeable about gamma than the vast majority of programmers!&lt;/p&gt;

&lt;h2 id=&quot;the-arcane-art-of-gamma-correctness&quot;&gt;The arcane art of gamma-correctness&lt;/h2&gt;

&lt;p&gt;Given that vision is arguably the most important sensory input channel for
human-computer interaction, it is quite surprising that gamma correction is
one of the least talked about subjects among programmers and it’s mentioned in
technical literature rather infrequently, &lt;em&gt;including&lt;/em&gt; computer graphics texts.
The fact that most computer graphics textbooks don’t explicitly mention the
importance of correct gamma handling, or discuss it in practical terms, does
not help matters at all (my &lt;a href=&quot;http://sirkan.iit.bme.hu/~szirmay/szamgraf.html&quot;&gt;CG textbook from
uni&lt;/a&gt; falls squarely into this
category, I’ve just checked). Some books mention gamma correction in passing
in somewhat vague and abstract terms, but then provide neither concrete
real-world examples on how to do it properly, nor explain what the
implications of not doing it properly are, nor show image examples of
incorrect gamma handling.&lt;/p&gt;

&lt;p&gt;I came across the need for correct gamma handling during writing my &lt;a href=&quot;/tag/ray%20tracing/&quot;&gt;ray
tracer&lt;/a&gt; and I had to admit that my understanding of the
topic was rather superficial and incomplete. So I had spent a few days reading
up on it online, but it turned out that many articles about gamma are not much
help either, as many of them are too abstract and confusing, some contain too
many interesting but otherwise irrelevant details, and then some others lack
image examples or are just simply incorrect or hard to understand. Gamma is
not a terribly difficult concept to begin with, but for some mysterious reason
it’s not that trivial to find articles on it that are correct, complete and
explain the topic in a clear language.&lt;/p&gt;

&lt;h2 id=&quot;what-is-gamma-and-why-do-we-need-it&quot;&gt;What is gamma and why do we need it?&lt;/h2&gt;

&lt;p&gt;Alright, so this is my attempt to offer a comprehensive explanation of gamma,
focusing just on the most important aspects and assuming no prior knowledge of
it.&lt;/p&gt;

&lt;p&gt;The image examples in this article assume that you are viewing this web page in
a modern browser on a computer monitor (CRT or LCD, doesn’t matter). Tablets
and phones are generally quite inaccurate compared to monitors, so try to
avoid those. You should be viewing the images in a dimly lit room, so no
direct lights or flare on your screen please.&lt;/p&gt;

&lt;h3 id=&quot;light-emission-vs-perceptual-brightness&quot;&gt;Light emission vs perceptual brightness&lt;/h3&gt;

&lt;p&gt;Believe it or not, the difference of &lt;strong&gt;light energy emission&lt;/strong&gt; between any two
neighbouring vertical bars in the below image is a &lt;em&gt;constant&lt;/em&gt;. In other words,
the amount of light energy emitted by your screen increases by a &lt;em&gt;constant
amount&lt;/em&gt; from bar to bar, left to right.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/linear-ramp32.png&quot; alt=&quot;Figure 1 &amp;mdash; Evenly-spaced greyscale bars in terms of emitted light intensity&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 1 &amp;mdash; Evenly-spaced greyscale bars in terms of emitted light intensity (&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gammaramp.nim&quot;&gt;Nim source code&lt;/a&gt;)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Now consider the following image:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/gamma-ramp32.png&quot; alt=&quot;Figure 2 &amp;mdash; Evenly-spaced greyscale bars in terms of perceptual light intensity&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 2 &amp;mdash; Evenly-spaced greyscale bars in terms of perceptual light intensity (&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gammaramp.nim&quot;&gt;Nim source code&lt;/a&gt;)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;On which image does the gradation appear more even? It’s the second one! But
why is that so? We have just established that in the first image the bars are
evenly (&lt;em&gt;linearly&lt;/em&gt;) spaced in terms of emitted light intensity between the
darkest black and brightest white your monitor is capable of reproducing. But
why don’t we see that as a nice even gradation from black to white then? And
what is being displayed on the second image that we &lt;em&gt;perceive&lt;/em&gt; as a linear
gradation?&lt;/p&gt;

&lt;p&gt;The answer lies in the response of the human eye to light intensity, which is
&lt;em&gt;non-linear&lt;/em&gt;. One the first image, the &lt;strong&gt;difference&lt;/strong&gt; between the nominal light
intensity of any two neighbouring bars is constant:&lt;/p&gt;

&lt;p&gt;$$\Δ_{\linear} = I_n-I_{n-1}$$&lt;/p&gt;

&lt;p&gt;On the second image, however, this difference is not constant but changes from
bar to bar; it follows a power law relationship, to be exact. All human
sensory perception follows a similar &lt;a href=&quot;https://en.wikipedia.org/wiki/Stevens'_power_law&quot;&gt;power law
relationship&lt;/a&gt; in terms of
the magnitude of stimulus and its perceived intensity.&lt;/p&gt;

&lt;p class=&quot;important&quot;&gt;Because of this, we say that there is a &lt;strong&gt;power law relationship&lt;/strong&gt; between
&lt;strong&gt;nominal physical light intensity&lt;/strong&gt; and &lt;strong&gt;perceptual brightness&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;physical-vs-perceptual-linearity&quot;&gt;Physical vs perceptual linearity&lt;/h3&gt;

&lt;p&gt;Let’s say we wanted to store a representation of the following real-world
object as an image file on the computer (let’s pretend for a moment
that perfect greyscale gradients exist in the real world, okay?) Here’s how
the “real world object” looks like:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/linear-ramp.png&quot; alt=&quot;Figure 3 &amp;mdash; Ideal smooth greyscale ramp&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 3 &amp;mdash; Ideal smooth greyscale ramp (&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gammaramp.nim&quot;&gt;Nim source code&lt;/a&gt;)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Now, let’s pretend that we can only store 5-bit greyscale images on this
particular computer system, which gives us 32 distinct shades of grey ranging
from absolute black to absolute white. Also, on this computer, greyscale
values are &lt;em&gt;proportional&lt;/em&gt; with their corresponding physical light intensities,
which will result in a 32-element greyscale as shown on Figure 1. We can say
that this greyscale is &lt;em&gt;linear&lt;/em&gt; in terms of &lt;em&gt;light emission&lt;/em&gt; between
successive values.&lt;/p&gt;

&lt;p&gt;If we encoded our smooth gradient using only these 32 grey values, we would get
something like this (let’s just ignore dither for now to keep things simple):&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/linear-ramp32-perceptual.png&quot; alt=&quot;Figure 4 &amp;mdash; Ideal smooth greyscale ramp represented with 32 physically-linear greyscale values&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 4 &amp;mdash; Ideal smooth greyscale ramp represented with 32 physically-linear greyscale values (&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gammaramp.nim&quot;&gt;Nim source code&lt;/a&gt;)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Well, the transitions are rather abrupt, especially on the left side, because
we only had 32 grey values to work with. If we squint a little, it’s easy to
convince ourselves that this is a more or less “accurate” representation of
the smooth gradient, as far as our limited bit-depth allows it. But note how
the steps are much larger on the left side than on the right—this is because
we are using a greyscale that is &lt;em&gt;linear&lt;/em&gt; in terms of &lt;em&gt;emitted light
intensity&lt;/em&gt;, but as we have mentioned before, our eyes don’t perceive light
intensity in a linear way!&lt;/p&gt;

&lt;p&gt;This observation has some interesting implications. The error between the
original and the 5-bit encoded version is uneven across the image; it’s much
larger for dark values than for light ones. In other words, we are losing
representational precision for dark values and are using relatively too much
precision for lighter shades.  Clearly, we’d be better off choosing
a different set of 32 greys for our limited palette of shades that would make
this error evenly distributed across the whole range, so both dark and light
shades would be represented with the same precision. If we encoded our
original image with such a greyscale that is &lt;em&gt;perceptually linear&lt;/em&gt;, but
consequently &lt;em&gt;non-linear&lt;/em&gt; in terms of emitted light intensity, and that
non-linearity would match that of the human vision, we’d get the exact same
greyscale image we have already seen in Figure 2:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/gamma-ramp32.png&quot; alt=&quot;Figure 5 &amp;mdash; Ideal smooth greyscale represented with 32 perceptually-linear greyscale values&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;Figure 5 &amp;mdash; Ideal smooth greyscale represented with 32 perceptually-linear greyscale values (&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gammaramp.nim&quot;&gt;Nim source code&lt;/a&gt;)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p class=&quot;important&quot;&gt;The non-linearity we’re talking about here is the &lt;strong&gt;power law&lt;/strong&gt; relationship
we mentioned before, and the non-linear transformation we need to apply to our
&lt;em&gt;physically linear&lt;/em&gt; greyscale values to transform them into &lt;em&gt;perceptually
linear&lt;/em&gt; values is called &lt;strong&gt;gamma correction&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;efficient-image-encoding&quot;&gt;Efficient image encoding&lt;/h3&gt;

&lt;p&gt;Why is the all the above important? Colour data in so-called “true colour” or
“24-bit” bitmap images is stored as three 8-bit integers per pixel.  With
8 bits, 256 distinct intensity levels can be represented, and if the spacing
of these levels were physically linear, we would be losing a lot of precision
on dark shades while being unnecessarily precise on light shades (relatively
speaking), as shown above.&lt;/p&gt;

&lt;p&gt;Clearly, this is not ideal. One solution would be to simply keep using the
physically linear scale and increase the bit depth per channel to 16 (or
more).  This would double the storage requirements (or worse), which was not
an option when most common image formats were invented. Therefore, a different
approach was taken. The idea was to let the 256 distinct levels represent
intensity values on a perceptually linear scale instead, in which case the
vast majority of images could be adequately represented on just 8 bits per
colour channel.&lt;/p&gt;

&lt;p class=&quot;important&quot;&gt;The transformation used to represent the &lt;em&gt;physically linear&lt;/em&gt; intensity data
either generated synthetically via an algorithm or captured by a linear device
(such as a CMOS of a digital camera or a scanner) with the discrete values of
the &lt;em&gt;perceptually linear&lt;/em&gt; scale is called &lt;strong&gt;gamma encoding&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The 24-bit &lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_model#Video_framebuffer&quot;&gt;RGB colour
model&lt;/a&gt;
(RGB24) used on virtually all consumer level electronic devices uses 8-bit
&lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_model#Nonlinearity&quot;&gt;gamma encoded
values&lt;/a&gt; per
channel to represent light intensities. If you recall what we discussed
earlier, this means that pixels with RGB(128, 128, 128) will &lt;em&gt;not&lt;/em&gt; emit
approximately 50% the light energy of pixels with RGB(255, 255, 255), but only
about 22%! That makes perfect sense! Because of the non-linear nature of human
vision, a light source needs to be attenuated to about 22% of its original
light intensity to appear half as bright to humans.  RGB(128, 128, 128)
&lt;em&gt;appears&lt;/em&gt; to be half as bright as RGB(255, 255, 255) to us! If you find this
confusing, reflect a bit on it because it’s crucial to have a solid
understanding of what has been discussed so far (trust me, it will only get
more confusing).&lt;/p&gt;

&lt;p&gt;Of course, gamma encoding is always done with the assumption that the image is
ultimately meant to be viewed by humans on computer screens. In some way, you
can think of it as a lossy MP3 like compression but for images. For other
purposes (e.g. scientific analysis or images meant for further
post-processing), using floats and sticking with the linear scale is often
a much better choice, as we’ll later see.&lt;/p&gt;

&lt;h3 id=&quot;the-gamma-transfer-function&quot;&gt;The gamma transfer function&lt;/h3&gt;

&lt;p&gt;The process of converting values from linear space to gamma space is called
&lt;strong&gt;gamma encoding&lt;/strong&gt; (or &lt;em&gt;gamma compression&lt;/em&gt;), and the reverse &lt;strong&gt;gamma
decoding&lt;/strong&gt; (or &lt;em&gt;gamma expansion&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The formulas for these two operations are very simple, we only need to use the
aforementioned power law function:&lt;/p&gt;

&lt;p&gt;$$\V_{\encoded} = \V_{\linear} ^ {1/\γ}$$&lt;/p&gt;

&lt;p&gt;$$\V_{\linear} = \V_{\encoded} ^ {\γ}$$&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;standard gamma (γ)&lt;/strong&gt; value to use in computer display systems is
&lt;strong&gt;2.2&lt;/strong&gt;. The main reason for this is because a gamma of 2.2 approximately
matches the power law sensitivity of human vision. The exact value that should
be used varies from person to person and also depends on the lighting
conditions and other factors, but a standard value had to be chosen and 2.2
was good enough. Don’t be too hung up on this.&lt;/p&gt;

&lt;p&gt;Now, a very important point that many texts fail to mention is that the input
values have to be in the 0 to 1 range and the output will be consequently
mapped to the same range too. From this follows the slightly counter-productive
fact that gamma values between 0 and 1 are used for &lt;strong&gt;encoding&lt;/strong&gt;
(compression) and greater than 1 for &lt;strong&gt;decoding&lt;/strong&gt; (expansion).
The below charts demonstrate the gamma transfer functions for encoding and
decoding, plus the trivial linear gamma (γ=1.0) case:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
  &lt;object data=&quot;/files/2016-09-21/gamma.svg&quot; type=&quot;image/svg+xml&quot; style=&quot;width: 100%&quot;&gt;&lt;/object&gt;
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 6 &amp;mdash; Gamma transfer functions (&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gammatransfer.nim&quot;&gt;Nim source code&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt; a) encoding gamma, or gamma compression (γ=1/2.2≈0.4545)&lt;br /&gt;b) linear gamma (γ=1.0)&lt;br /&gt;c) decoding gamma, or gamma expansion (γ=2.2)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;We have only seen greyscale examples so far, but there’s nothing special about
RGB images—we just simply need to encode or decode each colour channel
individually using the same method.&lt;/p&gt;

&lt;h3 id=&quot;gamma-vs-srgb&quot;&gt;Gamma vs sRGB&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;sRGB&lt;/a&gt; is a colour space that is the
de-facto standard for consumer electronic devices nowadays, including
monitors, digital cameras, scanners, printers and handheld devices. It is
also the standard colour space for images on the Internet.&lt;/p&gt;

&lt;p&gt;The sRGB specification defines what gamma to use for encoding and decoding
sRGB images (among other things such as colour gamut, but these are not
relevant to our current discussion). sRGB gamma is very close to a standard
gamma of 2.2, but it has a short linear segment in the very dark range to
avoid a slope of infinity at zero (this is more convenient in numeric
calculations). The formulas to convert from linear to sRGB and back can be
found
&lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB#Specification_of_the_transformation&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You don’t actually need to understand all these finer details; the important
thing to know is that in 99% of the cases you’ll want to use sRGB instead of
plain gamma. The reason for this is that all graphics cards have hardware sRGB
support since 2005 or so, so decoding and encoding is virtually for free most
of the time. The native colour space of your monitor is most likely sRGB
(unless it’s a professional monitor for graphics, photo or video work) so if
you just chuck an sRGB encoded pixel data into the framebuffer, the resulting
image will look correct on the screen (given the monitor is properly
calibrated). Popular image formats such as JPEG and PNG can store colour space
information, but very often images don’t contain such data, in which case
virtually all image viewers and browsers will interpret them as sRGB by
convention.&lt;/p&gt;

&lt;h3 id=&quot;gamma-calibration&quot;&gt;Gamma calibration&lt;/h3&gt;

&lt;p&gt;We have talked about gamma encoding and decoding so far, but what is &lt;strong&gt;gamma
calibration&lt;/strong&gt; then? I found this bit slightly confusing too, so let me clear
it up.&lt;/p&gt;

&lt;p&gt;As mentioned, 99% of all monitors today use the sRGB colour space natively,
but due to manufacturing inaccuracies most monitors would benefit from some
additional gamma calibration to achieve the best results. Now, if you never
calibrated your monitor, that doesn’t mean that it will not use gamma! That is
simply impossible, most CRT and LCD displays in the past and present have been
designed and manufactured to operate in sRGB.&lt;/p&gt;

&lt;p&gt;Think of gamma calibration as fine tuning. Your monitor will always operate in
sRGB, but by calibrating it (either in the video card driver or on the OS
level) the monitor’s gamma transfer curve will more closely match the ideal
gamma transfer function we discussed earlier. Also, years ago it was possible
to shoot yourself in the foot in various creative ways by applying multiple
gamma correction stages in the graphics pipeline (e.g. video card, OS and
application level), but fortunately this is handled more intelligently
nowadays. For example, on my Windows 7 box, if I turn on gamma calibration in
the NVIDIA Control Panel then the OS level calibration will be disabled and
vice versa.&lt;/p&gt;

&lt;h3 id=&quot;processing-gamma-encoded-images&quot;&gt;Processing gamma-encoded images&lt;/h3&gt;

&lt;p&gt;So, if virtually the whole world defaults to sRGB, what is exactly the
problem?  If our camera writes sRGB JPEG files, we can just decode the JPEG
data, copy it into the framebuffer of the graphics card and the image would be
displayed correctly on our sRGB LCD monitor (where “correctly” means it would
more or less accurately represent the photographed real-world scene).&lt;/p&gt;

&lt;p&gt;The problem will happen in the moment we start running any image processing
algorithms on our sRGB pixel buffer directly. Remember, gamma encoding is
a non-linear transformation and sRGB encoding is basically just a funky way of
doing gamma encoding of around γ=1/2.2. Virtually all image processing
algorithms you will find in any computer graphics text will assume pixel data
with  &lt;em&gt;linearly encoded light intensities&lt;/em&gt;, which means that feeding these
algorithms with sRGB encoded data will render the results subtly—or in
some cases quite obviously—wrong! This includes resizing, blurring,
compositing, interpolating between pixel values, antialiasing and so on, just
to name the most common operations!&lt;/p&gt;

&lt;h2 id=&quot;effects-of-gamma-incorrectness&quot;&gt;Effects of gamma-incorrectness&lt;/h2&gt;

&lt;p&gt;Alright, enough theory talk, show me how these errors actually look like!
That’s exactly what we’ll do in this section; we will examine the most common
scenarios when running image processing algorithms directly on sRGB data would
manifest in incorrect results. Apart from illustrative purposes, these
examples are also useful for spotting gamma-incorrect behaviour or bugs in
drawing programs and image processing libraries.&lt;/p&gt;

&lt;p&gt;It must be noted that I have chosen examples that clearly demonstrate the
problems with gamma-incorrectness. In most cases, the issues are the most
obvious when using vivid, saturated colours. With more muted colours, the
differences might be less noticeable or even negligible &lt;em&gt;in some cases&lt;/em&gt;.
However, the errors are always present, and image processing programs should work
correctly for all possible inputs, not just okayish for 65.23% of all possible
images… Also, in the area of physically based rendering gamma correctness is
an absolute must, as we’ll see.&lt;/p&gt;

&lt;h3 id=&quot;gradients&quot;&gt;Gradients&lt;/h3&gt;

&lt;p&gt;The image below shows the difference between gradients calculated in linear
(top gradient) and sRGB space (bottom gradient). Note how direct interpolation
on the sRGB values yields much darker and sometimes more saturated looking
images.&lt;/p&gt;

&lt;p&gt;Just going by the looks, one might prefer the look of the sRGB-space versions,
especially for the last two. However, that’s not how light would behave
in the real world (imagine two coloured light sources illuminating a white
wall; the colours would mix as in the linear-space case).&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/gradient.png&quot; alt=&quot;Figure 7 &amp;mdash; For each gradient-pair, the top gradient is a linear interpolation between two colours in linear space, then the result converted to sRGB (gamma-correct). The bottom gradients are the results of interpolating between the exact same colours but directly in sRGB space (gamma-incorrect)&quot; style=&quot;width: 80%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 80%; text-align: center;&quot;&gt;Figure 7 &amp;mdash; For each gradient-pair, the top gradient is a linear interpolation between two colours in linear space, then the result converted to sRGB (gamma-correct). The bottom gradients are the results of interpolating between the exact same colours but directly in sRGB space (gamma-incorrect)&lt;br /&gt;(&lt;a href=&quot;https://github.com/johnnovak/johnnovak.site/blob/master/blog/files/2016-09-21/src/gradient.nim&quot;&gt;Nim source code&lt;/a&gt;).&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Almost everybody does this the wrong way: CSS gradients and transitions are
wrong (see &lt;a href=&quot;https://lists.w3.org/Archives/Public/www-style/2012Jan/0607.html&quot;&gt;this
thread&lt;/a&gt; for
details), Photoshop is wrong (as of version CS6) and there’s not even an option
to fix it.&lt;/p&gt;

&lt;p&gt;Two drawing programs that got this (and gamma-correctness in general) right
are &lt;a href=&quot;https://krita.org/&quot;&gt;Krita&lt;/a&gt; and &lt;a href=&quot;http://www.pixelmator.com/&quot;&gt;Pixelmator&lt;/a&gt;.
SVG also &lt;a href=&quot;https://www.w3.org/TR/SVG/painting.html#ColorInterpolationProperties&quot;&gt;let’s the user to
specify&lt;/a&gt;
whether to use linear or sRGB-space interpolations for gradients, compositing
and animations.&lt;/p&gt;

&lt;h3 id=&quot;colour-blending&quot;&gt;Colour blending&lt;/h3&gt;

&lt;p&gt;Drawing with soft brushes in gamma-incorrect drawing programs can result in
weird darkish transition bands with certain vivid colour combinations.
This is really a variation of the gradient problem if you think about it (the
transition band of a soft brush is nothing else than a small gradient).&lt;/p&gt;

&lt;p&gt;Some random people claimed on the Adobe forums that by doing this Photoshop is
really mimicking how mixing paints would work in real life. Well, no, it
has nothing to do with that. It’s just the result of naive programming to work
directly on the sRGB pixel data and now we’re stuck with that as the default
legacy behaviour.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/color-blending.jpg&quot; alt=&quot;Figure 8 &amp;mdash; Effects of gamma-incorrect colour blending. On the left gamma-correct image, the option 'Blend RGB Colors Using Gamma 1.0' was enabled in Photoshop CS6, on the right it was disabled (that's the default gamma-incorrect legacy mode).&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 8 &amp;mdash; Effects of gamma-incorrect colour blending. On the left gamma-correct image, the option 'Blend RGB Colors Using Gamma 1.0' was enabled in Photoshop CS6, on the right it was disabled (that's the default gamma-incorrect legacy mode).&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;alpha-blending--compositing&quot;&gt;Alpha blending / compositing&lt;/h3&gt;

&lt;p&gt;As another variation on colour blending, let’s see how alpha blending holds
up. We’ll examine some coloured rectangles first. As expected, the
gamma-correct image on the left mimics how light would behave in real life,
while the sRGB space blending on the right exhibits some weird hue and
brightness shifts.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/opacity.png&quot; alt=&quot;Figure 9 &amp;mdash; Effects of gamma-incorrect alpha blending. For each vertical bar pair, the top one is drawn with 100% opacity and bottom one with 50%. The left image is the gamma-correct one. The test was done in Photoshop CS6, similarly to Figure 8.&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 9 &amp;mdash; Effects of gamma-incorrect alpha blending. For each vertical bar pair, the top one is drawn with 100% opacity and bottom one with 50%. The left image is the gamma-correct one. The test was done in Photoshop CS6, similarly to Figure 8.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;The appearance of false colours is also noticeable when blending two photos
together. On the gamma-correct image on the left, the skin tones and the reds
and yellows are preserved but faded into the bluish image in a natural way,
while on the right image there’s a noticeable overall greenish cast. Again,
this might be an effect you like, but it’s not how accurate alpha
compositing should work.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-09-21/blending.jpg&quot; data-width=&quot;1260&quot; data-height=&quot;862&quot;&gt;
        &lt;img src=&quot;/files/2016-09-21/blending.jpg&quot; alt=&quot;Figure 10 &amp;mdash; Effects of gamma-incorrectness when compositing photographic images (by yours truly). The two original images from the top row are laid on top of each other in the bottom row, with the blueish image on top having 60% opacity. The left image is the gamma-correct one. Tested with Photoshop CS6. (Click on the image to enlarge it to see the details better.)&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot;&quot;&gt;Figure 10 &amp;mdash; Effects of gamma-incorrectness when compositing photographic images (by &lt;a href=&quot;http://photo.johnnovak.net/&quot;&gt;yours truly&lt;/a&gt;). The two original images from the top row are laid on top of each other in the bottom row, with the blueish image on top having 60% opacity. The left image is the gamma-correct one. Tested with Photoshop CS6. (Click on the image to enlarge it to see the details better.)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;image-resizing&quot;&gt;Image resizing&lt;/h3&gt;

&lt;p&gt;These examples will only work if your browser doesn’t do any rescaling on the
images below. Also, note that screens of mobile devices are more inaccurate
with regards to gamma than regular monitors, so for best results try to view
this on a desktop computer.&lt;/p&gt;

&lt;p&gt;The image below contains a simple black and white checkerboard pixel pattern
(100% zoom on the left, 400% zoom on the right). The black pixels are
RGB(0,0,0), the minimum light intensity your monitor is capable of producing,
and the white ones RGB(255,255,255), which is the maximum intensity. Now, if
you squint a little, your eyes will blur (average) the light coming from the
image, so you will see a grey that’s halfway in intensity between absolute
black and white (therefore it’s referred to as &lt;strong&gt;50% grey&lt;/strong&gt;).&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/resize-large.png&quot; alt=&quot;Figure 11 &amp;mdash; Black and white checkerboard pixel pattern frequently used in simple gamma calibration programs. The averaged light emission of the area occupied by the pattern is equal to that of a solid 50% grey square. The right image shows the pattern at 400% magnification.&quot; style=&quot;width: 220px&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 80%; text-align: center;&quot;&gt;Figure 11 &amp;mdash; Black and white checkerboard pixel pattern frequently used in simple gamma calibration programs. The averaged light emission of the area occupied by the pattern is equal to that of a solid 50% grey square. The right image shows the pattern at 400% magnification.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;From this follows that if we resized the image by 50%, a similar averaging
process should happen, but now algorithmically on the pixel data. We expect
to get a solid rectangle filled with the same 50% grey that we saw when we
squinted.&lt;/p&gt;

&lt;p&gt;Let’s try it out! On the image below, &lt;em&gt;A&lt;/em&gt; is the checkerboard pattern, &lt;em&gt;B&lt;/em&gt; the
result of resizing the pattern by 50% directly in sRGB-space (using bicubic
interpolation), and &lt;em&gt;C&lt;/em&gt; the resizing it in linear space, then converted to
sRGB.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/resize.png&quot; alt=&quot;Figure 12 &amp;mdash; Effects of gamma-incorrect image resizing. &amp;lt;em&amp;gt;A&amp;lt;/em&amp;gt; is the pixel checkerboard pattern, &amp;lt;em&amp;gt;B &amp;lt;/em&amp;gt;the gamma-incorrect result of resizing the image in sRGB space (Photoshop CS6 in 8-bit RGB mode), and &amp;lt;em&amp;gt;C&amp;lt;/em&amp;gt; the gamma-correct result of converting the image to linear space before resizing, then back to sRGB at the end (Photoshop CS6 in 32-bit RGB mode).&quot; style=&quot;width: 316px&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 80%; text-align: center;&quot;&gt;Figure 12 &amp;mdash; Effects of gamma-incorrect image resizing. &lt;em&gt;A&lt;/em&gt; is the pixel checkerboard pattern, &lt;em&gt;B &lt;/em&gt;the gamma-incorrect result of resizing the image in sRGB space (Photoshop CS6 in 8-bit RGB mode), and &lt;em&gt;C&lt;/em&gt; the gamma-correct result of converting the image to linear space before resizing, then back to sRGB at the end (Photoshop CS6 in 32-bit RGB mode).&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;Unsurprisingly, &lt;em&gt;C&lt;/em&gt; gives the correct result, but the shade of grey might not
be an exact match for the blurred checkerboard pattern on your monitor if
it’s not properly gamma-calibrated. Even the math shows this clearly: a 50%
grey pixel that emits half as much light as a white pixel should have a RGB
value of around (186,186,186), gamma-encoded:&lt;/p&gt;

&lt;p&gt;$$0.5^{1\/2.2} ≈ 0.72974$$
$$0.72974·255 = 186$$&lt;/p&gt;

&lt;p&gt;(Don’t worry that on the image the 50% grey is RGB(187,187,187). That small
difference is because the image is sRGB-encoded, but I used the much simpler
gamma formula for my calculation here.)&lt;/p&gt;

&lt;p&gt;Gamma-incorrect resizing can also result in weird hue shifts on some images.
For more details, read &lt;a href=&quot;http://www.4p8.com/eric.brasseur/gamma.html&quot;&gt;Eric Brasseur’s excellent
article&lt;/a&gt; on the matter.&lt;/p&gt;

&lt;h3 id=&quot;antialiasing&quot;&gt;Antialiasing&lt;/h3&gt;

&lt;p&gt;I guess it’s no surprise at this point that antialiasing is no exception when
it comes to gamma-correctness. Antialiasing in γ=2.2 space results in overly
dark “smoothing pixels” (right image); the text appears too heavy, almost as
if it was bold. Running the algorithm in linear space produces much better
results (left image), although in this case the font looks a bit too thin.
Interestingly, Photoshop antialiases text using γ=1.42 by default, and this
indeed seems to yield the best looking results (middle image). The reason for
this is that most fonts have been designed for gamma-incorrect font
rasterizers, hence if you use linear space (correctly), then the fonts will
look thinner than they should.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/antialias.png&quot; alt=&quot;Figure 13 &amp;mdash; Effects of gamma-incorrectness on text antialiasing. The left image was rendered with the option 'Blend Text Colors Using Gamma' set to 1.0, the middle one with 1.45, and the right one with 2.2.&quot; style=&quot;width: 623px&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 623px;&quot;&gt;Figure 13 &amp;mdash; Effects of gamma-incorrectness on text antialiasing. The left image was rendered with the option 'Blend Text Colors Using Gamma' set to 1.0, the middle one with 1.45, and the right one with 2.2.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;physically-based-rendering&quot;&gt;Physically-based rendering&lt;/h3&gt;

&lt;p&gt;If there’s a single area where gamma-correctness is an absolute must, that’s
physically-based rendering (PBR). To obtain realistic looking results, gamma
should be handled correctly throughout the whole graphics pipeline. There’s
so many ways to screw this up, but these are the two most common ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Doing the calculations in linear space but failing to convert the final
image to sRGB and then “tweaking” various material and lighting parameters
to compensate.&lt;/li&gt;
  &lt;li&gt;Failing to convert sRGB texture images to linear space (or set the sRGB flag
when hardware acceleration is used).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two basic errors are then usually combined in various interesting ways,
but the end result would invariably fail to resemble a realistic looking scene
(e.g. quadratic light falloff will not appear quadratic anymore, highlights
will be overblown and will exhibit some weird hue and saturation shifts etc.)&lt;/p&gt;

&lt;p&gt;To demonstrate the first mistake using my own &lt;a href=&quot;/tag/ray%20tracing&quot;&gt;ray
tracer&lt;/a&gt;, the left image below shows a very simple but
otherwise quite natural looking image in terms of physical lighting accuracy.
This rendering took place in linear space and then the contents of the
framebuffer were converted to sRGB before writing it to disk.&lt;/p&gt;

&lt;p&gt;On the right image, however, this last conversion step was omitted and I tried
to tweak the light intensities in an attempt to match the overall brightness
of the gamma-correct image. Well, it’s quite apparent that this is not going
to work. Everything appears too contrasty and oversaturated, so we’d probably
need to desaturate all material colours a bit maybe use some more fill lights
to come closer to the look of the left image. But this is a losing battle; no
amount of tweaking will make the image correct in the physical sense, and even
if we got it to an acceptable level for one particular scene with a particular
lighting setup, any further changes to the scene would potentially necessitate
another round of tweaks to make the result look realistic again.  Even more
importantly, the material and lighting parameters we would need to choose
would be completely devoid of any physical meaning whatsoever; they’ll be just
a random set of numbers that happen to produce an OK looking image &lt;em&gt;for that
particular scene&lt;/em&gt;, and thus not transferable to other scenes or lighting
conditions. It’s a lot of wasted energy to work like that.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-09-21/badgamma.png&quot; data-width=&quot;1237&quot; data-height=&quot;400&quot;&gt;
        &lt;img src=&quot;/files/2016-09-21/badgamma.png&quot; alt=&quot;TODO&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 95%; text-align: center;&quot;&gt;Figure 14 &amp;mdash; Effects of gamma-incorrect rendering on diffuse spheres. The gamma-incorrect image on the right shows an unsuccesful attempt at matching the look of the gamma-correct one on the left by tweaking the light intensities alone.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;It’s also important to point out that incorrect gamma handling in 3D rendering
is one of the main culprits behind the “fake plasticky CGI look” in some
(mostly older) games. As illustrated on the image below, rendering realistic
looking human skin is almost impossible with a gamma-incorrect workflow; the
highlights will just never look right. This gave birth to questionable
practices such as compensating for the wrong highlights in the specular maps
with inverted hues and all sorts of other nastiness instead of fixing the
problem right at the source…&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-09-21/lineargammahead.png&quot; alt=&quot;TODO&quot; style=&quot;width: 90%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 90%; text-align: center;&quot;&gt;Figure 15 &amp;mdash; Effects of gamma-incorrect rendering on a human head. On the top, a real looking human head; on the bottom, a wax figure approximation.&lt;br /&gt;(Image from the &lt;a href=&quot;https://docs.unity3d.com/Manual/LinearLighting.html&quot;&gt;Unity3D manual&lt;/a&gt;.)&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This is pretty much all there is to gamma encoding and decoding.
Congratulations for making it so far, now you’re an officially certified
gamma-compliant developer! :)&lt;/p&gt;

&lt;p&gt;To recap, the only reason to use gamma encoding for digital images is because
it allows us to store images more efficiently on a limited bit-length. It
takes advantage of a characteristic of human vision that we perceive
brightness in a logarithmic way. Most image processing algorithms expect pixel
data with linearly encoded light intensities, therefore gamma-encoded images
need to be gamma-decoded (converted to linear space) first before we can run
these algorithms on them. Often the results need to be converted back to
gamma-space to store them on disk or to display them on graphics hardware that
expects gamma-encoded values (most consumer-level graphics hardware fall into
this category). The de-facto standard sRGB colourspace uses a gamma of
approximately 2.2. That’s the default colourspace for images on the Internet
and for most monitors, scanners and printers. When in doubt, just use sRGB.&lt;/p&gt;

&lt;p&gt;From the end-user perspective, keep in mind that most applications and
software libraries do not handle gamma correctly, therefore always make sure
to do extensive testing before adopting them into your workflow. For a proper
linear workflow, &lt;em&gt;all&lt;/em&gt; software used in the chain has to be 100%
gamma-correct.&lt;/p&gt;

&lt;p&gt;And if you’re a developer working on graphics software, please make sure
you’re doing the correct thing. Be gamma-correct and always explicitly state
your assumptions about the input and output colour spaces in the software’s
documentation.&lt;/p&gt;

&lt;p&gt;May all your lights be linear! :)&lt;/p&gt;

&lt;hr /&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;references--further-reading&quot;&gt;References &amp;amp; further reading&lt;/h2&gt;

  &lt;h3 id=&quot;general-gammasrgb-info&quot;&gt;General gamma/sRGB info&lt;/h3&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.poynton.com/GammaFAQ.html&quot;&gt;Charles Poynton – Gamma FAQ&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.cambridgeincolour.com/tutorials/gamma-correction.htm&quot;&gt;Cambridge in Colour – Understanding gamma correction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://gamedevdaily.io/the-srgb-learning-curve-773b7f68cf7a#.ssgyxju0h&quot;&gt;Tom Forsynth – The sRGB Learning Curve&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://ninedegreesbelow.com/photography/linear-gamma-blur-normal-blend.html&quot;&gt;Nine Degrees Below – Linear Gamma vs Higher Gamma RGB Color Spaces: Gaussian Blur and Normal Blend Mode&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.4p8.com/eric.brasseur/gamma.html&quot;&gt;Eric Brasseur – Gamma error in picture scaling&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Gamma_correction&quot;&gt;Wikipedia – Gamma correction&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SRGB&quot;&gt;Wikipedia – sRGB&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RGB_color_model&quot;&gt;Wikipedia – RGB color model&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-lighting--workflow-lwf&quot;&gt;Linear lighting &amp;amp; workflow (LWF)&lt;/h3&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;https://frictionalgames.blogspot.com/2013/11/tech-feature-linear-space-lighting.html&quot;&gt;In the Games of Madness – Tech Feature: Linear-space lighting&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://http.developer.nvidia.com/GPUGems3/gpugems3_ch24.html&quot;&gt;Larry Gritz, GPU Gems 3 – Chapter 24. The Importance of Being Linear&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.peachpit.com/articles/article.aspx?p=2165641&quot;&gt;Jeremy Birn – Top Ten Tips for More Convincing Lighting and Rendering&lt;/a&gt; – (Section 1. Use a Linear Workflow)&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/LinearLighting.html&quot;&gt;Unity Documentation – Linear Rendering&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://spitzak.github.io/conversion/index.html&quot;&gt;Bill Spitzak – High-speed Conversion of Floating Point Images to 8-bit&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://renderman.pixar.com/view/LinearWorkflow&quot;&gt;Renderman – Linear Workflow&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://greyscalegorilla.com/tutorials/what-is-linear-workflow-and-how-can-it-help-your-renders-look-better/&quot;&gt;Nick Campbell – What Is Linear Workflow and How Can It Help Your Renders Look Better?&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://blackhole12.blogspot.com.au/2011/12/great-mystery-of-linear-gradient.html&quot;&gt;Eric McClure – The Great Mystery of Linear Gradient Lighting&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bonus-stuff&quot;&gt;Bonus stuff&lt;/h3&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.rle.mit.edu/stir/documents/VarshneyS_Significance2013.pdf&quot;&gt;Lav R. Varshney, John Z. Sun – Why do we perceive logarithmically? [PDF]&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Stevens'_power_law&quot;&gt;Wikipedia – Stevens’ power law&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://userbase.kde.org/Krita/Manual/ColorManagement&quot;&gt;Krita Manual – Color management&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://ptgmedia.pearsoncmg.com/imprint_downloads/peachpit/peachpit/lightroom4/pdf_files/LightroomRGB_Space.pdf&quot;&gt;The Adobe Photoshop Lightroom Book – The Lightroom RGB space [PDF]&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.openexr.com/&quot;&gt;OpenEXR&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://cinematiccolor.com/&quot;&gt;Cinematic Color: Motion-Picture Color Management&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/section&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:osgamma&quot;&gt;
      &lt;p&gt;Only if your operating system is Mac OS X 10.6 or higher or Linux. &lt;a href=&quot;#fnref:osgamma&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Wed, 21 Sep 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/</guid>
            </item>
        
            <item>
                <title>Cross-platform GUI Toolkit Trainwreck, 2016 Edition</title>
                <description>&lt;p class=&quot;intro&quot;&gt;Ok, I’m not too sure in what direction this post will go, an informative
article, a rant, or both. Probably a bit of both, with an emphasis on the rant
part, given my current not-quite-positive emotional involvement with the
topic. Gentlemen (and gentlewomen), please fasten your seatbelts!&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;(UPDATE #1: It turned out to be a quite informative mega-post in the end, just
don’t give up reading after the first section…)&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;(UPDATE #2: There’s some very interesting alternative UI framework
recommendations in the comments that I haven’t discussed
in the article, so you might want to check those out as well…)&lt;/p&gt;

&lt;h2 id=&quot;buttons-and-pixels&quot;&gt;Buttons and pixels&lt;/h2&gt;

&lt;p&gt;In 2016, developing a program in entirety on one particular platform, for
example OS X, and then successfully compiling and running it on another, say
Windows, with zero or minimal modifications required is no longer an
utopistic dream. In fact, users of dynamic, interpreted or scripting languages
(however you like to call them today) have been enjoying the luxuries of easy
cross-platform development for many decades now; they won’t even raise an
eyebrow on such trivial matters. But even the lowly C and C++ plebs are able
to perform this feat with relative ease nowadays—at least, if they stuck
to their respective language standards religiously and turned their compiler
warnings up to nuclear-strength…&lt;/p&gt;

&lt;p&gt;Being able to use a single codebase for multi-platform applications is of
crucial importance. After all, who wants to maintain two or three (or more)
codebases that are mostly similar, but &lt;em&gt;not quite&lt;/em&gt;? I sure don’t. And then
there’s the convenience and flexibility factor too: you can happily develop on
your Linux VM on your desktop PC at home, then maybe fix some bugs on your
MacBook while sitting on the train, with the confidence that your program will
work flawlessly on Windows too. Not having to deal with platform differences
and idiosyncrasies takes a huge burden off of the developer’s shoulder that is
not to be underestimated.&lt;/p&gt;

&lt;p&gt;Some compiled languages, like &lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt;, give you such
cross-platform guarantees by design. This is all good, this is all well, this
is precisely how things should be. The world is such a wonderful place, after
all. Write once, run anywhere (and don’t go near the JVM). Excellent! The
universe is smiling at you. Infinity co creates karmic balance. Freedom
unfolds into intrinsic actions. Your consciousness manifests through quantum
reality. &lt;sup id=&quot;fnref:bullshit&quot;&gt;&lt;a href=&quot;#fn:bullshit&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Except for one little thing. &lt;strong&gt;You must not under any circumstance&lt;/strong&gt; try to
open a window (on the computer, I mean), attempt to change the colour of
a single pixel in it, or—god forbid!—fantasise about using native (or any
kind of, for the matter) GUI controls in a cross-platform and non-hair loss
inducing manner! If you disregarded my sage advice and foolishly ventured to
accomplish any of the above tasks, the bliss would be over in an instant and
you’d find yourself rudely transported back to the early days of computing,
where making anything just barely work &lt;em&gt;at all&lt;/em&gt; on different OSs would take
inordinate amounts of time and effort!&lt;/p&gt;

&lt;h2 id=&quot;solution-to-a-problem&quot;&gt;Solution to a problem&lt;/h2&gt;

&lt;p&gt;I’m not just talking in the abstract here, I am merely describing my trials
and tribulations when attempting to extend my &lt;a href=&quot;https://github.com/johnnovak/nim-raytracer&quot;&gt;ray
tracer&lt;/a&gt; I’m developing in Nim with
a very minimalistic GUI. My ambitions were fairly modest: I only wanted to
open a window and then split it into a canvas and a control area.  Onto the
canvas I would just blit some pixel data periodically and the control area
would contain some buttons and some static text (maybe a progress bar too if
I felt particularly bold and adventurous!). I wanted this fine piece of
software craftsmanship to work on Windows, Linux and OS X, without having to
write any platform specific code. And that’s it!&lt;/p&gt;

&lt;p&gt;So next step, let’s investigate what cross-platform libraries are available
for Nim!&lt;/p&gt;

&lt;h3 id=&quot;iup&quot;&gt;IUP&lt;/h3&gt;

&lt;p&gt;I was looking for something really minimal and I would have
perfectly been happy with native controls, so the &lt;a href=&quot;https://github.com/nim-lang/gtk2&quot;&gt;Nim
bindings&lt;/a&gt; to the &lt;a href=&quot;http://webserver2.tecgraf.puc-rio.br/iup/&quot;&gt;IUP
GUI&lt;/a&gt; library (a cross-platform
toolkit in C for creating GUI applications in Lua) looked very promising…
until I found out that it does not support OS X at all. Oh well.&lt;/p&gt;

&lt;h3 id=&quot;gtk2&quot;&gt;GTK2&lt;/h3&gt;

&lt;p&gt;The next obvious candidate was the &lt;a href=&quot;https://github.com/nim-lang/gtk2&quot;&gt;GTK2 bindings for
Nim&lt;/a&gt;. I am not a fan of GTK on Windows at
all, and especially not on OS X (despite the fact that I really love
&lt;a href=&quot;https://inkscape.org/&quot;&gt;Inkscape&lt;/a&gt; on Windows, but let’s just write that off as
an anomaly).  Anyway, why not give it shot, it doesn’t cost any money.  Well,
after having spent about half an hour foraging on the Internet for the GTK2
Windows binaries (because the official &lt;a href=&quot;http://www.gtk.org/&quot;&gt;GTK+ Project
website&lt;/a&gt; is of not much help at all in that regard, apart
from some &lt;a href=&quot;http://www.gtk.org/download/windows.php&quot;&gt;kinda vague instructions&lt;/a&gt;
on where to try to locate them), the poor directory containing my ~300K
executable got suddenly about &lt;strong&gt;20 megabytes bigger (!)&lt;/strong&gt; in the form of the
cheerful company of 10+ DLL files. The thing surely worked just fine (to the
extent that GTK2 is capable of doing so), but this is a very bad start already
as I wanted something small that can be statically linked. Adding 20 MB fat to
my cute little 300K renderer is an idea that I find quite obscene to be honest
(as in “obscenely obese”), so in short, no thanks.&lt;/p&gt;

&lt;p&gt;Executive summary: GTK2 + non-Linux platform = AVOID&lt;/p&gt;

&lt;p&gt;Some people might feel the urge to point out now that I’m way too picky, this
is merely a solution to a problem, it works, so I should just suck it up and
live with the &lt;strong&gt;over 60-fold increase of my total binary size!&lt;/strong&gt; Well, this is
a solution to a problem too:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-05-29/headphones.jpg&quot; alt=&quot;Solution to a problem...&quot; style=&quot;width: 70%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 70%;&quot;&gt;Warning: putting up with lots external dependency crap just to make things work somehow is a straight road to this to happen to you!&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;And with that move, I had practically exhausted all the readily available GUI
options for Nim. (Note that this is not a rant against Nim at all;
I absolutely love that language, (in fact, it’s my favourite language at the
moment); it’s not Nim’s fault that most—if not &lt;em&gt;all&lt;/em&gt;—cross platform GUI
toolkits suck in one way or another (having been written in C++ is one major
source of such suckage)). &lt;sup id=&quot;fnref:lisp&quot;&gt;&lt;a href=&quot;#fn:lisp&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;At this point, the needle of my stress-o-meter was already hovering in the
orange zone. Luckily enough, I then found something interesting…&lt;/p&gt;

&lt;h2 id=&quot;imgui-to-the-rescue&quot;&gt;IMGUI to the rescue&lt;/h2&gt;

&lt;p&gt;I haven’t heard about immediate mode UIs (IMGUI) before, so in my
initial excitement I thought this could be the answer to all my woes. For
anyone not familiar with the concept, the general idea is that with an IMGUI
the UI does not live in memory and manage it’s own state, as it is the case
with traditional retained mode GUIs (RMGUI), but it gets “recreated” and
redrawn on the fly on every frame at 60 FPS (or whatever your framerate is).
From an implementation perspective, an IMGUI essentially boils down to one
function per widget type, where that single function performs all duties
related to the correct functioning of that particular widget (event handling,
drawing, reporting the current state etc.) The construction of an IMGUI based
UI thus becomes a series of simple function calls which makes it an attractive
option from a simplicity and iteration speed standpoint. Also, because the
whole interface gets fully redrawn on every frame, there’s no messing with
dirty regions at all—just redraw the whole thing into an off-screen buffer,
overlay it onto the top of the current frame and job done. Easy!&lt;/p&gt;

&lt;p&gt;It turns out that while such an approach makes a lot of sense for a game that
needs to redraw the whole screen at a constant framerate anyway, it’s not that
great of a choice for a traditional desktop application where such frequent
redraws would be wasteful.&lt;/p&gt;

&lt;p&gt;(At least, that was my simplistic understanding of the whole IMGUI concept,
which is not quite true, but I’ll just leave the above description here
unaltered, as by judging by some of the threads on the topic, most people seem
to misinterpret the concept of IMGUI in a very similar way like I did when
I was just getting acquainted with it. So if you fully agree with the above
two paragraphs, you’re wrong! :) What I described above is &lt;em&gt;one particular
way&lt;/em&gt; to implement an IMGUI that is very well suited to applications that need
to redraw the screen at a constant frame rate anyway, generally using
accelerated graphics (read, games). But the actual definition of IMGUI is much
simpler: the UI is just a function of the current application state, thus the
application is not responsible for explicitly managing the UI state and
keeping it in sync with the app.)&lt;/p&gt;

&lt;h3 id=&quot;enter-nanovg&quot;&gt;Enter NanoVG&lt;/h3&gt;

&lt;p&gt;Ok, so my idea was to build a simple IMGUI user interface myself with
&lt;a href=&quot;https://github.com/memononen/nanovg&quot;&gt;NanoVG&lt;/a&gt;, which is a 2D vector graphics
library that uses OpenGL as its rendering backend. The plan was to use it in
conjunction with GLFW to shield me from any platform specific drawing and
window handling stuff. That part actually worked out quite nicely; after a few
days of hacking I had a window showing a bitmap image which was periodically
updated from the internal render framebuffer with some GUI elements laid on
top of it with transparency and whatnot.&lt;/p&gt;

&lt;p&gt;So far so good, cross-platform custom GUI proof-of-concept check, but
I suddenly found myself facing two brand new problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The constant redrawing of the whole UI on every frame was burning too much
processor time, about 10-15% of CPU on my Intel Core i7 4790k 4.0 GHz (8
logical cores).  That means 1 core out of the total 8 was constantly running
at almost 100%!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The text rendering quality of NanoVG made me really depressed…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exit-nanovg&quot;&gt;Exit NanoVG&lt;/h3&gt;

&lt;p&gt;The first problem was easy to fix. The abysmal performance had nothing to do
with NanoVG or OpenGL, it was caused by the constant redrawing at 60 FPS. The
solution was to redraw only when needed: as a quick hack I introduced a global
boolean &lt;code&gt;doRedraw&lt;/code&gt; and set it to true only when an input event was received or
the internal application state had been changed (e.g. the framebuffer had been
updated). Then the drawing would only happen when &lt;code&gt;doRedraw&lt;/code&gt; was set to true.
Surely this could be done in a nicer way, but the general concept would be the
same.&lt;/p&gt;

&lt;p&gt;The second issue with text rendering was a harder nut to crack. NanoVG uses
the tiny
&lt;a href=&quot;https://github.com/nothings/stb/blob/master/stb_truetype.h&quot;&gt;stb_truetype&lt;/a&gt;
single-header C font rasterizer to create the font atlases used for text
output. This is all well, but the quality at small font sizes is not that
great at all (not great enough to annoy the hell out of me). NanoVG seems to
have optional support for FreeType, but even if that works, it has only quite
rudimentary support for handling text layouts (which is quite buggy, by the
way). I really have zero inclination to neither start hacking the C code, nor
come up with my own font layout engine… I know there’s stuff like
&lt;a href=&quot;http://www.pango.org/&quot;&gt;Pango&lt;/a&gt; and
&lt;a href=&quot;https://www.freedesktop.org/wiki/Software/HarfBuzz/&quot;&gt;HarfBuzz&lt;/a&gt;, but I really
don’t want to &lt;a href=&quot;https://signalvnoise.com/posts/3183-the-art-of-computer-typography&quot;&gt;do a Donald E.
Knuth&lt;/a&gt;
here and spend too much time on a problem that has already been solved on the
OS graphics library level in a perfectly satisfactory manner. I just want to
call &lt;code&gt;drawText()&lt;/code&gt; and be done with it!&lt;/p&gt;

&lt;p&gt;Alright, so OpenGL—and thus NanoVG—is not the way to go because of this
whole text rendering fiasco…  At this point, the progress of my adventures
in the wonderful realm of cross-platform graphical user interfaces could be
visualised pretty much spot on as follows:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-05-29/fail.jpg&quot; alt=&quot;FAIL&quot; style=&quot;width: auto&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: auto; text-align: center;&quot;&gt;FAIL&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h2 id=&quot;state-of-the-art&quot;&gt;State of the art&lt;/h2&gt;

&lt;p&gt;Ok, after putting the problem aside for a few days (mainly in order to calm
down), I realised that the best way to go about this is to take a few quality
cross-platform applications that I know well and analyse how they solved the
custom GUI problem. So that’s exactly what I did next.&lt;/p&gt;

&lt;p&gt;I have included a mini-breakdown for each app on the sizes of their various
components (e.g. main executable, libraries, additional resources etc.), in an
attempt to get a feel for what is considered acceptable in 2016. I used the
64-bit Windows versions except where noted otherwise.&lt;/p&gt;

&lt;h3 id=&quot;reaper&quot;&gt;REAPER&lt;/h3&gt;

&lt;table class=&quot;properties&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Version&lt;/td&gt;
      &lt;td&gt;5.12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main executable&lt;/td&gt;
      &lt;td&gt;11 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Resources&lt;/td&gt;
      &lt;td&gt;23 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plugins&lt;/td&gt;
      &lt;td&gt;30 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total install size&lt;/td&gt;
      &lt;td&gt;68 MiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;http://www.reaper.fm/&quot;&gt;REAPER&lt;/a&gt; is a highly advanced cross-platform digital
audio production workstation (DAW) for Windows and Mac OS X originally
developed by &lt;a href=&quot;https://en.wikipedia.org/wiki/Justin_Frankel&quot;&gt;Justin Frankel&lt;/a&gt;,
the guy who wrote the original WinAmp. REAPER is written in C++ and it uses
the open-source &lt;a href=&quot;http://www.cockos.com/wdl/&quot;&gt;WDL&lt;/a&gt; library (from the same
developer) for cross-platform graphics, audio and UI tasks.&lt;/p&gt;

&lt;p&gt;It is a very much no-bullshit app, just look at the 11 MiB executable size! By
examining the WDL sources it becomes pretty clear that REAPER uses a mixture
of native software rendering (GDI on Windows, because it still supports XP)
and an anti-aliased software rasterizer. The GUI is skinnable but
non-scalable as the skins are completely bitmap based, so a good proportion
of the GUI drawing consists of blitting operations, presumably.  There are
some font rendering differences between the OS X and Windows versions that
suggests that the app uses OS native text rendering under the hood.  The menu
bar and all dialog windows (e.g. file dialogs, preferences) are OS-native too.&lt;/p&gt;

&lt;p&gt;It is evident that REAPER’s strategy in terms of the UI is to use as much OS
provided functionality as possible and resort to custom code only when
necessary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2017-03-17:&lt;/strong&gt; Justin, the man himself has enlightened me in the
comments below that the situation is a bit more complicated than what
I thought (quoted verbatim):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s worth noting that REAPER actually uses SWELL (which is a part of WDL)
for cross-platform compatibility… SWELL allows you to write minimal win32
code and target Cocoa or GDK… you can do all native controls, GDI
rendering, software bitmap rendering, or any combination of the above…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Neat, looks like I wasn’t too far off the mark. Then he adds:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It takes a special sort of soul to willingly program UIs using a minimal
 subset of win32, so I wouldn’t go recommending it… but for those people
 writing win32 applications, SWELL might be handy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I certainly don’t disagree with that! (so, in short, no thanks…)&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/reaper.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/reaper-small.jpg&quot; alt=&quot;REAPER 5 screenshot showing the Funktion 1.0 skin&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;This is REAPER 5 in fullscreen mode, featuring the &lt;a href=&quot;http://stash.reaper.fm/theme/1792/Funktion%201.0&quot;&gt;Funktion 1.0&lt;/a&gt; skin (designed by &lt;em&gt;yours truly&lt;/em&gt;). Note the standard Windows menu bar on top.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;renoise&quot;&gt;Renoise&lt;/h3&gt;

&lt;table class=&quot;properties&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Version&lt;/td&gt;
      &lt;td&gt;3.1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Executable&lt;/td&gt;
      &lt;td&gt;26 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DLL files&lt;/td&gt;
      &lt;td&gt;1.3 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Resources&lt;/td&gt;
      &lt;td&gt;19 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Library (presets, samples)&lt;/td&gt;
      &lt;td&gt;131 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total install size&lt;/td&gt;
      &lt;td&gt;195 MiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.renoise.com/&quot;&gt;Renoise&lt;/a&gt; is probably the best cross-platform modern
music tracker in existence today. It runs on Windows, OS X and Linux and it
has a completely custom single-window UI. Everything is custom drawn,
including the menus, dialogs, the file browser and so on. The graphics backend
uses DirectX on Windows, OpenGL on OS X and presumably X directly on Linux.
The UI is non-scalable and non-skinnable, the fonts are bitmap based (I think)
and most of the drawing seems to be simple blitting. They also must have
developed some custom graphics routines for the anti-aliased cross-platform
drawing of dynamic UI elements (e.g. the waveform and envelope displays). The
UI seems to be pixel-identical across platforms.&lt;/p&gt;

&lt;p&gt;Renoise is closed source, so unfortunately I could not inspect how they
accomplished all this, but very likely they had to come up with their own UI
and graphics wrappers to maintain a single codebase for all three platforms.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/renoise.png&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/renoise-small.jpg&quot; alt=&quot;Renoise 3 screenshot&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;Renoise 3 in fullscreen. Everything is custom drawn, such as the menu bar and the preferences dialog in the middle of the screen. Again, the nice looking theme is yet another project of mine.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;tracktion&quot;&gt;Tracktion&lt;/h3&gt;

&lt;table class=&quot;properties&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Version&lt;/td&gt;
      &lt;td&gt;7.1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main executable&lt;/td&gt;
      &lt;td&gt;57 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DLL files&lt;/td&gt;
      &lt;td&gt;2.3 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total install size&lt;/td&gt;
      &lt;td&gt;60 MiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tracktion.com/&quot;&gt;Tracktion&lt;/a&gt; is another cross-platform DAW
targeting the Windows, Mac OS X and Linux platforms. Like in the case of
Renoise, the single-window GUI of Tracktion is fully custom drawn, but what
sets it apart from the former is that the drawing here is much more dynamic:
instead of having mostly fixed-size UI elements, all widgets in Tracktion
shrink and enlarge as their respective containers change in size.&lt;/p&gt;

&lt;p&gt;Tracktion is written in C++ and uses the
&lt;a href=&quot;https://github.com/julianstorer/JUCE&quot;&gt;JUCE&lt;/a&gt; library for all cross-platform
duties (again, written by the same single person responsible for all Tracktion
development). JUCE supports anti-aliased vector graphics and text output
through a number of wrapper classes that can use either JUCE’s internal
software rasterizer or one of the supported platform specific graphics APIs as
their backend (e.g.  Direct2D and DirectWrite on Windows, CoreGraphics on OS
X). All platform-specific event and window handling is abstracted away in
a similar fashion.&lt;/p&gt;

&lt;p&gt;The JUCE library is available for free for non-commercial open-source
projects, but a commercial license will make the wallets of enterprising
developers exactly $999 lighter.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/tracktion7.jpg&quot; data-width=&quot;1800&quot; data-height=&quot;1013&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/tracktion7-small.jpg&quot; alt=&quot;Tracktion 7 screenshot, big screen&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;Tracktion 7 in it's fully anti-aliased single-window glory. Previous versions might have looked somewhat less sleek, but the UI was designed to be highly scalable right from the very first release.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/tracktion7-lowres.jpg&quot; data-width=&quot;950&quot; data-height=&quot;722&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/tracktion7-lowres-small.jpg&quot; alt=&quot;Tracktion 7 screenshot, small screen&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;Still Tracktion 7, but now on a smaller screen. Contrast this screenshot with the one above: all common UI elements are still there but their sizes are vastly different. Tracktion has the most adaptable dynamic interface of all applications presented in this article, thanks to JUCE's extensive anti-aliased vector graphics support. &lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;blender&quot;&gt;Blender&lt;/h3&gt;

&lt;table class=&quot;properties&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Version&lt;/td&gt;
      &lt;td&gt;2.77&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main executable&lt;/td&gt;
      &lt;td&gt;94 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DLL files&lt;/td&gt;
      &lt;td&gt;29 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python&lt;/td&gt;
      &lt;td&gt;53 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Data&lt;/td&gt;
      &lt;td&gt;49 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Scripts&lt;/td&gt;
      &lt;td&gt;34 MB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total install size&lt;/td&gt;
      &lt;td&gt;305 MiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.blender.org/&quot;&gt;Blender&lt;/a&gt; doesn’t need much introduction, being the
most well-known open-source 3D package for Windows, OS X and Linux. On the UI
front, it uses a completely different approach to all the previous examples:
the contents of the whole window, including the render view and the user
interface, are drawn using pure OpenGL. There’s no fallback to any
other rendering backends—Blender simply doesn’t run on systems without OpenGL
support.&lt;/p&gt;

&lt;p&gt;This makes certain interesting things possible, such as semi-transparent UI
elements overlaid on top of OpenGL views, as shown on the screenshot below.
The UI is fully scalable (including font sizes) and quite dynamic, and it’s
also worth noting that it’s fully defined in the form of Python scripts (hence
the bundled Python interpreter).&lt;/p&gt;

&lt;p&gt;Displaying text elements is accomplished via glyphs pre-rendered into
&lt;a href=&quot;https://en.wikipedia.org/wiki/Texture_atlas&quot;&gt;texture atlases&lt;/a&gt; with
&lt;a href=&quot;https://www.freetype.org/&quot;&gt;FreeType&lt;/a&gt; (possibly a modified version). One of
the biggest weaknesses of OpenGL based UI drawing is the difficulty of
rendering crisp and clear looking anti-aliased text, as evidenced by &lt;a href=&quot;https://wiki.blender.org/index.php/Dev:Source/Text/Rendering&quot;&gt;these
notes&lt;/a&gt; on the
Blender developer wiki.&lt;/p&gt;

&lt;p&gt;In theory, it would be possible to re-use Blender’s cross-platform UI layer
written in C in other applications, but because its tight coupling to
Blender’s internals, no one has been able to do so yet in practice.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/blender.jpg&quot; data-width=&quot;1920&quot; data-height=&quot;1200&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/blender-small.jpg&quot; alt=&quot;Blender screenshot&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;Blender's OpenGL-based interface is quite sleek and modern looking. Notice the semi-transparent widgets on top of the 3D views. Nifty.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;cinema-4d&quot;&gt;Cinema 4D&lt;/h3&gt;

&lt;p&gt;I cannot provide any detailed info on Cinema 4D because I’m not using it
personally (and I couldn’t bring myself to download the 3 GB demo installer
just to check the executable size…) It’s still worthwhile to include it in this
discussion because a) the UI looks good, b) most other commercial 3D packages
follow a very similar approach.&lt;/p&gt;

&lt;p&gt;We can deduce a lot from the screenshot below. First, note the image
dimensions: 2880-by-1714. The display resolution of a 15” 2015 Retina MacBook
Pro is 2880-by-1800, so this is a screenshot of the Mac version. Also note
that at 1:1 magnification the text and the large icons are very crisp looking,
but the rest of the UI, including the render view, is made up of double-sized
(2x2) pixels—a tell-tale sign of partial Retina display support. Apparently,
they’re using native text rendering, taking advantage of high-resolution
displays whenever possible, but the rest of the UI probably consists of simple
bitmaps only. The render preview is drawn using 2x2 pixels too, most likely
due to performance reasons. Having a look at some random Windows screenshots
further validates this assumption; on those images the text looks very much
like a default 9px Tahoma UI font rendered with ClearType.&lt;/p&gt;

&lt;p&gt;It seems that similarly to REAPER, Cinema 4D uses native graphics and text
rendering to draw its UI, probably via some custom wrapper libraries.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/cinema4d.png&quot; data-width=&quot;2880&quot; data-height=&quot;1714&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/cinema4d-small.jpg&quot; alt=&quot;Cinema 4D screenshot&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;Cinema 4D on a Retina display MacBook Pro. Note that the fonts and the big icons are shown at actual pixel resolution, while the rest of the UI is rendered with double-sized (2x2) pixels.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;nodebox3&quot;&gt;NodeBox3&lt;/h3&gt;

&lt;table class=&quot;properties&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Version&lt;/td&gt;
      &lt;td&gt;3.0.44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main executable (JAR)&lt;/td&gt;
      &lt;td&gt;22 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Libraries (ffmpeg)&lt;/td&gt;
      &lt;td&gt;12 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Java runtime&lt;/td&gt;
      &lt;td&gt;172 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Python interpreter&lt;/td&gt;
      &lt;td&gt;4.4 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Examples&lt;/td&gt;
      &lt;td&gt;8.3 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total install size&lt;/td&gt;
      &lt;td&gt;220 MiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://www.nodebox.net/node/&quot;&gt;NodeBox3&lt;/a&gt; is a quite interesting open-source
generative graphics tool that runs on Windows, Mac OS X and Linux. In
contrast to the previously discussed applications, NodeBox is not a native
executable written in C++ but a Java program. The custom-looking UI is built
with the help of Swing (that’s the standard Java GUI library), as it can be
seen
&lt;a href=&quot;https://github.com/nodebox/nodebox/tree/master/src/main/java/nodebox/ui&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Relying on the cross-platform Java runtime is certainly very convenient from
the developers’ perspective, but is not without some serious drawbacks. First
of all, the whole Java runtime environment has to be bundled with the
application (at least on Windows and OS X), which accounts to a whopping 172
MiB in this concrete example (that’s 78% of the total install size!).
Interface redraws are much more sluggish compared to native applications like
REAPER and Renoise, startup times are generally slow, and Java applications
overall tend to be memory hogs. All these things are mostly non-issues for
long-running server-side applications (the most natural habitat of Java
bytecode), but they make the platform a less than ideal choice for
high-performance desktop applications.&lt;/p&gt;

&lt;p&gt;In conclusion, while Java is certainly not the  most terrible choice for
a cross-platform GUI app, it’s far from being the greatest either. For
some less demanding software, such as NodeBox, it may be an OK solution, but
I’m really averse to the idea of a DAW written in Java where every little bit
of performance counts.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-05-29/nodebox.png&quot; data-width=&quot;1100&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-05-29/nodebox-small.jpg&quot; alt=&quot;NodeBox3 screenshot&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;NodeBox3 has a pleasant looking GUI built using Swing that looks identical on all supported platforms. UI redraws are noticeably sluggish even on fast computers compared to native applications that use OS level graphics APIs directly.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;h3 id=&quot;light-table&quot;&gt;Light Table&lt;/h3&gt;

&lt;table class=&quot;properties&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Version&lt;/td&gt;
      &lt;td&gt;0.8.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Main executable&lt;/td&gt;
      &lt;td&gt;51 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Electron framework&lt;/td&gt;
      &lt;td&gt;42 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Resources&lt;/td&gt;
      &lt;td&gt;33 MiB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total install size&lt;/td&gt;
      &lt;td&gt;129 MiB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://lighttable.com/&quot;&gt;Light Table&lt;/a&gt; is a next generation code editor that
connects you to your creation with instant feedback.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This quote was taken from the project’s &lt;a href=&quot;https://github.com/LightTable/LightTable&quot;&gt;GitHub
page&lt;/a&gt; and I think it sums up this
novel IDE pretty well. Light Table is available for Windows, Mac OS X and (can
you guess?) Linux; it achieves cross-platform compatibility by leveraging the
&lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt; framework. In basic terms, Electron
consists of a Chromium browser and Node.js, so developers can use hipster
technologies like HTML, CSS and JavaScript to build their cross-platform
desktop applications. Light Table is actually written in ClojureScript, which
transpiles to JavaScript. This makes perfect sense as the IDE was originally
intended to be a programming environment for Clojure only.&lt;/p&gt;

&lt;p&gt;I don’t have any personal experience using Light Table, and while I think the
application itself is a great idea, I cannot say much positive about the
underlying Electron framework. Light Table seems to have been plagued by
&lt;a href=&quot;https://github.com/LightTable/LightTable/issues/1088&quot;&gt;serious performance
issues&lt;/a&gt; which were the
main reason for them having to migrate from node-webkit (their previous
framework, now known as &lt;a href=&quot;http://nwjs.io/&quot;&gt;NW.js&lt;/a&gt;) to Electron at the end of
2015 (see
&lt;a href=&quot;https://m.reddit.com/r/javascript/comments/3meazr/is_electron_atom_a_good_way_to_create_offline_js/&quot;&gt;here&lt;/a&gt;).
That’s a very severe drawback of such Web-technologies-on-the-desktop style of
frameworks; they introduce too many layers of abstraction over OS provided
functionalities that often result in serious performance bottlenecks. And when
things don’t quite work as expected, you can’t do much about it—short of
maybe just switching to a different framework as a last attempt. (Of course,
this problem can happen with OS-native libraries as well, but in practice it
is much less of a problem, as OS APIs are generally several orders of
magnitude more robust and performant, and there’s much more leeway for
workarounds on the OS level if anything does not quite work as expected).&lt;/p&gt;

&lt;p&gt;Now as I think about it, the only reasons for the existence of such frameworks
is the allure of quick time to market, the luxury of being able to trade
development speed for program efficiency (because on contemporary hardware you
can be really wasteful with resources in many problem domains and the
resulting program will still remain mostly functional), and the vast armies of
newskool web developers who grew up on JavaScript and the DOM. But the
trade-offs involved are quite severe: performance, memory consumption,
installation sizes and OS integration will suffer, and long-term maintenance
will be a nightmare. Despite all the drawbacks, I can see this approach work
acceptably well in some specific circumstances (non-demanding applications
aimed at a not too picky—and hopefully non-technical—audience). But if you
care about your users and cannot afford to be grossly inefficient, just stay
away from web technologies on the desktop. You don’t want to build a castle on
sand.&lt;/p&gt;

&lt;p class=&quot;warning&quot;&gt;I think of it as my duty to point out that the Electron framework carries
a terrible potential for misuse when fallen into the wrong hands. The
&lt;a href=&quot;https://github.com/maxogden/monu&quot;&gt;Monu&lt;/a&gt; OS X only process monitoring menu bar
application built using Electron weighs &lt;strong&gt;no less than 189 MiB on disk!&lt;/strong&gt; Yes,
you read that right: a heavyweight cross-platform framework featuring
a &lt;em&gt;complete built-in browser engine&lt;/em&gt; was used to create a &lt;em&gt;menu bar widget&lt;/em&gt;
for a &lt;em&gt;single platform&lt;/em&gt;!  No disrespect to the program’s author, I’m sure he
had the best intentions and he’s a nice person and all (even if he is clearly
somewhat misguided in the practical execution of his ideas), but who would
seriously entertain even just the &lt;em&gt;thought&lt;/em&gt; that a 189 MiB menu bar app was
going to be an okay thing to do, honestly?&lt;/p&gt;

&lt;h2 id=&quot;executive-summary&quot;&gt;Executive summary&lt;/h2&gt;

&lt;p&gt;By analysing the commonalities of the apps showcased so far, we can see a few
interesting patterns emerging. For event and window handling, they all must
have used the host OS (or host platform, in the case of managed applications)
in some way, so nothing too much exciting going on there.  Regarding the
cross-platform graphics problem, each one of them must have implemented some
kind of variation on one of the following basic approaches:&lt;/p&gt;

&lt;ol class=&quot;compact&quot;&gt;
  &lt;li&gt;Make use of the graphics and text libraries provided by the host OS&lt;/li&gt;
  &lt;li&gt;Use a software renderer for all graphics&lt;/li&gt;
  &lt;li&gt;Use OpenGL for all graphics&lt;/li&gt;
  &lt;li&gt;Use a cross-platform environment (e.g. Electron or Java) to abstract
away all platform-specific stuff&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s my expert analysis on the pros and cons of each method:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Using &lt;strong&gt;native graphics APIs (1)&lt;/strong&gt; is probably the least pixel-identical
approach across platforms (especially text rendering can look wildly
different on different operating systems), but this is rarely a problem in
practice for most applications.  In fact, platform-native text rendering can
be seen as a feature rather than a drawback—think of Retina displays, or
how hardcore Windows users typically prefer ClearType over the unhinted OS
X style text rendering, and vice versa.  While there might be some minor
differences in the way different platforms render anti-aliased vector
graphics natively, those differences are generally negligible for most
use-cases (and for most users not suffering from some chronically acute case
of OCD).  Another important point to note is that OS native graphics usually
takes advantage of the GPU on most major platforms, so we get hardware
acceleration for free.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Only a &lt;strong&gt;software renderer (2)&lt;/strong&gt; guarantees to yield 100% identical results
across all platforms down to the pixel level (except if you’re only blitting
pre-stored pixel images), but it’s a lot of work and it will be potentially
much slower than the often GPU-accelerated native graphics API (unless
you’re a graphics guru and know exactly what you’re doing). Overall, I think
it’s a wasted effort, unless you have some special requirements to do the
rendering in a very specific, pixel-exact way across all supported
platforms. But yes, in the past people had to come up with their own
rasterizers if they were not happy with the crappy aliased graphics provided
by the Windows GDI and such.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;OpenGL (3)&lt;/strong&gt; initially seems to be a very good fit for cross-platform
graphics duties; after all, it’s hard to get hold of hardware nowadays (even
second-hand!) that does &lt;em&gt;not&lt;/em&gt; have support for it. But driver support can be
an issue; there’s some rumours, for example, that Intel OpenGL drivers are
pretty shit in that regard.  The other thing that can throw the spanner in
the works is font rendering.  There are lots of different approaches to it,
and while some might be perfectly fine for a particular application,
generally it’s a major pain in the ass. Just have a look at &lt;a href=&quot;http://innovation.tss-yonder.com/2012/05/14/the-future-native-cross-platform-ui-technology-that-may-not-be/&quot;&gt;this
post&lt;/a&gt;
if you don’t believe me to see what kind of quite absurd hoops these poor
Swedes had to jump through just to display some animated text. Oh, and you’d
also need to come up with your own tesselator engine that can construct nice
smooth Bézier curves out of little triangles and so on. Compared to the
native graphics approach, this is a lot of work, more or less on par with
writing your own software rasterizer. Again, the native graphics libraries
are already doing the tesselation stuff (and lots more) for you for free if
a GPU is present and fall back to software rendering otherwise. But for
games and similar full-screen applications where you really want to
superimpose the UI on top of the 3D view, you really don’t have much other
choice (and a naive IMGUI approach might actually be a very good fit).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Cross-platform application development environments (4)&lt;/strong&gt; might be okay
(but not great) for simpler, less demanding stuff.  But when performance is
a concern, they are definitely not the way to go. The total install size
will also suffer (to be very polite and ladylike about it). Overall, apart
from making life easier for certain types of developers (primarily the ones
who enjoy hacking Java + Swing and the JavaScript-for-all-the-things webdev
folks), this approach has a lot of drawbacks. I also don’t think that
shoehorning web development technologies—which technically don’t provide
any advantages over more traditional approaches—into desktop applications
is a very sound idea either. So for any serious work, avoid.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-the-hell-to-do&quot;&gt;So what the hell to do?&lt;/h2&gt;

&lt;p&gt;…apart from writing a semi-useless blog post/rant about this utter fiasco,
that is. Looks like that an easy to use, well-performing and non-bloated
library to help with cross-platform UI and graphics duties in the age of Mars
rovers, Go world-champion beating AI constructs and genetically modified
carrots that will kill you in your sleep is just too much ask for.&lt;/p&gt;

&lt;p&gt;The computer says &lt;em&gt;no&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;JUCE is probably the one that comes closest, but it’s C++, semi-bloated and
not free for commercial purposes. There’s WDL too, but that’s still C++ and
looks rather disgusting.  Also, hacking C++ in my spare time is very far from
my idea of fun. If there would be &lt;em&gt;really&lt;/em&gt; no other option, I guess I’d just
stop coding altogether and find a more relaxing hobby. Like dirt car racing,
wrestling with alligators, or disarming bombs or something.&lt;/p&gt;

&lt;p&gt;Other than JUCE (and maybe WDL), we’d have to roll your own, plain and
simple. And that’s exactly what many people have been doing, apparently, and
that’s what I’m gonna do too. To help decide how to accomplish this lofty
goal, the below table summarises my ratings of the various approaches outlined
previously. I made this really very scientific: one plus means a given feature
is somewhat enjoyable to implement, one minus means it slightly sucks, et
cetera—you get the picture.&lt;/p&gt;

&lt;p&gt;So let’s see (Java and web technologies are disqualified on purpose for
I really think they have no place on the desktop):&lt;/p&gt;

&lt;table class=&quot;nopadleft&quot;&gt;
  &lt;tr&gt;
    &lt;th style=&quot;width: 19%&quot;&gt;&lt;/th&gt;
    &lt;th style=&quot;width: 27%&quot;&gt;Software renderer&lt;/th&gt;
    &lt;th style=&quot;width: 27%&quot;&gt;Native wrapper&lt;/th&gt;
    &lt;th style=&quot;width: 27%&quot;&gt;OpenGL&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;h&quot;&gt;Windowing&lt;/td&gt;
    &lt;td&gt;
      native OS API&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;-&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      native OS API&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;-&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      GLFW (or similar)&lt;br /&gt;
      &lt;span style=&quot;color: green; font-size: 120%; font-weight: 900&quot;&gt;+&lt;/span&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;h&quot;&gt;Input handling&lt;/td&gt;
    &lt;td&gt;
      native input handling&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;-&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      native input handling&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;-&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      GLFW (or similar)&lt;br /&gt;
      &lt;span style=&quot;color: green; font-size: 120%; font-weight: 900&quot;&gt;+&lt;/span&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;h&quot;&gt;Graphics&lt;/td&gt;
    &lt;td&gt;
      custom rasterizer&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;- - -&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      native graphics API&lt;br /&gt;
      &lt;span style=&quot;color: green; font-size: 120%; font-weight: 900&quot;&gt;+&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      custom tesselator&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;- - -&lt;/span&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;h&quot;&gt;Text&lt;/td&gt;
    &lt;td&gt;
      FreeType&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;- -&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      native text API&lt;br /&gt;
      &lt;span style=&quot;color: green; font-size: 120%; font-weight: 900&quot;&gt;+&lt;/span&gt;
    &lt;/td&gt;
    &lt;td&gt;
      FreeType (w/ font atlas)&lt;br /&gt;
      &lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;- - -&lt;/span&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class=&quot;sep&quot;&gt;
    &lt;td class=&quot;h&quot;&gt;Total&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;- - - - - - -&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color: #666; font-weight: 900&quot;&gt;0&lt;/span&gt;&lt;/td&gt;
    &lt;td&gt;&lt;span style=&quot;color: red; font-size: 120%; font-weight: 900&quot;&gt;- - - -&lt;/span&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;And the final verdict: &lt;strong&gt;the native wrapper method is the lucky winner&lt;/strong&gt;
(read: it sucks the least, compared to the major suckage involved with the
other two approaches).&lt;/p&gt;

&lt;p&gt;Phew.&lt;/p&gt;

&lt;h2 id=&quot;final-words&quot;&gt;Final words&lt;/h2&gt;

&lt;p&gt;Well, I really wanted to avoid this, but I simply must acknowledge the fact
that to produce a good quality custom cross-platform GUI in 2016, there’s
really no substitute to rolling up your sleeves and developing your own
platform-agnostic UI and graphics libraries.&lt;/p&gt;

&lt;p&gt;Oh well, I only wanted to display a few buttons and maybe push some pixels,
but fuck all that, let’s  write a whole cross-platform GUI library in Nim!&lt;/p&gt;

&lt;p&gt;Time to get serious!&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;img src=&quot;/files/2016-05-29/fuck-everything.jpg&quot; alt=&quot;Fuck everything&quot; style=&quot;width: 100%&quot; /&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;The above fine
faux-leather jacket wearing gentleman already knows the secret: Qt is not
the answer to everything.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:bullshit&quot;&gt;
      &lt;p&gt;The last three new age wisdoms courtesy of the &lt;a href=&quot;http://wisdomofchopra.com/&quot;&gt;Wisdom of Chopra&lt;/a&gt; bullshit generator. &lt;a href=&quot;#fnref:bullshit&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lisp&quot;&gt;
      &lt;p&gt;Note the nested parentheses—a true tell-tale sign of my latent LISP tendencies! &lt;a href=&quot;#fnref:lisp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Sun, 29 May 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/05/29/cross-platform-gui-trainwreck-2016-edition/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/05/29/cross-platform-gui-trainwreck-2016-edition/</guid>
            </item>
        
            <item>
                <title>The Nim Ray Tracer Project &amp;ndash; Part 2: The Basics</title>
                <description>&lt;p class=&quot;intro&quot;&gt;[I have to tell that even after 34 years, &lt;em&gt;Brian Eno&lt;/em&gt;’s ambient
music is still so much better than 99.9999% of all recent electronic releases.
Listening to &lt;em&gt;Ambient 4: On Land&lt;/em&gt; from 1982; track #2 &lt;em&gt;The Lost Day&lt;/em&gt; has
a wonderfully creepy atmosphere…]&lt;/p&gt;

&lt;h2 id=&quot;the-basics&quot;&gt;The Basics&lt;/h2&gt;

&lt;p&gt;Hello again! In the &lt;a href=&quot;2016/04/28/the-nim-raytracer-project-part1/&quot;&gt;initial
post&lt;/a&gt; of this series I talked
about ray tracing in general and my reasons for writing my own ray tracing
renderer in the most awesome &lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt; language. Before
writing any code though, in this part we’ll examine the basic maths required
for such a renderer.&lt;/p&gt;

&lt;p&gt;Most of this stuff is a distilled version of the information contained in the
excellent &lt;a href=&quot;http://www.scratchapixel.com/&quot;&gt;Scratchapixel 2.0 – Learn Computer Graphics Programming from
Scratch&lt;/a&gt; learning resource, which I highly
recommend to all graphics programming enthusiasts. There’s absolutely zero
point in recreating the superb explanations from those lessons here, so just
go and read the original materials if you’re interested.&lt;/p&gt;

&lt;p&gt;My only problem with Scratchapixel was that while the content is generally of
very high quality, the mathematical notation they use is sometimes a bit
sloppy and a few formulas are actually incorrect (just a &lt;em&gt;very few&lt;/em&gt;, to be
fair). I tried to supplement Scratchapixel with other random learning
materials found on the Internet but that also proved to be problematic because
of the slightly different notational conventions and assumptions of different
authors (e.g. some people assume a right-handed while others a left-handed
coordinate system, maths folks like their z-axis to point upwards, but in
computer graphics that’s usually the y-axis and the z-axis points towards the
viewer, then there’s the difference between row and column vector notation and
so on).  While these differences might be laughably trivial to a mathematician
or to someone who is already pretty familiar with the subject, they can surely
confuse the hell out of a newcomer, like myself (or maybe I just get confused
too easily, that might very well be the case…).&lt;/p&gt;

&lt;p&gt;I’m not exactly the biggest fan of littering the source code with page-long
explanatory comments  either, so all my development notes will end up in these
blog posts. That way I will have at least a remote chance of understanding
what the hell I was doing here a couple of years down the track, and maybe
others will find my development diary also useful (or amusing, depending on
their perspective…).&lt;/p&gt;

&lt;p&gt;Alright, let’s get down to business!&lt;/p&gt;

&lt;h3 id=&quot;coordinate-system&quot;&gt;Coordinate system&lt;/h3&gt;

&lt;p&gt;We are going to use a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cartesian_coordinate_system#In_three_dimensions&quot;&gt;right-handed Cartesian coordinate system
&lt;/a&gt;
to represents objects in our 3D world, where the &lt;em&gt;y-axis&lt;/em&gt; points up, the
&lt;em&gt;x-axis&lt;/em&gt; to the right and the &lt;em&gt;z-axis&lt;/em&gt; “outward”. In right-handed coordinate
systems, positive rotation is
&lt;a href=&quot;https://www.evl.uic.edu/ralph/508S98/coordinates.html&quot;&gt;counter-clockwise&lt;/a&gt;
about the axis of rotation.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
  &lt;object data=&quot;/files/2016-04-30/coordinate-system.svg&quot; type=&quot;image/svg+xml&quot; style=&quot;width: 100%&quot;&gt;&lt;/object&gt;
  

  
    
    &lt;figcaption style=&quot; text-align: center;&quot;&gt;Figure 1 &amp;mdash; The right-handed coordinate system used in our renderer. The circular arrow indicates the direction of positive rotation.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;The choice of coordinate system handedness is nothing more than a convention:
DirectX, Unity, Maya and Pixar’s RenderMan use left-handed coordinate systems,
while OpenGL, &lt;a href=&quot;http://www.pbrt.org/&quot;&gt;pbrt&lt;/a&gt; and most other 3D modelling
software are right-handed. For our purposes, compatibility with OpenGL and
pbrt are the most important. Also, right-handed coordinate systems are the
norm in mathematics, which will also make life a bit easier.&lt;/p&gt;

&lt;h3 id=&quot;notation&quot;&gt;Notation&lt;/h3&gt;

&lt;p&gt;As I mentioned, the aim is to use a consistent mathematical notation throughout
the whole series, so let’s define that first!&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-legend-align&quot;{\table
f, \text&quot;scalar&quot;;
P, \text&quot;point&quot;;
(P_x, P_y, P_z), \text&quot;point (by coordinates)&quot;;
\AB, \text&quot;segment&quot;;
v↖{→}, \text&quot;vector&quot;;
⟨\v_\x, \v_\y, \v_\z⟩, \text&quot;vector (by coordinates)&quot;;
n↖{∧}, \text&quot;unit vector)&quot;;
{‖v↖{→}‖}, \text&quot;magnitude (length) of vector&quot;;
a↖{→}·b↖{→}, \text&quot;dot product&quot;;
a↖{→}×b↖{→}, \text&quot;cross product&quot;;
\bo M, \text&quot;matrix&quot;;
}$$&lt;/p&gt;

&lt;p&gt;Column notation is used for vectors:&lt;/p&gt;

&lt;p&gt;$$ v↖{→}=[\table x; y; z; w; ] $$&lt;/p&gt;

&lt;p class=&quot;note&quot;&gt;If the formulas look like crap in your browser, that means it
sadly doesn’t support MathML. Solution? Use a better browser, like
&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;Firefox&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;transform-matrices&quot;&gt;Transform matrices&lt;/h3&gt;

&lt;p&gt;All the matrix stuff will be eventually handled by a &lt;a href=&quot;https://github.com/stavenko/nim-glm&quot;&gt;matrix
library&lt;/a&gt; written by someone else, but
it’s still useful to know how these transforms look like in our right-handed
coordinate system (for example, for performance purposes we might hand-code
some optimised versions of these transforms later).&lt;/p&gt;

&lt;h4 id=&quot;translation-and-scaling&quot;&gt;Translation and scaling&lt;/h4&gt;

&lt;p&gt;$$\bo T=[\table
1, 0, 0, t_x;
0, 1, 0, t_y;
0, 0, 1, t_z;
0, 0, 0, 1;
]
\;\;\;\;\;\;\bo S=[\table
s_x,   0,   0, 0;
  0, s_y,   0, 0;
  0,   0, s_z, 0;
  0,   0,   0, 1;
]$$&lt;/p&gt;

&lt;h4 id=&quot;rotation-around-a-given-axis&quot;&gt;Rotation around a given axis&lt;/h4&gt;

&lt;p&gt;$$\bo R_\x=[\table
1,      0,       0, 0;
0, \cos θ, -\sin θ, 0;
0, \sin θ,  \cos θ, 0;
0,      0,       0, 1;
]
\;\;\;\;\;\;\bo R_\y=[\table
 \cos θ, 0, \sin θ, 0;
      0, 1,      0, 0;
-\sin θ, 0, \cos θ, 0;
      0, 0,      0, 1;
]$$&lt;/p&gt;

&lt;p&gt;$$\bo R_\z=[\table
\cos θ, -\sin θ, 0, 0;
\sin θ,  \cos θ, 0, 0;
     0,       0, 1, 0;
     0,       0, 0, 1;
]$$&lt;/p&gt;

&lt;h3 id=&quot;calculating-primary-rays&quot;&gt;Calculating primary rays&lt;/h3&gt;

&lt;p&gt;Let $(P_x, P_y)$ be the &lt;strong&gt;pixel coordinates&lt;/strong&gt; of a pixel of the final image,
$w$ and $h$ the width and the height of the image in pixels and $r = w / h$
the image aspect ratio.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
  &lt;object data=&quot;/files/2016-04-30/mappings.svg&quot; type=&quot;image/svg+xml&quot; style=&quot;width: 100%&quot;&gt;&lt;/object&gt;
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 2 &amp;mdash; The relationships between the raster, NDC and screen spaces.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;We have to shoot the rays through the middle of the pixels, thus the $(R_x,
R_y)$ &lt;strong&gt;raster coordinates&lt;/strong&gt; of a given pixel are as follows:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
R_x ,= P_x + 0.5;
R_y ,= P_y + 0.5;
}$$&lt;/p&gt;

&lt;p&gt;From this follows the formula for calculating the $(N_x, N_y)$
&lt;strong&gt;normalised device coordinates (NDC)&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
N_x ,= R_x / w r;
N_y ,= R_y / h;
}$$&lt;/p&gt;

&lt;p&gt;And finally the $(S_x, S_y)$ &lt;strong&gt;screen coordinates&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
S_x ,= 2 N_x - r;
S_y ,= -(2 N_y - 1)
}$$&lt;/p&gt;

&lt;p&gt;To simplify the calculations, let the image plane be -1 distance away from the
origin on the z-axis and let $α$ be the &lt;strong&gt;vertical field of view
(FOV)&lt;/strong&gt; of the camera. From Figure 3 it can be seen that by default the field
of view is 90° (because $\tan 90° / 2 = \tan 45° = 1 = \BC $), and
the length of $\BC$ is actually the $f$ &lt;strong&gt;field of view factor&lt;/strong&gt; of the
camera.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
  &lt;object data=&quot;/files/2016-04-30/fov.svg&quot; type=&quot;image/svg+xml&quot; style=&quot;width: 100%&quot;&gt;&lt;/object&gt;
  

  
    
    &lt;figcaption style=&quot; width: 100%; text-align: center;&quot;&gt;Figure 3 &amp;mdash; Calculating the vertical field of view (FOV) factor.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;$$\tan α / 2 = \BC / \AB = \BC / 1$$
$$\BC = \tan α / 2 = f$$&lt;/p&gt;

&lt;p&gt;To obtain the desired field of view, the image surface has to be scaled by
the field of view factor (this is akin to zooming with a traditional camera
lens). Thus we yield the screen coordinates normalised by the field
of view factor:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
S_x ,= (2 N_x - r) f;
S_y ,= -(2 N_y - 1) f;
}$$&lt;/p&gt;

&lt;p&gt;After substitutions, the final transform from pixel coordinates to screen
coordinates looks like this:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
S_x ,= ({2 (P_x + 0.5) r} / w - r) f;
S_y ,= (1 - {2 (P_y + 0.5)} / h) f;
}$$&lt;/p&gt;

&lt;p&gt;So for each pixel $(P_x, P_y)$ in the image we can now calculate the
corresponding screen coordinates $(S_x, S_y)$ we’ll need to shoot the
primary rays through. Since the camera is at the origin, the direction vector
$d↖{∧}$ of the ray corresponding to pixel $(P_x, P_y)$ is simply the vector
$⟨S_x, S_y⟩$ normalised:&lt;/p&gt;

&lt;p&gt;$$ d↖{∧} = ⟨S_x, S_y⟩ / {‖⟨S_x, S_y⟩‖}$$&lt;/p&gt;

&lt;p&gt;As the last step, we’ll need to multiply the resulting direction vector
$d↖{∧}$ and the camera position $O$ (which is at the origin by default) with
the $\bo C$ camera-to-world transform matrix:&lt;/p&gt;

&lt;p&gt;$$ d_{\w}↖{∧} = \bo C d↖{∧}$$
$$ O_{\w} = \bo C O$$&lt;/p&gt;

&lt;p&gt;Note that assuming 4-component vectors and a 4x4 transform matrix that is used
for both translation and rotation, the above will only work correctly if the
fourth $w$ component of the direction vector $d↖{∧}$ is set to 0, and the $w$
component of the point $O$ is set to 1. Remember that the camera position is
at the origin before the transform, so $O$ will be always equal to this:&lt;/p&gt;

&lt;p&gt;$$ O=[\table 0; 0; 0; 1; ] $$&lt;/p&gt;

&lt;h3 id=&quot;ray-sphere-intersection&quot;&gt;Ray-sphere intersection&lt;/h3&gt;

&lt;p&gt;The implicit equation of a &lt;strong&gt;sphere&lt;/strong&gt; with centre point $C$ and radius $r$:&lt;/p&gt;

&lt;p&gt;$$(x-C_x)^2 + (y-C_y)^2 + (z-C_z)^2 = r^2$$&lt;/p&gt;

&lt;p&gt;The parametric equation of a &lt;strong&gt;half-open line segment&lt;/strong&gt; (the ray, in our
case), where $\O$ is the starting point, $d↖{∧}$ the direction vector and $P$
a point on the segment for any $t≧0$:&lt;/p&gt;

&lt;p&gt;$$P = O + d↖{∧}t$$&lt;/p&gt;

&lt;p&gt;Written component-wise:&lt;/p&gt;

&lt;p&gt;$$P_x = O_x + d_xt $$
$$P_y = O_y + d_yt $$
$$P_z = O_z + d_zt $$&lt;/p&gt;

&lt;p&gt;To get the ray-sphere intersection points, we’ll need to substitute $P_x$,
$P_y$ and $P_z$ into the equation of the sphere:&lt;/p&gt;

&lt;p&gt;$$(O_x + d_xt - C_x)^2 + (O_y + d_yt-C_y)^2 + (O_z + d_zt-C_z)^2 = r^2$$&lt;/p&gt;

&lt;p&gt;The first parenthesised expression can be expanded like this:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
(O_x + d_xt - C_x)^2 ,= O_x^2 + O_x d_xt - O_xC_x + d_xtO_x + d_x^2t^2 - d_xtC_x - C_xO_x - C_xd_xt + C_x^2;
 ,= O_x^2 + 2O_x d_xt - 2O_xC_x + d_x^2t^2 - 2C_x d_xt + C_x^2;
 ,= d_x^2t^2 + (2O_x d_x - 2C_x d_x)t + (O_x^2 - 2O_xC_x + C_x^2);
 ,= d_x^2t^2 + (2d_x(O_x- C_x))t + (O_x - C_x)^2;
}$$&lt;/p&gt;

&lt;p&gt;The remaining two expressions can be expanded in a similar way, so the final
equation will have the form of a quadratic equation $ at^2 + bt + c = 0$,
where:&lt;/p&gt;

&lt;p&gt;$$\cl&quot;ma-join-align&quot;{\table
a ,= d_x^2 + d_y^2 + d_z^2;
b ,= 2 (d_x(O_x - C_x) + d_y(O_y - C_y) + d_z(O_z - C_z));
c ,= (O_x - C_x)^2 + (O_y - C_y)^2 + (O_z - C_z)^2;
}$$&lt;/p&gt;

&lt;p&gt;First the discriminant $\Δ$ needs to be calculated. If $\Δ &amp;lt; 0$, the
ray does not intersect the sphere; if $\Δ = 0$, the ray touches the sphere
(one intersection point); and if $\Δ &amp;gt; 0$, it intersects the sphere at
two points. The equation can be solved for $t$ by applying the following
formula that takes care of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Loss_of_significance#A_better_algorithm&quot;&gt;loss of
significance&lt;/a&gt;
floating-point problem:&lt;/p&gt;

&lt;p&gt;$$\Δ = b^2-4ac$$&lt;/p&gt;

&lt;p&gt;$$t_1 = {-b-\sgn(b)√\Δ} / {4a}\;\;\;,\;\;\;t_2 = c/{a t_1}$$&lt;/p&gt;

&lt;h3 id=&quot;ray-plane-intersection&quot;&gt;Ray-plane intersection&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;plane&lt;/strong&gt; can be defined by a normal vector $n↖{∧}$ and a point $P_o$,
where $n↖{∧}$ represents the orientation of the plane and $P_o$ how far away
the plane is from the origin. We know that the dot product of two vectors is
zero only if they are perpendicular to each other, from which follows that for
every point $\P$ that lies on the plane defined by $n↖{∧}$ and $P_o$ the
following holds true:&lt;/p&gt;

&lt;p&gt;$$(P-P_o)·n↖{∧}=0$$&lt;/p&gt;

&lt;p&gt;To get the ray-plane intersection point, we only need to substitute the
parametric equation of the ray $\P = \O + d↖{∧}t$ into the above equation and
solve it for $t$ :&lt;/p&gt;

&lt;p&gt;$$(O + d↖{∧}t-P_o)·n↖{∧}=0$$
$$d↖{∧}t·n↖{∧} + (O -P_o)·n↖{∧}=0$$
$$t = {(P_o - O)·n↖{∧}} / {n↖{∧}·d↖{∧}}$$&lt;/p&gt;

&lt;p&gt;As usual, we are interested in positive $t$ values only. If $t$ is zero (or
very close to zero), then there is no intersection because the ray is parallel
with the plane, either away from it or exactly coinciding with it.&lt;/p&gt;

&lt;h2 id=&quot;in-the-next-episode&quot;&gt;In the next episode…&lt;/h2&gt;

&lt;p&gt;Believe it or not, that’s all we maths we need to implement a very simple
ray tracer capable of rendering planes and spheres! In the next part, we’ll
inspect some actual Nim code that generated this singular masterpiece of 80’s
CGI art below. (Well, you gotta start somewhere, right?)&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-04-30/lame-first-render.jpg&quot; data-width=&quot;1200&quot; data-height=&quot;800&quot;&gt;
        &lt;img src=&quot;/files/2016-04-30/lame-first-render.jpg&quot; alt=&quot;My lame first render&quot; style=&quot;width: 80%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 80%;&quot;&gt;This might look like total crap, but it's 16x MSAA anti-aliased, yo, and it was generated by first ray tracing &quot;engine&quot;!&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;hr /&gt;

&lt;section class=&quot;links&quot;&gt;

  &lt;h2 id=&quot;suggested-reading&quot;&gt;Suggested reading&lt;/h2&gt;

  &lt;ul class=&quot;compact&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.scratchapixel.com/&quot;&gt;Scratchapixel 2.0 – Learn Computer Graphics Programming from
Scratch&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;/section&gt;
</description>
                <pubDate>Sat, 30 Apr 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/04/30/the-nim-raytracer-project-part-2-the-basics/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/04/30/the-nim-raytracer-project-part-2-the-basics/</guid>
            </item>
        
            <item>
                <title>The Nim Ray Tracer Project &amp;ndash; Part 1: Introduction</title>
                <description>&lt;p class=&quot;intro&quot;&gt;[Listening to the albums &lt;em&gt;Reverberant Skies&lt;/em&gt; and &lt;em&gt;White Maps&lt;/em&gt; from
&lt;em&gt;Aglaia&lt;/em&gt; in an infinite loop… A beautifully hypnotic experience! The track
&lt;em&gt;In the First Spinning Place&lt;/em&gt; from &lt;em&gt;White Maps&lt;/em&gt; is my absolute favourite.]&lt;/p&gt;

&lt;h2 id=&quot;why-a-ray-tracer&quot;&gt;Why a ray tracer?&lt;/h2&gt;

&lt;p&gt;I’ve been fascinated by ray tracing since my childhood. I still remember the
first time I was playing around with an early 3D modeller/ray tracer program
on the &lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga_500&quot;&gt;Amiga 500&lt;/a&gt; called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Imagine_%283D_modeling_software%29&quot;&gt;Imagine&lt;/a&gt;
when I was about 13, trying to render some extruded letters made of glass
placed on a classic checker-board patterned surface (don’t laugh, this was
sort of a novel thing to do at that time, and I was a kid). Well, rendering
the final 360x576 image (&lt;a href=&quot;https://en.wikipedia.org/wiki/Overscan&amp;gt;&quot;&gt;overscan&lt;/a&gt;!)
took a bit more than 7 hours, but when I turned on the monitor in the morning
in great anticipation and saw the final image in its
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hold-And-Modify&quot;&gt;4096-colour&lt;/a&gt; interlaced glory
(probably quite primitive looking by today’s standards), I was in awe! What
made the experience even more interesting for me was that Imagine supported
the use of so-called procedural textures, which are textures solely generated
by mathematical functions instead of using bitmap images. I was mesmerised—a
photorealistic image generated by the computer using nothing else but pure
maths! &lt;sup id=&quot;fnref:amiga&quot;&gt;&lt;a href=&quot;#fn:amiga&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;I have always thought of ray tracing as some kind of black magic—something
utterly fascinating and very scary at the same time because of the complex
maths involved (which, as it turns out, is not quite true). This belief was
also strengthened by my modest excursions into OpenGL programming years later,
which uses a different method called
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rasterisation&quot;&gt;rasterization&lt;/a&gt; to generate 3D
images.&lt;/p&gt;

&lt;h2 id=&quot;ray-tracing-vs-rasterization&quot;&gt;Ray tracing vs rasterization&lt;/h2&gt;

&lt;p&gt;Historically, there have been two main disparate approaches to rendering 3D
scenes, rasterization and ray tracing (the situation is not so clear-cut
nowadays, as we’ll see later). While rasterization is by several orders of
magnitude more efficient at producing 3D animations at smooth frame rates in
real-time, ray tracing can produce vastly more photorealistic results.  While
many visual effects that happen in real life, such as non-planar reflections,
soft shadows, refractions and caustics, are quite simple, albeit
computationally very costly, to calculate with ray tracing, it requires quite
a bit of complicated trickery even just to fake them with rasterization.&lt;/p&gt;

&lt;p&gt;At the risk of grossly oversimplifying matters, rasterization is very
efficient at projecting several hundreds of thousands of three-dimensional
triangles onto a two-dimensional surface (the screen) and then colouring
(shading) them according to some rules. In order to obtain reasonable frame
rates during real-time animation, certain simplifications and optimisations
have to be made. Photorealistic rendering that accurately portrays how a given
scene would look in real life is not necessarily of primary importance as long
as the end result looks pleasing (which is a reasonable assumption for many
applications such as visualisation and games, where absolute fidelity to
reality is not a requirement). It’s the 3D artists’ job to arrange those
coloured triangles so that the resulting image looks good. Most
graphics-accelerator cards today implement some sort of rasterization pipeline
in hardware.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ray_tracing_(graphics)&quot;&gt;Ray tracing&lt;/a&gt;, on the
other hand, is a pretty much a no-holds-barred approach of generating
realistic images on a computer by simulating the path of photons emitted by
light sources bouncing from surface to surface among the objects making
up the 3D scene, finally landing on the image surface of the virtual camera.
Photorealism is of primary importance here, which is achieved by calculating
the image pixel by pixel using algorithms that mimic the laws of physics as
closely as practically possible (certain simplifications must be made, of
course, otherwise we would end up writing a Universe Simulator!).&lt;/p&gt;

&lt;p&gt;This begs the question, is ray tracing superior to rasterization then? In some
way, we can say it is.  As far as photorealistic rendering is concerned, ray
tracing is hard to beat, however this comes at a very steep computational
cost. But if we asked whether it was possible to create pleasing imagery using
rasterization alone, the answer would be a yes again. Just because
rasterization is not as much rooted in physical reality as ray tracing, it
would be foolish to think that it’s not capable of producing stellar results
that can look very convincingly real (just look at any modern game released
post 2010!). Indeed, there’s nothing preventing skilful artists from arranging
the triangles making up the scene in such a way that can convey very realistic
final results—similarly to how a master painter can create astonishingly
realistic works of art by nothing more than applying differently coloured
specks of paint onto a canvas with a mere paintbrush.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-04-28/caravaggio.jpg&quot; data-width=&quot;800&quot; data-height=&quot;822&quot;&gt;
        &lt;img src=&quot;/files/2016-04-28/caravaggio.jpg&quot; alt=&quot;Caravaggio, The Calling of St Matthew&quot; style=&quot;width: 80%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 80%;&quot;&gt;Surely, &lt;a href=&quot;https://en.wikipedia.org/wiki/Caravaggio&quot;&gt;Caravaggio&lt;/a&gt; did not know about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Fresnel_equations&quot;&gt;Fresnel equations&lt;/a&gt; or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Metropolis_light_transport&quot;&gt;Metropolis light transport&lt;/a&gt; when he painted &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Calling_of_St_Matthew_(Caravaggio)&quot;&gt;The Calling of Saint Matthew&lt;/a&gt; in 1600. Yet no one would say his paintings are not realistic enough just because he did not know about the physics of light! Interestingly enough, there have been some &lt;a href=&quot;http://www.webexhibits.org/hockneyoptics/post/grundy7.html&quot;&gt;speculations&lt;/a&gt; that he might have used the &lt;a href=&quot;https://en.wikipedia.org/wiki/Camera_obscura&quot;&gt;camera obscura&lt;/a&gt; to aid him in attaining his photorealistic results, the workings of which have strong connections to the basic idea of ray tracing. Here we go!&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;As CPUs and GPUs grew more powerful, previously purely
rasterization-based game engines have been increasingly incorporating ray
tracing techniques into their toolbox, such as &lt;a href=&quot;http://blogs.unity3d.com/2014/09/18/global-illumination-in-unity-5/&quot;&gt;global
illumination&lt;/a&gt;,
&lt;a href=&quot;http://twiik.net/articles/realtime-reflections-in-unity-5&quot;&gt;real-time
reflections&lt;/a&gt; and
&lt;a href=&quot;https://vimeo.com/82659909&quot;&gt;pseudo-refraction&lt;/a&gt; using shaders. These techniques
are usually quite limited compared to their ray tracing counterparts, for
example global illumination is usually restricted to static objects,
reflections are only possible on planar surfaces and refraction is faked with
shaders.&lt;/p&gt;

&lt;p&gt;Also, more and more game engines have started implementing &lt;a href=&quot;http://blog.wolfire.com/2015/10/Physically-based-rendering&quot;&gt;physically-based
rendering (PBR)&lt;/a&gt;
methods recently, the renowned
&lt;a href=&quot;https://en.wikipedia.org/wiki/CryEngine&quot;&gt;CryEngine&lt;/a&gt; being one notable
example. The following is the introductory paragraph of the &lt;a href=&quot;http://docs.cryengine.com/display/SDKDOC2/Physically+Based+Shading&quot;&gt;Physically Based
Shading&lt;/a&gt;
chapter of the &lt;a href=&quot;http://docs.cryengine.com/display/SDKDOC1/Home&quot;&gt;CryEngine SDK
documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;CRYENGINE 3.6 and beyond uses a shading model that is based on fundamental
  physical rules. Instead of using a plenty of fudge and tweak factors which
  don’t have a reasonable meaning in the real world, materials use some physical
  properties to describe how the incoming light should interact with them.
  A huge advantage of using a physically based model with certain rules is that
  material assets will a lot more consistent and look more convincing under
  different lighting conditions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This supports my earlier claim that while it’s certainly possible to create
realistic visuals with rasterization, photorealism is not inherent in the
rendering algorithm, but requires manual tweaking and fine-tuning of various
parameters on the part of the 3D artist.&lt;/p&gt;

&lt;p&gt;To sum up, I personally tend to think of rasterization as a more
artist-centric and ray tracing as a more scientific approach of image
generation. Ultimately, both are just tools of solving the problem of mapping
a 3D scene onto a 2D image surface, but there’s a certain undeniable beauty
and elegance to ray tracing algorithms in how they generate complex visual and
optical effects by the application of just a few simplified physical models of
reality.&lt;/p&gt;

&lt;h3 id=&quot;in-defence-of-rasterization&quot;&gt;In defence of rasterization&lt;/h3&gt;

&lt;p&gt;Just to bring the point home that rasterization is not inferior to ray tracing
but only different, and to further support my argument that it is a more
artist-based approach to rendering, let me present two examples from the two
opposite ends of the spectrum of what rasterization is capable of. As we’ll
see, it would have been difficult or impractical (or both) to achieve the same
results with pure ray tracing techniques alone in both cases.&lt;/p&gt;

&lt;p&gt;The magical realist adventure game (whatever that means) &lt;a href=&quot;http://kentuckyroutezero.com/&quot;&gt;Kentucky Road
Zero&lt;/a&gt; by the aptly titled developer &lt;a href=&quot;http://cardboardcomputer.com/&quot;&gt;Cardboard
Computer&lt;/a&gt; uses clever rasterization tricks to
render its highly stylised low-polygon world. While the abstract visuals bear
similitude to simple 2D paper cut-outs in most scenes, some occasional camera
angle switches hint at it that there’s more going on under the hood, and
indeed, this is in fact the 3D engine &lt;a href=&quot;https://unity3d.com/&quot;&gt;Unity&lt;/a&gt; in action,
as evidenced by this &lt;a href=&quot;https://unity3d.com/showcase/case-stories/cardboardcomputer-kentuckyroutezero&quot;&gt;featured
article&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-04-28/krz.jpg&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-04-28/krz.jpg&quot; alt=&quot;Kentucky Road Zero, Act I in-game screenshot&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;The opening scene of &lt;a href=&quot;http://kentuckyroutezero.com/&quot;&gt;Kentucky Road Zero&lt;/a&gt;, Act I by &lt;a href=&quot;http://cardboardcomputer.com/&quot;&gt;Cardboard Computer&lt;/a&gt;. If David Lynch ever ventured into making a computer game, then this would be it. The unique visual style of the game proves that an unconventional, abstract approach to rendering instead of taking the well-beaten &quot;standard&quot; photorealistic path can yield much more interesting results.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.theastronauts.com/&quot;&gt;The Astronauts&lt;/a&gt;’ first-person mystery game
&lt;a href=&quot;http://ethancartergame.com/&quot;&gt;The Vanishing of Ethan Carter&lt;/a&gt;, on the other
hand, employs a breathtakingly beautiful painterly approach to create its
immersive in-game atmosphere. As it can be clearly seen on the screenshot, the
results are stunningly realistic, but in a dreamy and artistic kind of way
which is not dissimilar at all to the Caravaggio painting presented above. The
developers used a technique called
&lt;a href=&quot;http://www.theastronauts.com/2014/03/visual-revolution-vanishing-ethan-carter/&quot;&gt;photogrammetery&lt;/a&gt;
to effectively sample reality in the form of textures and 3D meshes from
thousands of photographs, but from there on it’s all traditional rasterization
using the &lt;a href=&quot;https://www.unrealengine.com/&quot;&gt;Unreal Engine&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
  
    
      &lt;a class=&quot;largeimg&quot; href=&quot;/files/2016-04-28/ethan-carter.jpg&quot; data-width=&quot;1920&quot; data-height=&quot;1080&quot;&gt;
        &lt;img src=&quot;/files/2016-04-28/ethan-carter.jpg&quot; alt=&quot;The Vanishing of Ethan Carter in-game screenshot&quot; style=&quot;width: 100%&quot; /&gt;
      &lt;/a&gt;
    
  

  
    
    &lt;figcaption style=&quot; width: 100%;&quot;&gt;One of the most beautiful games of recent years, &lt;a href=&quot;http://ethancartergame.com/&quot;&gt;The Vanishing of Ethan Carter&lt;/a&gt; pulls the player in into its highly realistic yet painterly world right from the first second of gameplay. No trace (pun intended) of physical based rendering is to be found here, yet the results speak for themselves.&lt;/figcaption&gt;
  
&lt;/figure&gt;

&lt;p&gt;I suspect it would have been quite difficult to achieve the same level of
painterly feel by employing a strict ray tracing approach, even if that was
possible at fluid frame rates on current hardware at all.  While ray tracing
would have certainly yielded a more faithful portrayal of reality in terms of
sheer physical accuracy, it could not have granted the artist as much creative
freedom to sculpt the games’s almost otherwordly beautiful scenes by freely
manipulating the shades and colours.  Atmosphere and emotions beat pure
physics in this example again.&lt;/p&gt;

&lt;h2 id=&quot;why-nim&quot;&gt;Why Nim?&lt;/h2&gt;

&lt;p&gt;You know the old saying, mastering a programming language just by reading
about it is like trying to learn how to ride the bicycle from a book.  I get
quickly bored by solving toy textbook exercises too; implementing quicksort in
yet another language is not quite my idea of having a good time, really.  What
works for me best is writing a new application from scratch that does some
cool stuff that I’m excited about and learn the new language along the way. So
that’s what we’re gonna do here, write a full-featured ray tracer from the
ground up in pure Nim!&lt;/p&gt;

&lt;p&gt;Oh, and why &lt;a href=&quot;http://nim-lang.org/&quot;&gt;Nim&lt;/a&gt;? Serious people™ use C++ for
high-performance graphics stuff, don’t they? Well, this is going to be a ray
tracer, so speed matters &lt;em&gt;a lot&lt;/em&gt;, indeed—but so does the fun factor and my
sanity too, as I’m not paid to suffer here, this being a hobby project and all
(on a related note, don’t be a masochist, &lt;a href=&quot;/2016/03/03/the-quest-for-a-programming-language-that-doesnt-suck-part1/&quot;&gt;just say No to
C++!&lt;/a&gt;).
Nim claims to be “Efficient like C, expressive like Python and flexible like
Lisp” which sounds pretty good in my book. In fact, C, Python and Lisp are
probably my three all-time favourite languages, so this actually sounds more
like a dream come true! So what we’re gonna do here is take this little guy
for a wild ride and see how it lives up to its lofty goals in the real world!&lt;/p&gt;

&lt;h2 id=&quot;in-the-next-episode&quot;&gt;In the next episode…&lt;/h2&gt;

&lt;p&gt;We will examine the mathematical foundations of writing a simple ray tracer.
Time to brush up those high-school trigonometry skills! Stay tuned!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:amiga&quot;&gt;
      &lt;p&gt;To put things into perspective, my experimentations with ray tracing on the Amiga took place in around 1992. There was virtually no Internet back then, I haven’t even heard the word until several years later. I read it in a &lt;em&gt;paper computer magazine&lt;/em&gt; (yes, those things &lt;em&gt;did&lt;/em&gt; actually exist, can you believe it?) that the CGI effects in the 1991 film &lt;a href=&quot;https://en.wikipedia.org/wiki/Terminator_2:_Judgment_Day&quot;&gt;Terminator 2: Judgement Day&lt;/a&gt; were rendered on a room full of ultra high-end (and ultra-expensive) &lt;a href=&quot;http://www.obsolyte.com/sgi_iris/&quot;&gt;Silicon Graphics IRIS&lt;/a&gt; &lt;a href=&quot;http://www.sgistuff.net/funstuff/hollywood/&quot;&gt;workstations&lt;/a&gt;, but even with that kind of computing power it took &lt;em&gt;several months&lt;/em&gt; to render a few minutes’ worth of scenes. Now, seeing &lt;em&gt;any kind of&lt;/em&gt; semi-photorealistic ray traced image come out of my modest &lt;a href=&quot;https://en.wikipedia.org/wiki/Amiga_500&quot;&gt;Amiga 500&lt;/a&gt; personal computer setup sporting a blazingly fast 7.14 Mhz &lt;a href=&quot;https://en.wikipedia.org/wiki/Motorola_68000&quot;&gt;Motorola 68000 CPU&lt;/a&gt; seemed nothing short of a small miracle to me then! (Actually, that chip is as old as &lt;em&gt;yours truly&lt;/em&gt;, I’ve just checked…) Oh, and I had no such luxuries as a &lt;em&gt;hard disk drive&lt;/em&gt; either—the whole program and the scene to be rendered had to fit into the machine’s whopping 1 MB of RAM (expanded from the 512 KB factory default) and the final image was then slowly written to a blank &lt;a href=&quot;https://en.wikipedia.org/wiki/Floppy_disk_variants#Commodore_Amiga&quot;&gt;880 KB floppy disk&lt;/a&gt; over the course of 7-8 hours! Eh, kids these days with their GPU-accelerated Monte Carlo path tracers… &lt;a href=&quot;#fnref:amiga&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <pubDate>Thu, 28 Apr 2016 00:00:00 +1000</pubDate>
                <link>http://blog.johnnovak.net/2016/04/28/the-nim-raytracer-project-part-1-introduction/</link>
                <guid isPermaLink="true">http://blog.johnnovak.net/2016/04/28/the-nim-raytracer-project-part-1-introduction/</guid>
            </item>
        
    </channel>
</rss>

